
Proto2_6_2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000200c  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00007c00  80002028  80002028  00002428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80009e00  80009e00  0000a200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000a000  8000a000  0000a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000854  8000a018  8000a018  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000a86c  8000a86c  0000ac6c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000a870  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000a878  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000a880  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  8000a884  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000514  0000001c  8000a884  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .balign       00000000  00000530  8000ad98  0000b530  2**0
                  ALLOC
 15 .bss          000002b0  00000530  00000530  00000000  2**2
                  ALLOC
 16 .heap         0000e820  000007e0  000007e0  00000000  2**0
                  ALLOC
 17 .comment      00000030  00000000  00000000  0000b530  2**0
                  CONTENTS, READONLY
 18 .debug_aranges 000010c0  00000000  00000000  0000b560  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_pubnames 00001fa5  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   00026b62  00000000  00000000  0000e5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000631b  00000000  00000000  00035127  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000122ef  00000000  00000000  0003b442  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002888  00000000  00000000  0004d734  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    000057e1  00000000  00000000  0004ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    0000b6ce  00000000  00000000  0005579d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_macinfo 010ae4ac  00000000  00000000  00060e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 28 .debug_ranges 000012b8  00000000  00000000  0110f317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	20 28       	sub	r8,2

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

8000200c <_init>:
8000200c:	eb cd 40 40 	pushm	r6,lr
80002010:	48 26       	lddpc	r6,80002018 <_init+0xc>
80002012:	1e 26       	rsub	r6,pc
80002014:	c0 48       	rjmp	8000201c <_init+0x10>
80002016:	d7 03       	nop
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	1f f6       	ld.ub	r6,pc[0x7]
8000201c:	c5 4c       	rcall	800020c4 <frame_dummy>
8000201e:	e0 a0 3d fb 	rcall	80009c14 <__do_global_ctors_aux>
80002022:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002028 <_stext>:
80002028:	30 07       	mov	r7,0
8000202a:	e0 7a 00 00 	mov	r10,65536
8000202e:	5b fa       	cp.w	r10,-1
80002030:	f4 0d 17 10 	movne	sp,r10
80002034:	49 4b       	lddpc	r11,80002084 <_stext+0x5c>
80002036:	30 8c       	mov	r12,8
80002038:	18 3b       	cp.w	r11,r12
8000203a:	c0 70       	breq	80002048 <_stext+0x20>
8000203c:	e0 6a 05 30 	mov	r10,1328
80002040:	b7 09       	ld.d	r8,r11++
80002042:	b9 28       	st.d	r12++,r8
80002044:	14 3c       	cp.w	r12,r10
80002046:	cf d5       	brlt	80002040 <_stext+0x18>
80002048:	e0 6a 07 e0 	mov	r10,2016
8000204c:	e0 6c 05 30 	mov	r12,1328
80002050:	30 08       	mov	r8,0
80002052:	30 09       	mov	r9,0
80002054:	b9 28       	st.d	r12++,r8
80002056:	14 3c       	cp.w	r12,r10
80002058:	cf e5       	brlt	80002054 <_stext+0x2c>
8000205a:	e0 a0 09 f9 	rcall	8000344c <_init_startup>
8000205e:	fe cc 80 5e 	sub	r12,pc,-32674
80002062:	e0 a0 15 17 	rcall	80004a90 <atexit>
80002066:	cd 3f       	rcall	8000200c <_init>
80002068:	1a 9c       	mov	r12,sp
8000206a:	30 0b       	mov	r11,0
8000206c:	e0 a0 19 a0 	rcall	800053ac <_init_argv>
80002070:	5b fc       	cp.w	r12,-1
80002072:	f9 bc 00 00 	moveq	r12,0
80002076:	f9 ba 00 00 	moveq	r10,0
8000207a:	14 1d       	sub	sp,r10
8000207c:	e0 a0 05 a2 	rcall	80002bc0 <main>
80002080:	e0 a0 15 10 	rcall	80004aa0 <exit>
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	a8 70       	st.h	r4[0xe],r0

80002088 <__do_global_dtors_aux>:
80002088:	d4 21       	pushm	r4-r7,lr
8000208a:	e0 68 05 30 	mov	r8,1328
8000208e:	11 89       	ld.ub	r9,r8[0x0]
80002090:	30 08       	mov	r8,0
80002092:	f0 09 18 00 	cp.b	r9,r8
80002096:	c1 61       	brne	800020c2 <__do_global_dtors_aux+0x3a>
80002098:	31 08       	mov	r8,16
8000209a:	31 46       	mov	r6,20
8000209c:	10 95       	mov	r5,r8
8000209e:	10 16       	sub	r6,r8
800020a0:	e0 67 05 34 	mov	r7,1332
800020a4:	a3 46       	asr	r6,0x2
800020a6:	20 16       	sub	r6,1
800020a8:	c0 68       	rjmp	800020b4 <__do_global_dtors_aux+0x2c>
800020aa:	2f f8       	sub	r8,-1
800020ac:	8f 08       	st.w	r7[0x0],r8
800020ae:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020b2:	5d 18       	icall	r8
800020b4:	6e 08       	ld.w	r8,r7[0x0]
800020b6:	0c 38       	cp.w	r8,r6
800020b8:	cf 93       	brcs	800020aa <__do_global_dtors_aux+0x22>
800020ba:	30 19       	mov	r9,1
800020bc:	e0 68 05 30 	mov	r8,1328
800020c0:	b0 89       	st.b	r8[0x0],r9
800020c2:	d8 22       	popm	r4-r7,pc

800020c4 <frame_dummy>:
800020c4:	d4 01       	pushm	lr
800020c6:	31 8c       	mov	r12,24
800020c8:	78 08       	ld.w	r8,r12[0x0]
800020ca:	58 08       	cp.w	r8,0
800020cc:	c0 50       	breq	800020d6 <frame_dummy+0x12>
800020ce:	48 38       	lddpc	r8,800020d8 <frame_dummy+0x14>
800020d0:	58 08       	cp.w	r8,0
800020d2:	c0 20       	breq	800020d6 <frame_dummy+0x12>
800020d4:	5d 18       	icall	r8
800020d6:	d8 02       	popm	pc
800020d8:	00 00       	add	r0,r0
	...

800020dc <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
800020dc:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020de:	30 2b       	mov	r11,2
800020e0:	fe 7c 28 00 	mov	r12,-55296
800020e4:	f0 1f 00 02 	mcall	800020ec <dip204_select+0x10>
}
800020e8:	d8 02       	popm	pc
800020ea:	00 00       	add	r0,r0
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	26 3e       	sub	lr,99

800020f0 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
800020f0:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
800020f4:	f8 c8 ff f8 	sub	r8,r12,-8
800020f8:	30 69       	mov	r9,6
800020fa:	f2 08 18 00 	cp.b	r8,r9
800020fe:	e0 8b 00 0f 	brhi	8000211c <dip204_write_byte+0x2c>
80002102:	30 19       	mov	r9,1
80002104:	f2 08 09 48 	lsl	r8,r9,r8
80002108:	e2 18 00 55 	andl	r8,0x55,COH
8000210c:	c0 80       	breq	8000211c <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000210e:	18 9b       	mov	r11,r12
80002110:	fe 7c 28 00 	mov	r12,-55296
80002114:	f0 1f 00 0c 	mcall	80002144 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002118:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
8000211c:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000211e:	f8 07 16 18 	lsr	r7,r12,0x18
80002122:	0e 9b       	mov	r11,r7
80002124:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002128:	fe 7c 28 00 	mov	r12,-55296
8000212c:	f0 1f 00 06 	mcall	80002144 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002130:	ee 0b 15 04 	lsl	r11,r7,0x4
80002134:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002138:	fe 7c 28 00 	mov	r12,-55296
8000213c:	f0 1f 00 02 	mcall	80002144 <dip204_write_byte+0x54>
80002140:	e3 cd 80 80 	ldm	sp++,r7,pc
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	27 6e       	sub	lr,118

80002148 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002148:	eb cd 40 c0 	pushm	r6-r7,lr
8000214c:	20 1d       	sub	sp,4
8000214e:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002150:	fa c7 ff fc 	sub	r7,sp,-4
80002154:	30 08       	mov	r8,0
80002156:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002158:	30 0b       	mov	r11,0
8000215a:	fe 7c 28 00 	mov	r12,-55296
8000215e:	f0 1f 00 08 	mcall	8000217c <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002162:	0e 9b       	mov	r11,r7
80002164:	fe 7c 28 00 	mov	r12,-55296
80002168:	f0 1f 00 06 	mcall	80002180 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
8000216c:	1b b8       	ld.ub	r8,sp[0x3]
8000216e:	5c 98       	brev	r8
80002170:	b9 88       	lsr	r8,0x18
80002172:	ac 88       	st.b	r6[0x0],r8
}
80002174:	2f fd       	sub	sp,-4
80002176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000217a:	00 00       	add	r0,r0
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	27 6e       	sub	lr,118
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	27 8a       	sub	r10,120

80002184 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002184:	eb cd 40 c0 	pushm	r6-r7,lr
80002188:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
8000218a:	fa c7 ff fc 	sub	r7,sp,-4
8000218e:	30 08       	mov	r8,0
80002190:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002192:	e0 6c 00 fc 	mov	r12,252
80002196:	f0 1f 00 07 	mcall	800021b0 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
8000219a:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
8000219c:	0e 9c       	mov	r12,r7
8000219e:	f0 1f 00 06 	mcall	800021b4 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800021a2:	1b b8       	ld.ub	r8,sp[0x3]
800021a4:	ec 08 18 00 	cp.b	r8,r6
800021a8:	cf a5       	brlt	8000219c <dip204_wait_busy+0x18>
}
800021aa:	2f fd       	sub	sp,-4
800021ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	20 f0       	sub	r0,15
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	21 48       	sub	r8,20

800021b8 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800021b8:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800021ba:	30 2b       	mov	r11,2
800021bc:	fe 7c 28 00 	mov	r12,-55296
800021c0:	f0 1f 00 02 	mcall	800021c8 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800021c4:	d8 02       	popm	pc
800021c6:	00 00       	add	r0,r0
800021c8:	80 00       	ld.sh	r0,r0[0x0]
800021ca:	26 8a       	sub	r10,104

800021cc <dip204_write_string>:
  dip204_unselect();
}


void dip204_write_string(const char *string)
{
800021cc:	eb cd 40 f8 	pushm	r3-r7,lr
800021d0:	18 94       	mov	r4,r12
  unsigned char i=0;

  dip204_select();
800021d2:	f0 1f 00 11 	mcall	80002214 <dip204_write_string+0x48>
  /* for all chars in string */
  while(string[i]!=0)
800021d6:	09 89       	ld.ub	r9,r4[0x0]
800021d8:	30 08       	mov	r8,0
800021da:	f0 09 18 00 	cp.b	r9,r8
800021de:	c1 60       	breq	8000220a <dip204_write_string+0x3e>
800021e0:	08 96       	mov	r6,r4
800021e2:	30 07       	mov	r7,0
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021e4:	e0 63 00 fa 	mov	r3,250
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021e8:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800021ea:	06 9c       	mov	r12,r3
800021ec:	f0 1f 00 0b 	mcall	80002218 <dip204_write_string+0x4c>
    /* Send byte */
    dip204_write_byte(string[i]);
800021f0:	0d 8c       	ld.ub	r12,r6[0x0]
800021f2:	f0 1f 00 0a 	mcall	80002218 <dip204_write_string+0x4c>
    /* go to next char */
    i++;
800021f6:	2f f7       	sub	r7,-1
800021f8:	5c 57       	castu.b	r7
    dip204_wait_busy();
800021fa:	f0 1f 00 09 	mcall	8000221c <dip204_write_string+0x50>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
800021fe:	e8 07 00 06 	add	r6,r4,r7
80002202:	0d 88       	ld.ub	r8,r6[0x0]
80002204:	ea 08 18 00 	cp.b	r8,r5
80002208:	cf 11       	brne	800021ea <dip204_write_string+0x1e>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
8000220a:	f0 1f 00 06 	mcall	80002220 <dip204_write_string+0x54>
}
8000220e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002212:	00 00       	add	r0,r0
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	20 dc       	sub	r12,13
80002218:	80 00       	ld.sh	r0,r0[0x0]
8000221a:	20 f0       	sub	r0,15
8000221c:	80 00       	ld.sh	r0,r0[0x0]
8000221e:	21 84       	sub	r4,24
80002220:	80 00       	ld.sh	r0,r0[0x0]
80002222:	21 b8       	sub	r8,27

80002224 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002224:	eb cd 40 c0 	pushm	r6-r7,lr
80002228:	18 96       	mov	r6,r12
8000222a:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
8000222c:	f0 1f 00 11 	mcall	80002270 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002230:	31 48       	mov	r8,20
80002232:	f0 06 18 00 	cp.b	r6,r8
80002236:	5f 89       	srls	r9
80002238:	30 48       	mov	r8,4
8000223a:	f0 07 18 00 	cp.b	r7,r8
8000223e:	5f 88       	srls	r8
80002240:	f3 e8 00 08 	and	r8,r9,r8
80002244:	c0 31       	brne	8000224a <dip204_set_cursor_position+0x26>
80002246:	30 06       	mov	r6,0
80002248:	c0 68       	rjmp	80002254 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000224a:	28 16       	sub	r6,-127
8000224c:	20 17       	sub	r7,1
8000224e:	a5 77       	lsl	r7,0x5
80002250:	0e 06       	add	r6,r7
80002252:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002254:	e0 6c 00 f8 	mov	r12,248
80002258:	f0 1f 00 07 	mcall	80002274 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
8000225c:	0c 9c       	mov	r12,r6
8000225e:	f0 1f 00 06 	mcall	80002274 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002262:	f0 1f 00 06 	mcall	80002278 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002266:	f0 1f 00 06 	mcall	8000227c <dip204_set_cursor_position+0x58>
}
8000226a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000226e:	00 00       	add	r0,r0
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	20 dc       	sub	r12,13
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	20 f0       	sub	r0,15
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	21 84       	sub	r4,24
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	21 b8       	sub	r8,27

80002280 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002280:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002282:	f0 1f 00 08 	mcall	800022a0 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002286:	e0 6c 00 f8 	mov	r12,248
8000228a:	f0 1f 00 07 	mcall	800022a4 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
8000228e:	30 cc       	mov	r12,12
80002290:	f0 1f 00 05 	mcall	800022a4 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002294:	f0 1f 00 05 	mcall	800022a8 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002298:	f0 1f 00 05 	mcall	800022ac <dip204_hide_cursor+0x2c>
}
8000229c:	d8 02       	popm	pc
8000229e:	00 00       	add	r0,r0
800022a0:	80 00       	ld.sh	r0,r0[0x0]
800022a2:	20 dc       	sub	r12,13
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	20 f0       	sub	r0,15
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	21 84       	sub	r4,24
800022ac:	80 00       	ld.sh	r0,r0[0x0]
800022ae:	21 b8       	sub	r8,27

800022b0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
800022b0:	eb cd 40 80 	pushm	r7,lr
800022b4:	20 4d       	sub	sp,16
800022b6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
800022b8:	58 1c       	cp.w	r12,1
800022ba:	c3 01       	brne	8000231a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
800022bc:	30 69       	mov	r9,6
800022be:	4f 88       	lddpc	r8,8000249c <dip204_init+0x1ec>
800022c0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800022c2:	30 2b       	mov	r11,2
800022c4:	33 2c       	mov	r12,50
800022c6:	f0 1f 00 77 	mcall	800024a0 <dip204_init+0x1f0>

    // PWM controller configuration
    pwm_opt.diva=0;
800022ca:	30 08       	mov	r8,0
800022cc:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800022ce:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
800022d0:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
800022d2:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
800022d4:	1a 9c       	mov	r12,sp
800022d6:	f0 1f 00 74 	mcall	800024a4 <dip204_init+0x1f4>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800022da:	58 07       	cp.w	r7,0
800022dc:	f9 b7 01 31 	movne	r7,49
800022e0:	f9 b7 00 01 	moveq	r7,1
800022e4:	4f 18       	lddpc	r8,800024a8 <dip204_init+0x1f8>
800022e6:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
800022e8:	4f 1b       	lddpc	r11,800024ac <dip204_init+0x1fc>
800022ea:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800022ec:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800022f0:	ab a8       	sbr	r8,0xa
800022f2:	30 89       	mov	r9,8
800022f4:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800022f8:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800022fa:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800022fc:	33 28       	mov	r8,50
800022fe:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002300:	30 08       	mov	r8,0
80002302:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002304:	4e 67       	lddpc	r7,8000249c <dip204_init+0x1ec>
80002306:	6e 0c       	ld.w	r12,r7[0x0]
80002308:	f0 1f 00 6a 	mcall	800024b0 <dip204_init+0x200>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000230c:	6e 08       	ld.w	r8,r7[0x0]
8000230e:	30 1c       	mov	r12,1
80002310:	f8 08 09 4c 	lsl	r12,r12,r8
80002314:	f0 1f 00 68 	mcall	800024b4 <dip204_init+0x204>
80002318:	c0 a8       	rjmp	8000232c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000231a:	58 0b       	cp.w	r11,0
8000231c:	c0 50       	breq	80002326 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000231e:	33 2c       	mov	r12,50
80002320:	f0 1f 00 66 	mcall	800024b8 <dip204_init+0x208>
80002324:	c0 48       	rjmp	8000232c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002326:	33 2c       	mov	r12,50
80002328:	f0 1f 00 65 	mcall	800024bc <dip204_init+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000232c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002330:	f0 ca f7 00 	sub	r10,r8,-2304
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002334:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002338:	14 38       	cp.w	r8,r10
8000233a:	e0 88 00 08 	brls	8000234a <dip204_init+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000233e:	12 38       	cp.w	r8,r9
80002340:	fe 98 ff fa 	brls	80002334 <dip204_init+0x84>
80002344:	12 3a       	cp.w	r10,r9
80002346:	c6 e3       	brcs	80002422 <dip204_init+0x172>
80002348:	cf 6b       	rjmp	80002334 <dip204_init+0x84>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000234a:	12 38       	cp.w	r8,r9
8000234c:	e0 8b 00 6b 	brhi	80002422 <dip204_init+0x172>
80002350:	12 3a       	cp.w	r10,r9
80002352:	c6 83       	brcs	80002422 <dip204_init+0x172>
80002354:	cf 0b       	rjmp	80002334 <dip204_init+0x84>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002356:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000235a:	14 38       	cp.w	r8,r10
8000235c:	e0 88 00 08 	brls	8000236c <dip204_init+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002360:	12 38       	cp.w	r8,r9
80002362:	fe 98 ff fa 	brls	80002356 <dip204_init+0xa6>
80002366:	12 3a       	cp.w	r10,r9
80002368:	c6 b3       	brcs	8000243e <dip204_init+0x18e>
8000236a:	cf 6b       	rjmp	80002356 <dip204_init+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000236c:	12 38       	cp.w	r8,r9
8000236e:	e0 8b 00 68 	brhi	8000243e <dip204_init+0x18e>
80002372:	12 3a       	cp.w	r10,r9
80002374:	c6 53       	brcs	8000243e <dip204_init+0x18e>
80002376:	cf 0b       	rjmp	80002356 <dip204_init+0xa6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002378:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000237c:	14 38       	cp.w	r8,r10
8000237e:	e0 88 00 08 	brls	8000238e <dip204_init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002382:	12 38       	cp.w	r8,r9
80002384:	fe 98 ff fa 	brls	80002378 <dip204_init+0xc8>
80002388:	12 3a       	cp.w	r10,r9
8000238a:	c6 23       	brcs	8000244e <dip204_init+0x19e>
8000238c:	cf 6b       	rjmp	80002378 <dip204_init+0xc8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000238e:	12 38       	cp.w	r8,r9
80002390:	e0 8b 00 5f 	brhi	8000244e <dip204_init+0x19e>
80002394:	12 3a       	cp.w	r10,r9
80002396:	c5 c3       	brcs	8000244e <dip204_init+0x19e>
80002398:	cf 0b       	rjmp	80002378 <dip204_init+0xc8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000239a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000239e:	14 38       	cp.w	r8,r10
800023a0:	e0 88 00 08 	brls	800023b0 <dip204_init+0x100>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023a4:	12 38       	cp.w	r8,r9
800023a6:	fe 98 ff fa 	brls	8000239a <dip204_init+0xea>
800023aa:	12 3a       	cp.w	r10,r9
800023ac:	c5 93       	brcs	8000245e <dip204_init+0x1ae>
800023ae:	cf 6b       	rjmp	8000239a <dip204_init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023b0:	12 38       	cp.w	r8,r9
800023b2:	e0 8b 00 56 	brhi	8000245e <dip204_init+0x1ae>
800023b6:	12 3a       	cp.w	r10,r9
800023b8:	c5 33       	brcs	8000245e <dip204_init+0x1ae>
800023ba:	cf 0b       	rjmp	8000239a <dip204_init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023c0:	14 38       	cp.w	r8,r10
800023c2:	e0 88 00 08 	brls	800023d2 <dip204_init+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023c6:	12 38       	cp.w	r8,r9
800023c8:	fe 98 ff fa 	brls	800023bc <dip204_init+0x10c>
800023cc:	12 3a       	cp.w	r10,r9
800023ce:	c5 03       	brcs	8000246e <dip204_init+0x1be>
800023d0:	cf 6b       	rjmp	800023bc <dip204_init+0x10c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023d2:	12 38       	cp.w	r8,r9
800023d4:	e0 8b 00 4d 	brhi	8000246e <dip204_init+0x1be>
800023d8:	12 3a       	cp.w	r10,r9
800023da:	c4 a3       	brcs	8000246e <dip204_init+0x1be>
800023dc:	cf 0b       	rjmp	800023bc <dip204_init+0x10c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800023de:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023e2:	14 38       	cp.w	r8,r10
800023e4:	e0 88 00 08 	brls	800023f4 <dip204_init+0x144>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023e8:	12 38       	cp.w	r8,r9
800023ea:	fe 98 ff fa 	brls	800023de <dip204_init+0x12e>
800023ee:	12 3a       	cp.w	r10,r9
800023f0:	c4 73       	brcs	8000247e <dip204_init+0x1ce>
800023f2:	cf 6b       	rjmp	800023de <dip204_init+0x12e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023f4:	12 38       	cp.w	r8,r9
800023f6:	e0 8b 00 44 	brhi	8000247e <dip204_init+0x1ce>
800023fa:	12 3a       	cp.w	r10,r9
800023fc:	c4 13       	brcs	8000247e <dip204_init+0x1ce>
800023fe:	cf 0b       	rjmp	800023de <dip204_init+0x12e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002400:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002404:	14 38       	cp.w	r8,r10
80002406:	e0 88 00 08 	brls	80002416 <dip204_init+0x166>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000240a:	12 38       	cp.w	r8,r9
8000240c:	fe 98 ff fa 	brls	80002400 <dip204_init+0x150>
80002410:	12 3a       	cp.w	r10,r9
80002412:	c3 e3       	brcs	8000248e <dip204_init+0x1de>
80002414:	cf 6b       	rjmp	80002400 <dip204_init+0x150>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002416:	12 38       	cp.w	r8,r9
80002418:	e0 8b 00 3b 	brhi	8000248e <dip204_init+0x1de>
8000241c:	12 3a       	cp.w	r10,r9
8000241e:	c3 83       	brcs	8000248e <dip204_init+0x1de>
80002420:	cf 0b       	rjmp	80002400 <dip204_init+0x150>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002422:	f0 1f 00 28 	mcall	800024c0 <dip204_init+0x210>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002426:	e0 6c 00 f8 	mov	r12,248
8000242a:	f0 1f 00 27 	mcall	800024c4 <dip204_init+0x214>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000242e:	33 4c       	mov	r12,52
80002430:	f0 1f 00 25 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002434:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002438:	f0 ca ff 8c 	sub	r10,r8,-116
8000243c:	c8 db       	rjmp	80002356 <dip204_init+0xa6>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000243e:	30 9c       	mov	r12,9
80002440:	f0 1f 00 21 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002444:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002448:	f0 ca ff 8c 	sub	r10,r8,-116
8000244c:	c9 6b       	rjmp	80002378 <dip204_init+0xc8>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000244e:	33 0c       	mov	r12,48
80002450:	f0 1f 00 1d 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002454:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002458:	f0 ca ff 8c 	sub	r10,r8,-116
8000245c:	c9 fb       	rjmp	8000239a <dip204_init+0xea>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000245e:	30 fc       	mov	r12,15
80002460:	f0 1f 00 19 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002464:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002468:	f0 ca ff 8c 	sub	r10,r8,-116
8000246c:	ca 8b       	rjmp	800023bc <dip204_init+0x10c>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
8000246e:	30 1c       	mov	r12,1
80002470:	f0 1f 00 15 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002474:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002478:	f0 ca fd c0 	sub	r10,r8,-576
8000247c:	cb 1b       	rjmp	800023de <dip204_init+0x12e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
8000247e:	30 6c       	mov	r12,6
80002480:	f0 1f 00 11 	mcall	800024c4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002484:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002488:	f0 ca ff 8c 	sub	r10,r8,-116
8000248c:	cb ab       	rjmp	80002400 <dip204_init+0x150>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
8000248e:	f0 1f 00 0f 	mcall	800024c8 <dip204_init+0x218>
  // unselect chip
  dip204_unselect();
80002492:	f0 1f 00 0f 	mcall	800024cc <dip204_init+0x21c>
}
80002496:	2f cd       	sub	sp,-16
80002498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000249c:	00 00       	add	r0,r0
8000249e:	00 1c       	sub	r12,r0
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	28 00       	sub	r0,-128
800024a4:	80 00       	ld.sh	r0,r0[0x0]
800024a6:	25 74       	sub	r4,87
800024a8:	00 00       	add	r0,r0
800024aa:	05 58       	ld.sh	r8,--r2
800024ac:	00 00       	add	r0,r0
800024ae:	05 38       	ld.ub	r8,r2++
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	25 2c       	sub	r12,82
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	25 62       	sub	r2,86
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	28 a0       	sub	r0,-118
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	28 84       	sub	r4,-120
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	20 dc       	sub	r12,13
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	20 f0       	sub	r0,15
800024c8:	80 00       	ld.sh	r0,r0[0x0]
800024ca:	21 84       	sub	r4,24
800024cc:	80 00       	ld.sh	r0,r0[0x0]
800024ce:	21 b8       	sub	r8,27

800024d0 <adc_configure>:
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
800024d0:	78 18       	ld.w	r8,r12[0x4]
800024d2:	ea 18 0f 00 	orh	r8,0xf00
800024d6:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
800024d8:	78 18       	ld.w	r8,r12[0x4]
800024da:	ea 18 00 1f 	orh	r8,0x1f
800024de:	99 18       	st.w	r12[0x4],r8
}
800024e0:	5e fc       	retal	r12

800024e2 <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
800024e2:	30 28       	mov	r8,2
800024e4:	99 08       	st.w	r12[0x0],r8
}
800024e6:	5e fc       	retal	r12

800024e8 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
800024e8:	30 18       	mov	r8,1
800024ea:	f0 0b 09 48 	lsl	r8,r8,r11
800024ee:	99 48       	st.w	r12[0x10],r8
}
800024f0:	5e fc       	retal	r12

800024f2 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
800024f2:	78 78       	ld.w	r8,r12[0x1c]
800024f4:	30 19       	mov	r9,1
800024f6:	f2 0b 09 49 	lsl	r9,r9,r11
800024fa:	f3 e8 00 08 	and	r8,r9,r8
}
800024fe:	5f 1c       	srne	r12
80002500:	5e fc       	retal	r12
80002502:	d7 03       	nop

80002504 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002504:	eb cd 40 e0 	pushm	r5-r7,lr
80002508:	18 97       	mov	r7,r12
8000250a:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
8000250c:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002510:	0c 9b       	mov	r11,r6
80002512:	0e 9c       	mov	r12,r7
80002514:	f0 1f 00 05 	mcall	80002528 <adc_get_value+0x24>
80002518:	cf c0       	breq	80002510 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000251a:	2d 07       	sub	r7,-48
8000251c:	5c 75       	castu.h	r5
}
8000251e:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002522:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002526:	00 00       	add	r0,r0
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	24 f2       	sub	r2,79

8000252c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000252c:	58 0b       	cp.w	r11,0
8000252e:	c1 90       	breq	80002560 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002530:	58 6c       	cp.w	r12,6
80002532:	e0 8b 00 17 	brhi	80002560 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002536:	76 0a       	ld.w	r10,r11[0x0]
80002538:	fe 78 30 00 	mov	r8,-53248
8000253c:	f8 c9 ff f0 	sub	r9,r12,-16
80002540:	a5 79       	lsl	r9,0x5
80002542:	f0 09 00 09 	add	r9,r8,r9
80002546:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002548:	76 19       	ld.w	r9,r11[0x4]
8000254a:	a5 7c       	lsl	r12,0x5
8000254c:	f0 0c 00 0c 	add	r12,r8,r12
80002550:	f8 c8 fd fc 	sub	r8,r12,-516
80002554:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002556:	76 28       	ld.w	r8,r11[0x8]
80002558:	f8 cc fd f8 	sub	r12,r12,-520
8000255c:	99 08       	st.w	r12[0x0],r8
8000255e:	5e fd       	retal	0

  return PWM_SUCCESS;
80002560:	5e ff       	retal	1

80002562 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002562:	18 98       	mov	r8,r12
80002564:	e0 18 ff 80 	andl	r8,0xff80
80002568:	c0 20       	breq	8000256c <pwm_start_channels+0xa>
8000256a:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000256c:	fe 78 30 00 	mov	r8,-53248
80002570:	91 1c       	st.w	r8[0x4],r12
80002572:	5e fd       	retal	0

80002574 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002574:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002578:	58 0c       	cp.w	r12,0
8000257a:	c0 21       	brne	8000257e <pwm_init+0xa>
8000257c:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000257e:	e6 18 00 01 	andh	r8,0x1,COH
80002582:	c0 91       	brne	80002594 <pwm_init+0x20>
80002584:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002586:	fe 78 30 00 	mov	r8,-53248
8000258a:	37 f9       	mov	r9,127
8000258c:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000258e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002590:	d5 03       	csrf	0x10
80002592:	c0 68       	rjmp	8000259e <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002594:	fe 78 30 00 	mov	r8,-53248
80002598:	37 f9       	mov	r9,127
8000259a:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000259c:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000259e:	78 08       	ld.w	r8,r12[0x0]
800025a0:	78 39       	ld.w	r9,r12[0xc]
800025a2:	a9 69       	lsl	r9,0x8
800025a4:	f3 e8 11 09 	or	r9,r9,r8<<0x10
800025a8:	78 18       	ld.w	r8,r12[0x4]
800025aa:	10 49       	or	r9,r8
800025ac:	78 28       	ld.w	r8,r12[0x8]
800025ae:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800025b2:	fe 78 30 00 	mov	r8,-53248
800025b6:	91 09       	st.w	r8[0x0],r9
800025b8:	5e fd       	retal	0

800025ba <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800025ba:	f8 c8 00 01 	sub	r8,r12,1
800025be:	f0 0b 00 0b 	add	r11,r8,r11
800025c2:	f6 0c 0d 0a 	divu	r10,r11,r12
800025c6:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800025c8:	f4 c8 00 01 	sub	r8,r10,1
800025cc:	e0 48 00 fe 	cp.w	r8,254
800025d0:	e0 88 00 03 	brls	800025d6 <getBaudDiv+0x1c>
800025d4:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800025d6:	5c 8c       	casts.h	r12
}
800025d8:	5e fc       	retal	r12

800025da <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800025da:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025de:	30 18       	mov	r8,1
800025e0:	f0 09 18 00 	cp.b	r9,r8
800025e4:	e0 88 00 04 	brls	800025ec <spi_initMaster+0x12>
800025e8:	30 2c       	mov	r12,2
800025ea:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800025ec:	e0 68 00 80 	mov	r8,128
800025f0:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800025f2:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800025f4:	30 19       	mov	r9,1
800025f6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800025fa:	f7 39 00 0d 	ld.ub	r9,r11[13]
800025fe:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80002602:	30 09       	mov	r9,0
80002604:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002608:	30 fa       	mov	r10,15
8000260a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000260e:	99 18       	st.w	r12[0x4],r8
80002610:	5e f9       	retal	r9

80002612 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002612:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80002614:	30 18       	mov	r8,1
80002616:	f0 0b 18 00 	cp.b	r11,r8
8000261a:	5f be       	srhi	lr
8000261c:	f0 0a 18 00 	cp.b	r10,r8
80002620:	5f b8       	srhi	r8
80002622:	fd e8 10 08 	or	r8,lr,r8
80002626:	c0 30       	breq	8000262c <spi_selectionMode+0x1a>
80002628:	30 2c       	mov	r12,2
8000262a:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000262c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000262e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002632:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002636:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000263a:	99 18       	st.w	r12[0x4],r8
8000263c:	d8 0a       	popm	pc,r12=0

8000263e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000263e:	78 18       	ld.w	r8,r12[0x4]
80002640:	ea 18 00 0f 	orh	r8,0xf
80002644:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002646:	78 18       	ld.w	r8,r12[0x4]
80002648:	e2 18 00 04 	andl	r8,0x4,COH
8000264c:	c0 f0       	breq	8000266a <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000264e:	30 e8       	mov	r8,14
80002650:	f0 0b 18 00 	cp.b	r11,r8
80002654:	e0 8b 00 19 	brhi	80002686 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002658:	78 18       	ld.w	r8,r12[0x4]
8000265a:	b1 6b       	lsl	r11,0x10
8000265c:	ea 1b ff f0 	orh	r11,0xfff0
80002660:	e8 1b ff ff 	orl	r11,0xffff
80002664:	10 6b       	and	r11,r8
80002666:	99 1b       	st.w	r12[0x4],r11
80002668:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000266a:	30 38       	mov	r8,3
8000266c:	f0 0b 18 00 	cp.b	r11,r8
80002670:	e0 8b 00 0b 	brhi	80002686 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002674:	78 18       	ld.w	r8,r12[0x4]
80002676:	2f 0b       	sub	r11,-16
80002678:	30 19       	mov	r9,1
8000267a:	f2 0b 09 4b 	lsl	r11,r9,r11
8000267e:	5c db       	com	r11
80002680:	10 6b       	and	r11,r8
80002682:	99 1b       	st.w	r12[0x4],r11
80002684:	5e fd       	retal	0
80002686:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002688:	5e fc       	retal	r12

8000268a <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000268a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000268e:	c0 58       	rjmp	80002698 <spi_unselectChip+0xe>
		if (!timeout--) {
80002690:	58 08       	cp.w	r8,0
80002692:	c0 21       	brne	80002696 <spi_unselectChip+0xc>
80002694:	5e ff       	retal	1
80002696:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002698:	78 49       	ld.w	r9,r12[0x10]
8000269a:	e2 19 02 00 	andl	r9,0x200,COH
8000269e:	cf 90       	breq	80002690 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800026a0:	78 18       	ld.w	r8,r12[0x4]
800026a2:	ea 18 00 0f 	orh	r8,0xf
800026a6:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800026a8:	fc 18 01 00 	movh	r8,0x100
800026ac:	99 08       	st.w	r12[0x0],r8
800026ae:	5e fd       	retal	0

800026b0 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800026b0:	eb cd 40 f8 	pushm	r3-r7,lr
800026b4:	18 95       	mov	r5,r12
800026b6:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800026b8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800026bc:	30 38       	mov	r8,3
800026be:	f0 06 18 00 	cp.b	r6,r8
800026c2:	e0 8b 00 4d 	brhi	8000275c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800026c6:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800026ca:	30 18       	mov	r8,1
800026cc:	f0 04 18 00 	cp.b	r4,r8
800026d0:	e0 8b 00 46 	brhi	8000275c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800026d4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800026d8:	30 78       	mov	r8,7
800026da:	f0 03 18 00 	cp.b	r3,r8
800026de:	e0 88 00 3f 	brls	8000275c <spi_setupChipReg+0xac>
800026e2:	31 08       	mov	r8,16
800026e4:	f0 03 18 00 	cp.b	r3,r8
800026e8:	e0 8b 00 3a 	brhi	8000275c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800026ec:	14 9b       	mov	r11,r10
800026ee:	6e 1c       	ld.w	r12,r7[0x4]
800026f0:	f0 1f 00 1d 	mcall	80002764 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800026f4:	c3 45       	brlt	8000275c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800026f6:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800026f8:	ec 09 16 01 	lsr	r9,r6,0x1
800026fc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002700:	ec 16 00 01 	eorl	r6,0x1
80002704:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002708:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000270c:	20 83       	sub	r3,8
8000270e:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002712:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002716:	ef 39 00 09 	ld.ub	r9,r7[9]
8000271a:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8000271e:	ef 39 00 0a 	ld.ub	r9,r7[10]
80002722:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80002726:	0f 89       	ld.ub	r9,r7[0x0]
80002728:	30 1a       	mov	r10,1
8000272a:	f4 09 18 00 	cp.b	r9,r10
8000272e:	c0 e0       	breq	8000274a <spi_setupChipReg+0x9a>
80002730:	c0 a3       	brcs	80002744 <spi_setupChipReg+0x94>
80002732:	30 2a       	mov	r10,2
80002734:	f4 09 18 00 	cp.b	r9,r10
80002738:	c0 c0       	breq	80002750 <spi_setupChipReg+0xa0>
8000273a:	30 3a       	mov	r10,3
8000273c:	f4 09 18 00 	cp.b	r9,r10
80002740:	c0 e1       	brne	8000275c <spi_setupChipReg+0xac>
80002742:	c0 a8       	rjmp	80002756 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002744:	8b c8       	st.w	r5[0x30],r8
80002746:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000274a:	8b d8       	st.w	r5[0x34],r8
8000274c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002750:	8b e8       	st.w	r5[0x38],r8
80002752:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002756:	8b f8       	st.w	r5[0x3c],r8
80002758:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000275c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000275e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002762:	00 00       	add	r0,r0
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	25 ba       	sub	r10,91

80002768 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002768:	30 18       	mov	r8,1
8000276a:	99 08       	st.w	r12[0x0],r8
}
8000276c:	5e fc       	retal	r12

8000276e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000276e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002772:	c0 58       	rjmp	8000277c <spi_write+0xe>
		if (!timeout--) {
80002774:	58 08       	cp.w	r8,0
80002776:	c0 21       	brne	8000277a <spi_write+0xc>
80002778:	5e ff       	retal	1
8000277a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000277c:	78 49       	ld.w	r9,r12[0x10]
8000277e:	e2 19 00 02 	andl	r9,0x2,COH
80002782:	cf 90       	breq	80002774 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002784:	5c 7b       	castu.h	r11
80002786:	99 3b       	st.w	r12[0xc],r11
80002788:	5e fd       	retal	0

8000278a <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000278a:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000278e:	c0 58       	rjmp	80002798 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002790:	58 08       	cp.w	r8,0
80002792:	c0 21       	brne	80002796 <spi_read+0xc>
80002794:	5e ff       	retal	1
80002796:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002798:	78 49       	ld.w	r9,r12[0x10]
8000279a:	e2 19 02 01 	andl	r9,0x201,COH
8000279e:	e0 49 02 01 	cp.w	r9,513
800027a2:	cf 71       	brne	80002790 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800027a4:	78 28       	ld.w	r8,r12[0x8]
800027a6:	b6 08       	st.h	r11[0x0],r8
800027a8:	5e fd       	retal	0
800027aa:	d7 03       	nop

800027ac <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800027ac:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
800027b0:	49 28       	lddpc	r8,800027f8 <LED_Display+0x4c>
800027b2:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
800027b4:	49 28       	lddpc	r8,800027fc <LED_Display+0x50>
800027b6:	f0 c9 ff 80 	sub	r9,r8,-128
800027ba:	12 38       	cp.w	r8,r9
800027bc:	5e 2c       	reths	r12
800027be:	10 9b       	mov	r11,r8
800027c0:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
800027c2:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800027c6:	f0 f9 ff fc 	ld.w	r9,r8[-4]
800027ca:	a9 69       	lsl	r9,0x8
800027cc:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
800027d0:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800027d4:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
800027d8:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800027dc:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
800027e0:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800027e4:	70 0a       	ld.w	r10,r8[0x0]
800027e6:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800027ea:	70 0a       	ld.w	r10,r8[0x0]
800027ec:	93 1a       	st.w	r9[0x4],r10
800027ee:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
800027f0:	16 38       	cp.w	r8,r11
800027f2:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
800027f4:	a1 9c       	lsr	r12,0x1
800027f6:	ce 8b       	rjmp	800027c6 <LED_Display+0x1a>
800027f8:	00 00       	add	r0,r0
800027fa:	00 20       	rsub	r0,r0
800027fc:	80 00       	ld.sh	r0,r0[0x0]
800027fe:	a0 18       	st.h	r0[0x2],r8

80002800 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002800:	f8 08 16 05 	lsr	r8,r12,0x5
80002804:	a9 68       	lsl	r8,0x8
80002806:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000280a:	58 1b       	cp.w	r11,1
8000280c:	c0 d0       	breq	80002826 <gpio_enable_module_pin+0x26>
8000280e:	c0 63       	brcs	8000281a <gpio_enable_module_pin+0x1a>
80002810:	58 2b       	cp.w	r11,2
80002812:	c1 00       	breq	80002832 <gpio_enable_module_pin+0x32>
80002814:	58 3b       	cp.w	r11,3
80002816:	c1 40       	breq	8000283e <gpio_enable_module_pin+0x3e>
80002818:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000281a:	30 19       	mov	r9,1
8000281c:	f2 0c 09 49 	lsl	r9,r9,r12
80002820:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002822:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002824:	c1 28       	rjmp	80002848 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002826:	30 19       	mov	r9,1
80002828:	f2 0c 09 49 	lsl	r9,r9,r12
8000282c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000282e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002830:	c0 c8       	rjmp	80002848 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002832:	30 19       	mov	r9,1
80002834:	f2 0c 09 49 	lsl	r9,r9,r12
80002838:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000283a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000283c:	c0 68       	rjmp	80002848 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000283e:	30 19       	mov	r9,1
80002840:	f2 0c 09 49 	lsl	r9,r9,r12
80002844:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002846:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002848:	30 19       	mov	r9,1
8000284a:	f2 0c 09 4c 	lsl	r12,r9,r12
8000284e:	91 2c       	st.w	r8[0x8],r12
80002850:	5e fd       	retal	0
80002852:	d7 03       	nop

80002854 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002854:	d4 21       	pushm	r4-r7,lr
80002856:	18 97       	mov	r7,r12
80002858:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000285a:	58 0b       	cp.w	r11,0
8000285c:	c0 31       	brne	80002862 <gpio_enable_module+0xe>
8000285e:	30 05       	mov	r5,0
80002860:	c0 d8       	rjmp	8000287a <gpio_enable_module+0x26>
80002862:	30 06       	mov	r6,0
80002864:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002866:	6e 1b       	ld.w	r11,r7[0x4]
80002868:	6e 0c       	ld.w	r12,r7[0x0]
8000286a:	f0 1f 00 06 	mcall	80002880 <gpio_enable_module+0x2c>
8000286e:	18 45       	or	r5,r12
		gpiomap++;
80002870:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002872:	2f f6       	sub	r6,-1
80002874:	0c 34       	cp.w	r4,r6
80002876:	fe 9b ff f8 	brhi	80002866 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000287a:	0a 9c       	mov	r12,r5
8000287c:	d8 22       	popm	r4-r7,pc
8000287e:	00 00       	add	r0,r0
80002880:	80 00       	ld.sh	r0,r0[0x0]
80002882:	28 00       	sub	r0,-128

80002884 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002884:	f8 08 16 05 	lsr	r8,r12,0x5
80002888:	a9 68       	lsl	r8,0x8
8000288a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000288e:	30 19       	mov	r9,1
80002890:	f2 0c 09 4c 	lsl	r12,r9,r12
80002894:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002898:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000289c:	91 1c       	st.w	r8[0x4],r12
}
8000289e:	5e fc       	retal	r12

800028a0 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800028a0:	f8 08 16 05 	lsr	r8,r12,0x5
800028a4:	a9 68       	lsl	r8,0x8
800028a6:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800028aa:	30 19       	mov	r9,1
800028ac:	f2 0c 09 4c 	lsl	r12,r9,r12
800028b0:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800028b4:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800028b8:	91 1c       	st.w	r8[0x4],r12
}
800028ba:	5e fc       	retal	r12

800028bc <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800028bc:	c0 08       	rjmp	800028bc <_unhandled_interrupt>
800028be:	d7 03       	nop

800028c0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800028c0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800028c4:	49 99       	lddpc	r9,80002928 <INTC_register_interrupt+0x68>
800028c6:	f2 08 00 39 	add	r9,r9,r8<<0x3
800028ca:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800028ce:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800028d0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800028d4:	58 0a       	cp.w	r10,0
800028d6:	c0 91       	brne	800028e8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800028d8:	49 59       	lddpc	r9,8000292c <INTC_register_interrupt+0x6c>
800028da:	49 6a       	lddpc	r10,80002930 <INTC_register_interrupt+0x70>
800028dc:	12 1a       	sub	r10,r9
800028de:	fe 79 08 00 	mov	r9,-63488
800028e2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028e6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800028e8:	58 1a       	cp.w	r10,1
800028ea:	c0 a1       	brne	800028fe <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800028ec:	49 09       	lddpc	r9,8000292c <INTC_register_interrupt+0x6c>
800028ee:	49 2a       	lddpc	r10,80002934 <INTC_register_interrupt+0x74>
800028f0:	12 1a       	sub	r10,r9
800028f2:	bf aa       	sbr	r10,0x1e
800028f4:	fe 79 08 00 	mov	r9,-63488
800028f8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028fc:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800028fe:	58 2a       	cp.w	r10,2
80002900:	c0 a1       	brne	80002914 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002902:	48 b9       	lddpc	r9,8000292c <INTC_register_interrupt+0x6c>
80002904:	48 da       	lddpc	r10,80002938 <INTC_register_interrupt+0x78>
80002906:	12 1a       	sub	r10,r9
80002908:	bf ba       	sbr	r10,0x1f
8000290a:	fe 79 08 00 	mov	r9,-63488
8000290e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002912:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002914:	48 69       	lddpc	r9,8000292c <INTC_register_interrupt+0x6c>
80002916:	48 aa       	lddpc	r10,8000293c <INTC_register_interrupt+0x7c>
80002918:	12 1a       	sub	r10,r9
8000291a:	ea 1a c0 00 	orh	r10,0xc000
8000291e:	fe 79 08 00 	mov	r9,-63488
80002922:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002926:	5e fc       	retal	r12
80002928:	80 00       	ld.sh	r0,r0[0x0]
8000292a:	a0 98       	st.b	r0[0x1],r8
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	9e 00       	ld.sh	r0,pc[0x0]
80002930:	80 00       	ld.sh	r0,r0[0x0]
80002932:	9f 04       	st.w	pc[0x0],r4
80002934:	80 00       	ld.sh	r0,r0[0x0]
80002936:	9f 12       	st.w	pc[0x4],r2
80002938:	80 00       	ld.sh	r0,r0[0x0]
8000293a:	9f 20       	st.w	pc[0x8],r0
8000293c:	80 00       	ld.sh	r0,r0[0x0]
8000293e:	9f 2e       	st.w	pc[0x8],lr

80002940 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002940:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002942:	49 18       	lddpc	r8,80002984 <INTC_init_interrupts+0x44>
80002944:	e3 b8 00 01 	mtsr	0x4,r8
80002948:	49 0e       	lddpc	lr,80002988 <INTC_init_interrupts+0x48>
8000294a:	30 07       	mov	r7,0
8000294c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000294e:	49 0c       	lddpc	r12,8000298c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002950:	49 05       	lddpc	r5,80002990 <INTC_init_interrupts+0x50>
80002952:	10 15       	sub	r5,r8
80002954:	fe 76 08 00 	mov	r6,-63488
80002958:	c1 08       	rjmp	80002978 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000295a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000295c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000295e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002960:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002964:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002966:	10 3a       	cp.w	r10,r8
80002968:	fe 9b ff fc 	brhi	80002960 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000296c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002970:	2f f7       	sub	r7,-1
80002972:	2f 8e       	sub	lr,-8
80002974:	59 47       	cp.w	r7,20
80002976:	c0 50       	breq	80002980 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002978:	7c 08       	ld.w	r8,lr[0x0]
8000297a:	58 08       	cp.w	r8,0
8000297c:	ce f1       	brne	8000295a <INTC_init_interrupts+0x1a>
8000297e:	cf 7b       	rjmp	8000296c <INTC_init_interrupts+0x2c>
80002980:	d8 22       	popm	r4-r7,pc
80002982:	00 00       	add	r0,r0
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	9e 00       	ld.sh	r0,pc[0x0]
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	a0 98       	st.b	r0[0x1],r8
8000298c:	80 00       	ld.sh	r0,r0[0x0]
8000298e:	28 bc       	sub	r12,-117
80002990:	80 00       	ld.sh	r0,r0[0x0]
80002992:	9f 04       	st.w	pc[0x0],r4

80002994 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002994:	fe 78 08 00 	mov	r8,-63488
80002998:	e0 69 00 83 	mov	r9,131
8000299c:	f2 0c 01 0c 	sub	r12,r9,r12
800029a0:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800029a4:	f2 ca ff c0 	sub	r10,r9,-64
800029a8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800029ac:	58 08       	cp.w	r8,0
800029ae:	c0 21       	brne	800029b2 <_get_interrupt_handler+0x1e>
800029b0:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800029b2:	f0 08 12 00 	clz	r8,r8
800029b6:	48 5a       	lddpc	r10,800029c8 <_get_interrupt_handler+0x34>
800029b8:	f4 09 00 39 	add	r9,r10,r9<<0x3
800029bc:	f0 08 11 1f 	rsub	r8,r8,31
800029c0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800029c2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800029c6:	5e fc       	retal	r12
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	a0 98       	st.b	r0[0x1],r8

800029cc <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800029cc:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800029ce:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800029d2:	99 a8       	st.w	r12[0x28],r8
}
800029d4:	5e fc       	retal	r12
800029d6:	d7 03       	nop

800029d8 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800029d8:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800029da:	ec 5b bb 9f 	cp.w	r11,899999
800029de:	e0 8b 00 04 	brhi	800029e6 <pm_enable_osc0_crystal+0xe>
800029e2:	30 4b       	mov	r11,4
800029e4:	c1 38       	rjmp	80002a0a <pm_enable_osc0_crystal+0x32>
800029e6:	e0 68 c6 bf 	mov	r8,50879
800029ea:	ea 18 00 2d 	orh	r8,0x2d
800029ee:	10 3b       	cp.w	r11,r8
800029f0:	e0 8b 00 04 	brhi	800029f8 <pm_enable_osc0_crystal+0x20>
800029f4:	30 5b       	mov	r11,5
800029f6:	c0 a8       	rjmp	80002a0a <pm_enable_osc0_crystal+0x32>
800029f8:	e0 68 12 00 	mov	r8,4608
800029fc:	ea 18 00 7a 	orh	r8,0x7a
80002a00:	10 3b       	cp.w	r11,r8
80002a02:	f9 bb 03 06 	movlo	r11,6
80002a06:	f9 bb 02 07 	movhs	r11,7
80002a0a:	f0 1f 00 02 	mcall	80002a10 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002a0e:	d8 02       	popm	pc
80002a10:	80 00       	ld.sh	r0,r0[0x0]
80002a12:	29 cc       	sub	r12,-100

80002a14 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002a14:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002a16:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002a1a:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002a1c:	78 08       	ld.w	r8,r12[0x0]
80002a1e:	a3 a8       	sbr	r8,0x2
80002a20:	99 08       	st.w	r12[0x0],r8
}
80002a22:	5e fc       	retal	r12

80002a24 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002a24:	79 58       	ld.w	r8,r12[0x54]
80002a26:	e2 18 00 80 	andl	r8,0x80,COH
80002a2a:	cf d0       	breq	80002a24 <pm_wait_for_clk0_ready>
}
80002a2c:	5e fc       	retal	r12
80002a2e:	d7 03       	nop

80002a30 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002a30:	eb cd 40 80 	pushm	r7,lr
80002a34:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002a36:	f0 1f 00 04 	mcall	80002a44 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002a3a:	0e 9c       	mov	r12,r7
80002a3c:	f0 1f 00 03 	mcall	80002a48 <pm_enable_clk0+0x18>
}
80002a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	2a 14       	sub	r4,-95
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	2a 24       	sub	r4,-94

80002a4c <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002a4c:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002a4e:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002a52:	99 08       	st.w	r12[0x0],r8
}
80002a54:	5e fc       	retal	r12
80002a56:	d7 03       	nop

80002a58 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002a58:	eb cd 40 c0 	pushm	r6-r7,lr
80002a5c:	18 97       	mov	r7,r12
80002a5e:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002a60:	f0 1f 00 06 	mcall	80002a78 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002a64:	0c 9b       	mov	r11,r6
80002a66:	0e 9c       	mov	r12,r7
80002a68:	f0 1f 00 05 	mcall	80002a7c <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002a6c:	30 1b       	mov	r11,1
80002a6e:	0e 9c       	mov	r12,r7
80002a70:	f0 1f 00 04 	mcall	80002a80 <pm_switch_to_osc0+0x28>
}
80002a74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	29 d8       	sub	r8,-99
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2a 30       	sub	r0,-93
80002a80:	80 00       	ld.sh	r0,r0[0x0]
80002a82:	2a 4c       	sub	r12,-92

80002a84 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002a84:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002a86:	58 0c       	cp.w	r12,0
80002a88:	c0 40       	breq	80002a90 <pcl_switch_to_osc+0xc>
80002a8a:	fe 7c d8 f0 	mov	r12,-10000
80002a8e:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002a90:	fe 7c 0c 00 	mov	r12,-62464
80002a94:	f0 1f 00 02 	mcall	80002a9c <pcl_switch_to_osc+0x18>
80002a98:	d8 0a       	popm	pc,r12=0
80002a9a:	00 00       	add	r0,r0
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	2a 58       	sub	r8,-91

80002aa0 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002aa0:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002aa2:	e2 18 00 02 	andl	r8,0x2,COH
80002aa6:	c0 31       	brne	80002aac <usart_write_char+0xc>
80002aa8:	30 2c       	mov	r12,2
80002aaa:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002aac:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002ab0:	99 7b       	st.w	r12[0x1c],r11
80002ab2:	5e fd       	retal	0

80002ab4 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002ab4:	eb cd 40 e0 	pushm	r5-r7,lr
80002ab8:	18 96       	mov	r6,r12
80002aba:	16 95       	mov	r5,r11
80002abc:	e0 67 27 0f 	mov	r7,9999
80002ac0:	c0 68       	rjmp	80002acc <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002ac2:	58 07       	cp.w	r7,0
80002ac4:	c0 31       	brne	80002aca <usart_putchar+0x16>
80002ac6:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80002aca:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002acc:	0a 9b       	mov	r11,r5
80002ace:	0c 9c       	mov	r12,r6
80002ad0:	f0 1f 00 03 	mcall	80002adc <usart_putchar+0x28>
80002ad4:	cf 71       	brne	80002ac2 <usart_putchar+0xe>

  return USART_SUCCESS;
}
80002ad6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	2a a0       	sub	r0,-86

80002ae0 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80002ae0:	78 58       	ld.w	r8,r12[0x14]
80002ae2:	e2 18 00 e0 	andl	r8,0xe0,COH
80002ae6:	c0 30       	breq	80002aec <usart_read_char+0xc>
80002ae8:	30 4c       	mov	r12,4
80002aea:	5e fc       	retal	r12
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80002aec:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80002aee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002af2:	c0 31       	brne	80002af8 <usart_read_char+0x18>
80002af4:	30 3c       	mov	r12,3
80002af6:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80002af8:	78 68       	ld.w	r8,r12[0x18]
80002afa:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002afe:	97 08       	st.w	r11[0x0],r8
80002b00:	5e fd       	retal	0
80002b02:	d7 03       	nop

80002b04 <usart_getchar>:
    return USART_RX_EMPTY;
}


int usart_getchar(volatile avr32_usart_t *usart)
{
80002b04:	eb cd 40 c0 	pushm	r6-r7,lr
80002b08:	20 1d       	sub	sp,4
80002b0a:	18 96       	mov	r6,r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80002b0c:	1a 97       	mov	r7,sp
80002b0e:	1a 9b       	mov	r11,sp
80002b10:	0c 9c       	mov	r12,r6
80002b12:	f0 1f 00 07 	mcall	80002b2c <usart_getchar+0x28>
80002b16:	58 3c       	cp.w	r12,3
80002b18:	cf b0       	breq	80002b0e <usart_getchar+0xa>

  if (ret == USART_RX_ERROR)
80002b1a:	58 4c       	cp.w	r12,4
80002b1c:	f9 bc 00 ff 	moveq	r12,-1
    return USART_FAILURE;

  return c;
80002b20:	fb fc 10 00 	ld.wne	r12,sp[0x0]
}
80002b24:	2f fd       	sub	sp,-4
80002b26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b2a:	00 00       	add	r0,r0
80002b2c:	80 00       	ld.sh	r0,r0[0x0]
80002b2e:	2a e0       	sub	r0,-82

80002b30 <initialiseLCD>:
		}

		vTaskDelay(100);
	}
}
void initialiseLCD(void) {
80002b30:	eb cd 40 80 	pushm	r7,lr
80002b34:	20 4d       	sub	sp,16
		{ DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION }, // MOSI.
		{ DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION } // Chip Select NPCS.
	};

	// Disable all interrupts.
	Disable_global_interrupt();
80002b36:	d3 03       	ssrf	0x10

	// init the interrupts
	INTC_init_interrupts();
80002b38:	f0 1f 00 19 	mcall	80002b9c <initialiseLCD+0x6c>

	// Enable all interrupts.
	Enable_global_interrupt();
80002b3c:	d5 03       	csrf	0x10
		.spck_delay = 0,
		.trans_delay = 8, // <---- Very importent with the new compilor in atmel 6.x
		.stay_act = 1,
		.spi_mode = 0,
		.modfdis = 1
	};
80002b3e:	49 98       	lddpc	r8,80002ba0 <initialiseLCD+0x70>
80002b40:	1a 97       	mov	r7,sp
80002b42:	f0 ea 00 00 	ld.d	r10,r8[0]
80002b46:	fa eb 00 00 	st.d	sp[0],r10
80002b4a:	f0 e8 00 08 	ld.d	r8,r8[8]
80002b4e:	fa e9 00 08 	st.d	sp[8],r8

	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP, sizeof(DIP204_SPI_GPIO_MAP)
80002b52:	30 4b       	mov	r11,4
80002b54:	49 4c       	lddpc	r12,80002ba4 <initialiseLCD+0x74>
80002b56:	f0 1f 00 15 	mcall	80002ba8 <initialiseLCD+0x78>
	/ sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as master
	spi_initMaster(DIP204_SPI, &spiOptions);
80002b5a:	1a 9b       	mov	r11,sp
80002b5c:	fe 7c 28 00 	mov	r12,-55296
80002b60:	f0 1f 00 13 	mcall	80002bac <initialiseLCD+0x7c>

	// Set selection mode: variable_ps, pcs_decode, delay
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002b64:	30 09       	mov	r9,0
80002b66:	12 9a       	mov	r10,r9
80002b68:	12 9b       	mov	r11,r9
80002b6a:	fe 7c 28 00 	mov	r12,-55296
80002b6e:	f0 1f 00 11 	mcall	80002bb0 <initialiseLCD+0x80>

	// Enable SPI
	spi_enable(DIP204_SPI);
80002b72:	fe 7c 28 00 	mov	r12,-55296
80002b76:	f0 1f 00 10 	mcall	80002bb4 <initialiseLCD+0x84>

	// setup chip registers
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
80002b7a:	e0 6a 1b 00 	mov	r10,6912
80002b7e:	ea 1a 00 b7 	orh	r10,0xb7
80002b82:	1a 9b       	mov	r11,sp
80002b84:	fe 7c 28 00 	mov	r12,-55296
80002b88:	f0 1f 00 0c 	mcall	80002bb8 <initialiseLCD+0x88>

	// initialize LCD
	dip204_init(backlight_PWM, true);
80002b8c:	30 1b       	mov	r11,1
80002b8e:	16 9c       	mov	r12,r11
80002b90:	f0 1f 00 0b 	mcall	80002bbc <initialiseLCD+0x8c>

}
80002b94:	2f cd       	sub	sp,-16
80002b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b9a:	00 00       	add	r0,r0
80002b9c:	80 00       	ld.sh	r0,r0[0x0]
80002b9e:	29 40       	sub	r0,-108
80002ba0:	80 00       	ld.sh	r0,r0[0x0]
80002ba2:	a2 74       	st.h	r1[0xe],r4
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	a2 54       	st.h	r1[0xa],r4
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	28 54       	sub	r4,-123
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	25 da       	sub	r10,93
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	26 12       	sub	r2,97
80002bb4:	80 00       	ld.sh	r0,r0[0x0]
80002bb6:	27 68       	sub	r8,118
80002bb8:	80 00       	ld.sh	r0,r0[0x0]
80002bba:	26 b0       	sub	r0,107
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	22 b0       	sub	r0,43

80002bc0 <main>:
	0xDA, 0xD3, 0xCD, 0xC7, 0xC0, 0xBA, 0xB5, 0xAF, 0xAA, 0xA4, 0x9F, 0x9A,
	0x96, 0x91, 0x8C, 0x88, 0x84, 0x80, 0x7C, 0x78, 0x74, 0x71, 0x6D, 0x6A,
	0x67, 0x64, 0x61, 0x5E, 0x5B, 0x58, 0x55, 0x53, 0x50, 0x4E, 0x4C, 0x49,
0x47, 0x45, 0x43, 0x41, 0x3F, 0x3D, 0x3C, 0x3A, 0x38 };

int main(void) {
80002bc0:	eb cd 40 80 	pushm	r7,lr
	// Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
	// frequency FOSC0) with an appropriate startup time then switch the main clock
	// source to Osc0.
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80002bc4:	30 3a       	mov	r10,3
80002bc6:	e0 6b 1b 00 	mov	r11,6912
80002bca:	ea 1b 00 b7 	orh	r11,0xb7
80002bce:	30 0c       	mov	r12,0
80002bd0:	f0 1f 00 21 	mcall	80002c54 <main+0x94>

	/* Setup the LED's all off */
	LED_Display(0);
80002bd4:	30 0c       	mov	r12,0
80002bd6:	f0 1f 00 21 	mcall	80002c58 <main+0x98>

	initialiseLCD();
80002bda:	f0 1f 00 21 	mcall	80002c5c <main+0x9c>

	POWER_SEMAPHORE = xSemaphoreCreateCounting(1,1);
80002bde:	30 1b       	mov	r11,1
80002be0:	16 9c       	mov	r12,r11
80002be2:	f0 1f 00 20 	mcall	80002c60 <main+0xa0>
80002be6:	4a 08       	lddpc	r8,80002c64 <main+0xa4>
80002be8:	91 0c       	st.w	r8[0x0],r12
	TEMPERATURE_DESIRED_SEMAPHORE = xSemaphoreCreateCounting(1,1);
80002bea:	30 1b       	mov	r11,1
80002bec:	16 9c       	mov	r12,r11
80002bee:	f0 1f 00 1d 	mcall	80002c60 <main+0xa0>
80002bf2:	49 e8       	lddpc	r8,80002c68 <main+0xa8>
80002bf4:	91 0c       	st.w	r8[0x0],r12
	TEMPERATURE_ROOM_SEMAPHORE = xSemaphoreCreateCounting(1,1);
80002bf6:	30 1b       	mov	r11,1
80002bf8:	16 9c       	mov	r12,r11
80002bfa:	f0 1f 00 1a 	mcall	80002c60 <main+0xa0>
80002bfe:	49 c8       	lddpc	r8,80002c6c <main+0xac>
80002c00:	91 0c       	st.w	r8[0x0],r12

	/* Start the demo tasks defined within this file. */
	xTaskCreate(
80002c02:	30 07       	mov	r7,0
80002c04:	1a d7       	st.w	--sp,r7
80002c06:	1a d7       	st.w	--sp,r7
80002c08:	1a d7       	st.w	--sp,r7
80002c0a:	0e 98       	mov	r8,r7
80002c0c:	0e 99       	mov	r9,r7
80002c0e:	e0 6a 03 00 	mov	r10,768
80002c12:	49 8b       	lddpc	r11,80002c70 <main+0xb0>
80002c14:	49 8c       	lddpc	r12,80002c74 <main+0xb4>
80002c16:	f0 1f 00 19 	mcall	80002c78 <main+0xb8>
	, (const signed portCHAR *)"Output"
	, configMINIMAL_STACK_SIZE*3
	, NULL
	, tskIDLE_PRIORITY
	, NULL );
	xTaskCreate(
80002c1a:	1a d7       	st.w	--sp,r7
80002c1c:	1a d7       	st.w	--sp,r7
80002c1e:	1a d7       	st.w	--sp,r7
80002c20:	30 28       	mov	r8,2
80002c22:	0e 99       	mov	r9,r7
80002c24:	e0 6a 01 00 	mov	r10,256
80002c28:	49 5b       	lddpc	r11,80002c7c <main+0xbc>
80002c2a:	49 6c       	lddpc	r12,80002c80 <main+0xc0>
80002c2c:	f0 1f 00 13 	mcall	80002c78 <main+0xb8>
	, (const signed portCHAR *)"Calcul"
	, configMINIMAL_STACK_SIZE
	, NULL
	, tskIDLE_PRIORITY + 2
	, NULL );
	xTaskCreate(
80002c30:	1a d7       	st.w	--sp,r7
80002c32:	1a d7       	st.w	--sp,r7
80002c34:	1a d7       	st.w	--sp,r7
80002c36:	30 18       	mov	r8,1
80002c38:	0e 99       	mov	r9,r7
80002c3a:	e0 6a 01 00 	mov	r10,256
80002c3e:	49 2b       	lddpc	r11,80002c84 <main+0xc4>
80002c40:	49 2c       	lddpc	r12,80002c88 <main+0xc8>
80002c42:	f0 1f 00 0e 	mcall	80002c78 <main+0xb8>
	, NULL
	, tskIDLE_PRIORITY + 1
	, NULL );

	/* Start the scheduler. */
	vTaskStartScheduler();
80002c46:	2f 7d       	sub	sp,-36
80002c48:	f0 1f 00 11 	mcall	80002c8c <main+0xcc>

	/* Will only get here if there was insufficient memory to create the idle task. */

	return 0;
}
80002c4c:	0e 9c       	mov	r12,r7
80002c4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c52:	00 00       	add	r0,r0
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	2a 84       	sub	r4,-88
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	27 ac       	sub	r12,122
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	2b 30       	sub	r0,-77
80002c60:	80 00       	ld.sh	r0,r0[0x0]
80002c62:	39 30       	mov	r0,-109
80002c64:	00 00       	add	r0,r0
80002c66:	06 58       	eor	r8,r3
80002c68:	00 00       	add	r0,r0
80002c6a:	06 48       	or	r8,r3
80002c6c:	00 00       	add	r0,r0
80002c6e:	06 5c       	eor	r12,r3
80002c70:	80 00       	ld.sh	r0,r0[0x0]
80002c72:	a2 84       	st.b	r1[0x0],r4
80002c74:	80 00       	ld.sh	r0,r0[0x0]
80002c76:	2e 7c       	sub	r12,-25
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	3f 44       	mov	r4,-12
80002c7c:	80 00       	ld.sh	r0,r0[0x0]
80002c7e:	a2 8c       	st.b	r1[0x0],r12
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2d a8       	sub	r8,-38
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	a2 94       	st.b	r1[0x1],r4
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	2c 90       	sub	r0,-55
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	41 2c       	lddsp	r12,sp[0x48]

80002c90 <vReadingADC>:

static void vReadingADC(void *pvParameters) {
80002c90:	d4 31       	pushm	r0-r7,lr
	// Assign the on-board sensors to their ADC channel.
	unsigned short adc_channel_pot = ADC_POTENTIOMETER_CHANNEL;
	unsigned short adc_channel_temp = ADC_TEMPERATURE_CHANNEL;

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADC_GPIO_MAP, 1);
80002c92:	30 1b       	mov	r11,1
80002c94:	4b 3c       	lddpc	r12,80002d60 <vReadingADC+0xd0>
80002c96:	f0 1f 00 34 	mcall	80002d64 <vReadingADC+0xd4>

	// configure ADC
	// Lower the ADC clock to match the ADC characteristics (because we configured
	// the CPU clock to 12MHz, and the ADC clock characteristics are usually lower;
	// cf. the ADC Characteristic section in the datasheet).
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002c9a:	fe 77 3c 00 	mov	r7,-50176
80002c9e:	6e 18       	ld.w	r8,r7[0x4]
80002ca0:	a9 a8       	sbr	r8,0x8
80002ca2:	8f 18       	st.w	r7[0x4],r8
	adc_configure(adc);
80002ca4:	0e 9c       	mov	r12,r7
80002ca6:	f0 1f 00 31 	mcall	80002d68 <vReadingADC+0xd8>

	// Enable the ADC channels.
	adc_enable(adc, adc_channel_pot);
80002caa:	30 1b       	mov	r11,1
80002cac:	0e 9c       	mov	r12,r7
80002cae:	f0 1f 00 30 	mcall	80002d6c <vReadingADC+0xdc>
	adc_enable(adc, adc_channel_temp);
80002cb2:	30 0b       	mov	r11,0
80002cb4:	0e 9c       	mov	r12,r7
80002cb6:	f0 1f 00 2e 	mcall	80002d6c <vReadingADC+0xdc>

	while (1) {

		// Trigger the conversion
		adc_start(adc);
80002cba:	0e 95       	mov	r5,r7

		// get value for the potentiometer adc channel
		adc_value_pot = adc_get_value(adc, adc_channel_pot);
80002cbc:	30 11       	mov	r1,1
		adc_value_temp = adc_get_value(adc, adc_channel_temp);
80002cbe:	30 06       	mov	r6,0

		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002cc0:	4a c3       	lddpc	r3,80002d70 <vReadingADC+0xe0>
80002cc2:	3f f2       	mov	r2,-1

		TEMPERATURE_DESIRED = (int) (((double)adc_value_pot / 1023) * (25)) + 5;
80002cc4:	4a c0       	lddpc	r0,80002d74 <vReadingADC+0xe4>
	adc_enable(adc, adc_channel_temp);

	while (1) {

		// Trigger the conversion
		adc_start(adc);
80002cc6:	0a 9c       	mov	r12,r5
80002cc8:	f0 1f 00 2c 	mcall	80002d78 <vReadingADC+0xe8>

		// get value for the potentiometer adc channel
		adc_value_pot = adc_get_value(adc, adc_channel_pot);
80002ccc:	02 9b       	mov	r11,r1
80002cce:	0a 9c       	mov	r12,r5
80002cd0:	f0 1f 00 2b 	mcall	80002d7c <vReadingADC+0xec>
80002cd4:	18 94       	mov	r4,r12
		adc_value_temp = adc_get_value(adc, adc_channel_temp);
80002cd6:	0c 9b       	mov	r11,r6
80002cd8:	0a 9c       	mov	r12,r5
80002cda:	f0 1f 00 29 	mcall	80002d7c <vReadingADC+0xec>
80002cde:	18 97       	mov	r7,r12

		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002ce0:	0c 99       	mov	r9,r6
80002ce2:	04 9a       	mov	r10,r2
80002ce4:	0c 9b       	mov	r11,r6
80002ce6:	66 0c       	ld.w	r12,r3[0x0]
80002ce8:	f0 1f 00 26 	mcall	80002d80 <vReadingADC+0xf0>

		TEMPERATURE_DESIRED = (int) (((double)adc_value_pot / 1023) * (25)) + 5;
80002cec:	08 9c       	mov	r12,r4
80002cee:	f0 1f 00 26 	mcall	80002d84 <vReadingADC+0xf4>
80002cf2:	30 08       	mov	r8,0
80002cf4:	e0 69 f8 00 	mov	r9,63488
80002cf8:	ea 19 40 8f 	orh	r9,0x408f
80002cfc:	f0 1f 00 23 	mcall	80002d88 <vReadingADC+0xf8>
80002d00:	30 08       	mov	r8,0
80002d02:	fc 19 40 39 	movh	r9,0x4039
80002d06:	f0 1f 00 22 	mcall	80002d8c <vReadingADC+0xfc>
80002d0a:	f0 1f 00 22 	mcall	80002d90 <vReadingADC+0x100>
80002d0e:	2f bc       	sub	r12,-5
80002d10:	81 0c       	st.w	r0[0x0],r12
		//TEMPERATURE_DESIRED = adc_value_pot;

		xSemaphoreGive(TEMPERATURE_DESIRED_SEMAPHORE);
80002d12:	0c 99       	mov	r9,r6
80002d14:	0c 9a       	mov	r10,r6
80002d16:	0c 9b       	mov	r11,r6
80002d18:	66 0c       	ld.w	r12,r3[0x0]
80002d1a:	f0 1f 00 1f 	mcall	80002d94 <vReadingADC+0x104>

		i = 0;
		if (adc_value_temp > temperature_code[0]) {
80002d1e:	e0 47 03 b4 	cp.w	r7,948
80002d22:	e0 88 00 04 	brls	80002d2a <vReadingADC+0x9a>
80002d26:	3e c4       	mov	r4,-20
80002d28:	c0 88       	rjmp	80002d38 <vReadingADC+0xa8>
80002d2a:	49 c8       	lddpc	r8,80002d98 <vReadingADC+0x108>
80002d2c:	0c 94       	mov	r4,r6
			theTemp = -20;
			} else {
			while (temperature_code[i++] > adc_value_temp)
80002d2e:	11 29       	ld.uh	r9,r8++
80002d30:	2f f4       	sub	r4,-1
80002d32:	12 37       	cp.w	r7,r9
80002d34:	cf d3       	brcs	80002d2e <vReadingADC+0x9e>
			;
			theTemp = (i - 1 - 20);
80002d36:	21 54       	sub	r4,21
		}

		xSemaphoreTake(TEMPERATURE_ROOM_SEMAPHORE, portMAX_DELAY);
80002d38:	49 97       	lddpc	r7,80002d9c <vReadingADC+0x10c>
80002d3a:	0c 99       	mov	r9,r6
80002d3c:	04 9a       	mov	r10,r2
80002d3e:	0c 9b       	mov	r11,r6
80002d40:	6e 0c       	ld.w	r12,r7[0x0]
80002d42:	f0 1f 00 10 	mcall	80002d80 <vReadingADC+0xf0>

		TEMPERATURE_ROOM = theTemp;
80002d46:	49 78       	lddpc	r8,80002da0 <vReadingADC+0x110>
80002d48:	91 04       	st.w	r8[0x0],r4

		xSemaphoreGive(TEMPERATURE_ROOM_SEMAPHORE);
80002d4a:	0c 99       	mov	r9,r6
80002d4c:	0c 9a       	mov	r10,r6
80002d4e:	0c 9b       	mov	r11,r6
80002d50:	6e 0c       	ld.w	r12,r7[0x0]
80002d52:	f0 1f 00 11 	mcall	80002d94 <vReadingADC+0x104>

		vTaskDelay(250);
80002d56:	e0 6c 00 fa 	mov	r12,250
80002d5a:	f0 1f 00 13 	mcall	80002da4 <vReadingADC+0x114>
	}
80002d5e:	cb 4b       	rjmp	80002cc6 <vReadingADC+0x36>
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	a2 44       	st.h	r1[0x8],r4
80002d64:	80 00       	ld.sh	r0,r0[0x0]
80002d66:	28 54       	sub	r4,-123
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	24 d0       	sub	r0,77
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	24 e8       	sub	r8,78
80002d70:	00 00       	add	r0,r0
80002d72:	06 48       	or	r8,r3
80002d74:	00 00       	add	r0,r0
80002d76:	06 50       	eor	r0,r3
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	24 e2       	sub	r2,78
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	25 04       	sub	r4,80
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	36 00       	mov	r0,96
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	46 26       	lddsp	r6,sp[0x188]
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	47 78       	lddsp	r8,sp[0x1dc]
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	41 78       	lddsp	r8,sp[0x5c]
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	46 00       	lddsp	r0,sp[0x180]
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	37 bc       	mov	r12,123
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	a1 54       	asr	r4,0x1
80002d9c:	00 00       	add	r0,r0
80002d9e:	06 5c       	eor	r12,r3
80002da0:	00 00       	add	r0,r0
80002da2:	06 4c       	or	r12,r3
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	3e 24       	mov	r4,-30

80002da8 <vCalculatePower>:
}

static void vCalculatePower(void *pvParameters) {
80002da8:	d4 31       	pushm	r0-r7,lr
	int tempValue = 0;

	while (1) {

		// Get the data
		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002daa:	4a 83       	lddpc	r3,80002e48 <vCalculatePower+0xa0>
80002dac:	30 07       	mov	r7,0
80002dae:	3f f5       	mov	r5,-1
		tempDesired = TEMPERATURE_DESIRED;
80002db0:	4a 71       	lddpc	r1,80002e4c <vCalculatePower+0xa4>
		xSemaphoreGive(TEMPERATURE_DESIRED_SEMAPHORE);

		xSemaphoreTake(TEMPERATURE_ROOM_SEMAPHORE, portMAX_DELAY);
80002db2:	4a 82       	lddpc	r2,80002e50 <vCalculatePower+0xa8>
		tempRoom = TEMPERATURE_ROOM;
80002db4:	4a 80       	lddpc	r0,80002e54 <vCalculatePower+0xac>
	int tempValue = 0;

	while (1) {

		// Get the data
		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002db6:	0e 99       	mov	r9,r7
80002db8:	0a 9a       	mov	r10,r5
80002dba:	0e 9b       	mov	r11,r7
80002dbc:	66 0c       	ld.w	r12,r3[0x0]
80002dbe:	f0 1f 00 27 	mcall	80002e58 <vCalculatePower+0xb0>
		tempDesired = TEMPERATURE_DESIRED;
80002dc2:	62 04       	ld.w	r4,r1[0x0]
		xSemaphoreGive(TEMPERATURE_DESIRED_SEMAPHORE);
80002dc4:	0e 99       	mov	r9,r7
80002dc6:	0e 9a       	mov	r10,r7
80002dc8:	0e 9b       	mov	r11,r7
80002dca:	66 0c       	ld.w	r12,r3[0x0]
80002dcc:	f0 1f 00 24 	mcall	80002e5c <vCalculatePower+0xb4>

		xSemaphoreTake(TEMPERATURE_ROOM_SEMAPHORE, portMAX_DELAY);
80002dd0:	0e 99       	mov	r9,r7
80002dd2:	0a 9a       	mov	r10,r5
80002dd4:	0e 9b       	mov	r11,r7
80002dd6:	64 0c       	ld.w	r12,r2[0x0]
80002dd8:	f0 1f 00 20 	mcall	80002e58 <vCalculatePower+0xb0>
		tempRoom = TEMPERATURE_ROOM;
80002ddc:	60 06       	ld.w	r6,r0[0x0]
		xSemaphoreGive(TEMPERATURE_ROOM_SEMAPHORE);
80002dde:	0e 99       	mov	r9,r7
80002de0:	0e 9a       	mov	r10,r7
80002de2:	0e 9b       	mov	r11,r7
80002de4:	64 0c       	ld.w	r12,r2[0x0]
80002de6:	f0 1f 00 1e 	mcall	80002e5c <vCalculatePower+0xb4>

		// calculate the power base on the room temperature and the desired temperature.
		if (tempDesired <= tempRoom)
80002dea:	0c 34       	cp.w	r4,r6
80002dec:	e0 89 00 04 	brgt	80002df4 <vCalculatePower+0x4c>
80002df0:	0e 94       	mov	r4,r7
80002df2:	c1 78       	rjmp	80002e20 <vCalculatePower+0x78>
			power = 0;
		}
		else
		{
			//tempDesired > tempRoom
			tempValue= tempDesired - tempRoom;
80002df4:	e8 06 01 0c 	sub	r12,r4,r6
			if (tempValue > 6)
80002df8:	58 6c       	cp.w	r12,6
80002dfa:	e0 8a 00 04 	brle	80002e02 <vCalculatePower+0x5a>
80002dfe:	36 44       	mov	r4,100
80002e00:	c1 08       	rjmp	80002e20 <vCalculatePower+0x78>
			{
				power = 100;
			}
			else
			{
				power = (int)(((double)tempValue / 6) * 100);
80002e02:	f0 1f 00 18 	mcall	80002e60 <vCalculatePower+0xb8>
80002e06:	30 08       	mov	r8,0
80002e08:	fc 19 40 18 	movh	r9,0x4018
80002e0c:	f0 1f 00 16 	mcall	80002e64 <vCalculatePower+0xbc>
80002e10:	30 08       	mov	r8,0
80002e12:	fc 19 40 59 	movh	r9,0x4059
80002e16:	f0 1f 00 15 	mcall	80002e68 <vCalculatePower+0xc0>
80002e1a:	f0 1f 00 15 	mcall	80002e6c <vCalculatePower+0xc4>
80002e1e:	18 94       	mov	r4,r12
			}
		}

		xSemaphoreTake(POWER_SEMAPHORE, portMAX_DELAY);
80002e20:	49 46       	lddpc	r6,80002e70 <vCalculatePower+0xc8>
80002e22:	0e 99       	mov	r9,r7
80002e24:	0a 9a       	mov	r10,r5
80002e26:	0e 9b       	mov	r11,r7
80002e28:	6c 0c       	ld.w	r12,r6[0x0]
80002e2a:	f0 1f 00 0c 	mcall	80002e58 <vCalculatePower+0xb0>

		POWER = power;
80002e2e:	49 28       	lddpc	r8,80002e74 <vCalculatePower+0xcc>
80002e30:	91 04       	st.w	r8[0x0],r4

		xSemaphoreGive(POWER_SEMAPHORE);
80002e32:	0e 99       	mov	r9,r7
80002e34:	0e 9a       	mov	r10,r7
80002e36:	0e 9b       	mov	r11,r7
80002e38:	6c 0c       	ld.w	r12,r6[0x0]
80002e3a:	f0 1f 00 09 	mcall	80002e5c <vCalculatePower+0xb4>

		vTaskDelay(1000);
80002e3e:	e0 6c 03 e8 	mov	r12,1000
80002e42:	f0 1f 00 0e 	mcall	80002e78 <vCalculatePower+0xd0>
	}
80002e46:	cb 8b       	rjmp	80002db6 <vCalculatePower+0xe>
80002e48:	00 00       	add	r0,r0
80002e4a:	06 48       	or	r8,r3
80002e4c:	00 00       	add	r0,r0
80002e4e:	06 50       	eor	r0,r3
80002e50:	00 00       	add	r0,r0
80002e52:	06 5c       	eor	r12,r3
80002e54:	00 00       	add	r0,r0
80002e56:	06 4c       	or	r12,r3
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	36 00       	mov	r0,96
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	37 bc       	mov	r12,123
80002e60:	80 00       	ld.sh	r0,r0[0x0]
80002e62:	46 2e       	lddsp	lr,sp[0x188]
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	47 78       	lddsp	r8,sp[0x1dc]
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	41 78       	lddsp	r8,sp[0x5c]
80002e6c:	80 00       	ld.sh	r0,r0[0x0]
80002e6e:	46 00       	lddsp	r0,sp[0x180]
80002e70:	00 00       	add	r0,r0
80002e72:	06 58       	eor	r8,r3
80002e74:	00 00       	add	r0,r0
80002e76:	06 54       	eor	r4,r3
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	3e 24       	mov	r4,-30

80002e7c <vOutputLCD>:
}

static void vOutputLCD(void *pvParameters) {
80002e7c:	d4 31       	pushm	r0-r7,lr
80002e7e:	20 6d       	sub	sp,24
	bool increase = true;
	bool updateLights = true;
	int power = 0;
	unsigned char targetLeds = 0;

	dip204_set_cursor_position(1, 1);
80002e80:	30 1b       	mov	r11,1
80002e82:	16 9c       	mov	r12,r11
80002e84:	f0 1f 00 a1 	mcall	80003108 <vOutputLCD+0x28c>

	dip204_write_string(tempDesiredTitle);
80002e88:	fe fc 02 84 	ld.w	r12,pc[644]
80002e8c:	f0 1f 00 a1 	mcall	80003110 <vOutputLCD+0x294>

	dip204_set_cursor_position(1, 2);
80002e90:	30 2b       	mov	r11,2
80002e92:	30 1c       	mov	r12,1
80002e94:	f0 1f 00 9d 	mcall	80003108 <vOutputLCD+0x28c>

	dip204_write_string(tempTitle);
80002e98:	fe fc 02 7c 	ld.w	r12,pc[636]
80002e9c:	f0 1f 00 9d 	mcall	80003110 <vOutputLCD+0x294>

	dip204_set_cursor_position(1, 3);
80002ea0:	30 3b       	mov	r11,3
80002ea2:	30 1c       	mov	r12,1
80002ea4:	f0 1f 00 99 	mcall	80003108 <vOutputLCD+0x28c>

	dip204_write_string(puissanceTitle);
80002ea8:	fe fc 02 70 	ld.w	r12,pc[624]
80002eac:	f0 1f 00 99 	mcall	80003110 <vOutputLCD+0x294>

	dip204_hide_cursor();
80002eb0:	f0 1f 00 9b 	mcall	8000311c <vOutputLCD+0x2a0>
80002eb4:	30 04       	mov	r4,0
80002eb6:	30 19       	mov	r9,1
80002eb8:	50 09       	stdsp	sp[0x0],r9
80002eba:	50 19       	stdsp	sp[0x4],r9

	int leds = 0;
	while (1) {

		// write throttle
		dip204_set_cursor_position(15, 1);
80002ebc:	12 90       	mov	r0,r9
		dip204_write_string("    ");
80002ebe:	fe f2 02 62 	ld.w	r2,pc[610]
		dip204_set_cursor_position(15, 1);

		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002ec2:	08 96       	mov	r6,r4
80002ec4:	3f f1       	mov	r1,-1
			}
		}

		if (updateLights) {
			if (increase) {
				leds++;
80002ec6:	50 39       	stdsp	sp[0xc],r9
				gpio_clr_gpio_pin(LED6_GPIO); // open
				break;
			}
		}

		if (leds == targetLeds) {
80002ec8:	50 24       	stdsp	sp[0x8],r4

	int leds = 0;
	while (1) {

		// write throttle
		dip204_set_cursor_position(15, 1);
80002eca:	00 9b       	mov	r11,r0
80002ecc:	30 fc       	mov	r12,15
80002ece:	f0 1f 00 8f 	mcall	80003108 <vOutputLCD+0x28c>
		dip204_write_string("    ");
80002ed2:	04 9c       	mov	r12,r2
80002ed4:	f0 1f 00 8f 	mcall	80003110 <vOutputLCD+0x294>
		dip204_set_cursor_position(15, 1);
80002ed8:	00 9b       	mov	r11,r0
80002eda:	30 fc       	mov	r12,15
80002edc:	f0 1f 00 8b 	mcall	80003108 <vOutputLCD+0x28c>

		xSemaphoreTake(TEMPERATURE_DESIRED_SEMAPHORE, portMAX_DELAY);
80002ee0:	0c 99       	mov	r9,r6
80002ee2:	02 9a       	mov	r10,r1
80002ee4:	0c 9b       	mov	r11,r6
80002ee6:	fe f8 02 3e 	ld.w	r8,pc[574]
80002eea:	70 0c       	ld.w	r12,r8[0x0]
80002eec:	f0 1f 00 8f 	mcall	80003128 <vOutputLCD+0x2ac>
		sprintf(str, "%d C", TEMPERATURE_DESIRED);
80002ef0:	fe f9 02 3c 	ld.w	r9,pc[572]
80002ef4:	72 08       	ld.w	r8,r9[0x0]
80002ef6:	fe f5 02 3a 	ld.w	r5,pc[570]
80002efa:	fa c7 ff f0 	sub	r7,sp,-16
80002efe:	1a d8       	st.w	--sp,r8
80002f00:	0a 9b       	mov	r11,r5
80002f02:	0e 9c       	mov	r12,r7
80002f04:	f0 1f 00 8c 	mcall	80003134 <vOutputLCD+0x2b8>
		xSemaphoreGive(TEMPERATURE_DESIRED_SEMAPHORE);
80002f08:	0c 99       	mov	r9,r6
80002f0a:	0c 9a       	mov	r10,r6
80002f0c:	0c 9b       	mov	r11,r6
80002f0e:	fe f8 02 16 	ld.w	r8,pc[534]
80002f12:	70 0c       	ld.w	r12,r8[0x0]
80002f14:	f0 1f 00 89 	mcall	80003138 <vOutputLCD+0x2bc>

		dip204_write_string(str);
80002f18:	0e 9c       	mov	r12,r7
80002f1a:	f0 1f 00 7e 	mcall	80003110 <vOutputLCD+0x294>

		// write the temp
		dip204_set_cursor_position(13, 2);
80002f1e:	30 2b       	mov	r11,2
80002f20:	30 dc       	mov	r12,13
80002f22:	f0 1f 00 7a 	mcall	80003108 <vOutputLCD+0x28c>
		dip204_write_string("    ");
80002f26:	04 9c       	mov	r12,r2
80002f28:	f0 1f 00 7a 	mcall	80003110 <vOutputLCD+0x294>
		dip204_set_cursor_position(13, 2);
80002f2c:	30 2b       	mov	r11,2
80002f2e:	30 dc       	mov	r12,13
80002f30:	f0 1f 00 76 	mcall	80003108 <vOutputLCD+0x28c>

		xSemaphoreTake(TEMPERATURE_ROOM_SEMAPHORE, portMAX_DELAY);
80002f34:	fe f3 02 08 	ld.w	r3,pc[520]
80002f38:	0c 99       	mov	r9,r6
80002f3a:	02 9a       	mov	r10,r1
80002f3c:	0c 9b       	mov	r11,r6
80002f3e:	66 0c       	ld.w	r12,r3[0x0]
80002f40:	f0 1f 00 7a 	mcall	80003128 <vOutputLCD+0x2ac>
		sprintf(str, "%d C", TEMPERATURE_ROOM);
80002f44:	4f f8       	lddpc	r8,80003140 <vOutputLCD+0x2c4>
80002f46:	70 08       	ld.w	r8,r8[0x0]
80002f48:	1a d8       	st.w	--sp,r8
80002f4a:	0a 9b       	mov	r11,r5
80002f4c:	0e 9c       	mov	r12,r7
80002f4e:	f0 1f 00 7a 	mcall	80003134 <vOutputLCD+0x2b8>
		xSemaphoreGive(TEMPERATURE_ROOM_SEMAPHORE);
80002f52:	0c 99       	mov	r9,r6
80002f54:	0c 9a       	mov	r10,r6
80002f56:	0c 9b       	mov	r11,r6
80002f58:	66 0c       	ld.w	r12,r3[0x0]
80002f5a:	f0 1f 00 78 	mcall	80003138 <vOutputLCD+0x2bc>

		dip204_write_string(str);
80002f5e:	0e 9c       	mov	r12,r7
80002f60:	f0 1f 00 6c 	mcall	80003110 <vOutputLCD+0x294>

		// write the TANK_LEVEL
		dip204_set_cursor_position(8, 3);
80002f64:	30 3b       	mov	r11,3
80002f66:	30 8c       	mov	r12,8
80002f68:	f0 1f 00 68 	mcall	80003108 <vOutputLCD+0x28c>
		dip204_write_string("    ");
80002f6c:	04 9c       	mov	r12,r2
80002f6e:	f0 1f 00 69 	mcall	80003110 <vOutputLCD+0x294>
		dip204_set_cursor_position(8, 3);
80002f72:	30 3b       	mov	r11,3
80002f74:	30 8c       	mov	r12,8
80002f76:	f0 1f 00 65 	mcall	80003108 <vOutputLCD+0x28c>

		xSemaphoreTake(POWER_SEMAPHORE, portMAX_DELAY);
80002f7a:	4f 33       	lddpc	r3,80003144 <vOutputLCD+0x2c8>
80002f7c:	0c 99       	mov	r9,r6
80002f7e:	02 9a       	mov	r10,r1
80002f80:	0c 9b       	mov	r11,r6
80002f82:	66 0c       	ld.w	r12,r3[0x0]
80002f84:	f0 1f 00 69 	mcall	80003128 <vOutputLCD+0x2ac>
		power = POWER;
80002f88:	4f 08       	lddpc	r8,80003148 <vOutputLCD+0x2cc>
80002f8a:	70 05       	ld.w	r5,r8[0x0]
		xSemaphoreGive(POWER_SEMAPHORE);
80002f8c:	0c 99       	mov	r9,r6
80002f8e:	0c 9a       	mov	r10,r6
80002f90:	0c 9b       	mov	r11,r6
80002f92:	66 0c       	ld.w	r12,r3[0x0]
80002f94:	f0 1f 00 69 	mcall	80003138 <vOutputLCD+0x2bc>
		sprintf(str, "%d%%", power);
80002f98:	1a d5       	st.w	--sp,r5
80002f9a:	4e db       	lddpc	r11,8000314c <vOutputLCD+0x2d0>
80002f9c:	0e 9c       	mov	r12,r7
80002f9e:	f0 1f 00 66 	mcall	80003134 <vOutputLCD+0x2b8>

		dip204_write_string(str);
80002fa2:	0e 9c       	mov	r12,r7
80002fa4:	f0 1f 00 5b 	mcall	80003110 <vOutputLCD+0x294>

		targetLeds = power / 16;

		if (updateLights) {
80002fa8:	2f dd       	sub	sp,-12
80002faa:	40 09       	lddsp	r9,sp[0x0]
80002fac:	58 09       	cp.w	r9,0
80002fae:	e0 80 00 8c 	breq	800030c6 <vOutputLCD+0x24a>

			switch (leds) {
80002fb2:	58 64       	cp.w	r4,6
80002fb4:	e0 8b 00 89 	brhi	800030c6 <vOutputLCD+0x24a>
80002fb8:	4e 68       	lddpc	r8,80003150 <vOutputLCD+0x2d4>
80002fba:	f0 04 03 2f 	ld.w	pc,r8[r4<<0x2]
				case 0:
				gpio_set_gpio_pin(LED0_GPIO); // close
80002fbe:	33 bc       	mov	r12,59
80002fc0:	f0 1f 00 65 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED1_GPIO); // close
80002fc4:	33 cc       	mov	r12,60
80002fc6:	f0 1f 00 64 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED2_GPIO); // close
80002fca:	33 dc       	mov	r12,61
80002fcc:	f0 1f 00 62 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED3_GPIO); // close
80002fd0:	33 ec       	mov	r12,62
80002fd2:	f0 1f 00 61 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED4_GPIO); // close
80002fd6:	33 3c       	mov	r12,51
80002fd8:	f0 1f 00 5f 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED6_GPIO); // close
80002fdc:	33 5c       	mov	r12,53
80002fde:	f0 1f 00 5e 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
80002fe2:	c7 28       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 1:
				gpio_clr_gpio_pin(LED0_GPIO); // open
80002fe4:	33 bc       	mov	r12,59
80002fe6:	f0 1f 00 5d 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_set_gpio_pin(LED1_GPIO); // close
80002fea:	33 cc       	mov	r12,60
80002fec:	f0 1f 00 5a 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED2_GPIO); // close
80002ff0:	33 dc       	mov	r12,61
80002ff2:	f0 1f 00 59 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED3_GPIO); // close
80002ff6:	33 ec       	mov	r12,62
80002ff8:	f0 1f 00 57 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED4_GPIO); // close
80002ffc:	33 3c       	mov	r12,51
80002ffe:	f0 1f 00 56 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED6_GPIO); // close
80003002:	33 5c       	mov	r12,53
80003004:	f0 1f 00 54 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
80003008:	c5 f8       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 2:
				gpio_clr_gpio_pin(LED0_GPIO); // open
8000300a:	33 bc       	mov	r12,59
8000300c:	f0 1f 00 53 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED1_GPIO); // open
80003010:	33 cc       	mov	r12,60
80003012:	f0 1f 00 52 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_set_gpio_pin(LED2_GPIO); // close
80003016:	33 dc       	mov	r12,61
80003018:	f0 1f 00 4f 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED3_GPIO); // close
8000301c:	33 ec       	mov	r12,62
8000301e:	f0 1f 00 4e 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED4_GPIO); // close
80003022:	33 3c       	mov	r12,51
80003024:	f0 1f 00 4c 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED6_GPIO); // close
80003028:	33 5c       	mov	r12,53
8000302a:	f0 1f 00 4b 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
8000302e:	c4 c8       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 3:
				gpio_clr_gpio_pin(LED0_GPIO); // open
80003030:	33 bc       	mov	r12,59
80003032:	f0 1f 00 4a 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED1_GPIO); // open
80003036:	33 cc       	mov	r12,60
80003038:	f0 1f 00 48 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED2_GPIO); // open
8000303c:	33 dc       	mov	r12,61
8000303e:	f0 1f 00 47 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_set_gpio_pin(LED3_GPIO); // close
80003042:	33 ec       	mov	r12,62
80003044:	f0 1f 00 44 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED4_GPIO); // close
80003048:	33 3c       	mov	r12,51
8000304a:	f0 1f 00 43 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED6_GPIO); // close
8000304e:	33 5c       	mov	r12,53
80003050:	f0 1f 00 41 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
80003054:	c3 98       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 4:
				gpio_clr_gpio_pin(LED0_GPIO); // open
80003056:	33 bc       	mov	r12,59
80003058:	f0 1f 00 40 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED1_GPIO); // open
8000305c:	33 cc       	mov	r12,60
8000305e:	f0 1f 00 3f 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED2_GPIO); // open
80003062:	33 dc       	mov	r12,61
80003064:	f0 1f 00 3d 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED3_GPIO); // open
80003068:	33 ec       	mov	r12,62
8000306a:	f0 1f 00 3c 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_set_gpio_pin(LED4_GPIO); // close
8000306e:	33 3c       	mov	r12,51
80003070:	f0 1f 00 39 	mcall	80003154 <vOutputLCD+0x2d8>
				gpio_set_gpio_pin(LED6_GPIO); // close
80003074:	33 5c       	mov	r12,53
80003076:	f0 1f 00 38 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
8000307a:	c2 68       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 5:
				gpio_clr_gpio_pin(LED0_GPIO); // open
8000307c:	33 bc       	mov	r12,59
8000307e:	f0 1f 00 37 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED1_GPIO); // open
80003082:	33 cc       	mov	r12,60
80003084:	f0 1f 00 35 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED2_GPIO); // open
80003088:	33 dc       	mov	r12,61
8000308a:	f0 1f 00 34 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED3_GPIO); // open
8000308e:	33 ec       	mov	r12,62
80003090:	f0 1f 00 32 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED4_GPIO); // open
80003094:	33 3c       	mov	r12,51
80003096:	f0 1f 00 31 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_set_gpio_pin(LED6_GPIO); // close
8000309a:	33 5c       	mov	r12,53
8000309c:	f0 1f 00 2e 	mcall	80003154 <vOutputLCD+0x2d8>
				break;
800030a0:	c1 38       	rjmp	800030c6 <vOutputLCD+0x24a>
				case 6:
				gpio_clr_gpio_pin(LED0_GPIO); // open
800030a2:	33 bc       	mov	r12,59
800030a4:	f0 1f 00 2d 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED1_GPIO); // open
800030a8:	33 cc       	mov	r12,60
800030aa:	f0 1f 00 2c 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED2_GPIO); // open
800030ae:	33 dc       	mov	r12,61
800030b0:	f0 1f 00 2a 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED3_GPIO); // open
800030b4:	33 ec       	mov	r12,62
800030b6:	f0 1f 00 29 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED4_GPIO); // open
800030ba:	33 3c       	mov	r12,51
800030bc:	f0 1f 00 27 	mcall	80003158 <vOutputLCD+0x2dc>
				gpio_clr_gpio_pin(LED6_GPIO); // open
800030c0:	33 5c       	mov	r12,53
800030c2:	f0 1f 00 26 	mcall	80003158 <vOutputLCD+0x2dc>
				break;
			}
		}

		if (leds == targetLeds) {
800030c6:	58 05       	cp.w	r5,0
800030c8:	f7 b5 05 f1 	sublt	r5,-15
800030cc:	eb d5 c0 88 	bfextu	r5,r5,0x4,0x8
800030d0:	08 35       	cp.w	r5,r4
800030d2:	c0 51       	brne	800030dc <vOutputLCD+0x260>
800030d4:	50 06       	stdsp	sp[0x0],r6
800030d6:	40 28       	lddsp	r8,sp[0x8]
800030d8:	50 18       	stdsp	sp[0x4],r8
800030da:	c0 d8       	rjmp	800030f4 <vOutputLCD+0x278>
			increase = false;
			updateLights = false;
			} else {
			updateLights = true;
			if (leds > targetLeds) {
800030dc:	0a 34       	cp.w	r4,r5
800030de:	e0 89 00 08 	brgt	800030ee <vOutputLCD+0x272>
				increase = false;
				} else if (leds < targetLeds) {
800030e2:	c0 e4       	brge	800030fe <vOutputLCD+0x282>
			}
		}

		if (updateLights) {
			if (increase) {
				leds++;
800030e4:	2f f4       	sub	r4,-1
800030e6:	50 00       	stdsp	sp[0x0],r0
800030e8:	40 39       	lddsp	r9,sp[0xc]
800030ea:	50 19       	stdsp	sp[0x4],r9
800030ec:	c0 48       	rjmp	800030f4 <vOutputLCD+0x278>
				} else {
				leds--;
800030ee:	20 14       	sub	r4,1
800030f0:	50 00       	stdsp	sp[0x0],r0
800030f2:	50 16       	stdsp	sp[0x4],r6
			}
		}

		vTaskDelay(100);
800030f4:	36 4c       	mov	r12,100
800030f6:	f0 1f 00 1a 	mcall	8000315c <vOutputLCD+0x2e0>
	}
800030fa:	fe 9f fe e8 	bral	80002eca <vOutputLCD+0x4e>
				increase = true;
			}
		}

		if (updateLights) {
			if (increase) {
800030fe:	40 18       	lddsp	r8,sp[0x4]
80003100:	58 08       	cp.w	r8,0
80003102:	cf 11       	brne	800030e4 <vOutputLCD+0x268>
80003104:	cf 5b       	rjmp	800030ee <vOutputLCD+0x272>
80003106:	00 00       	add	r0,r0
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	22 24       	sub	r4,34
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	a2 9c       	st.b	r1[0x1],r12
80003110:	80 00       	ld.sh	r0,r0[0x0]
80003112:	21 cc       	sub	r12,28
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	a2 ac       	st.b	r1[0x2],r12
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	a2 bc       	st.b	r1[0x3],r12
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	22 80       	sub	r0,40
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	a2 c8       	st.b	r1[0x4],r8
80003124:	00 00       	add	r0,r0
80003126:	06 48       	or	r8,r3
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	36 00       	mov	r0,96
8000312c:	00 00       	add	r0,r0
8000312e:	06 50       	eor	r0,r3
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	a2 d0       	st.b	r1[0x5],r0
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	53 50       	stdsp	sp[0xd4],r0
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	37 bc       	mov	r12,123
8000313c:	00 00       	add	r0,r0
8000313e:	06 5c       	eor	r12,r3
80003140:	00 00       	add	r0,r0
80003142:	06 4c       	or	r12,r3
80003144:	00 00       	add	r0,r0
80003146:	06 58       	eor	r8,r3
80003148:	00 00       	add	r0,r0
8000314a:	06 54       	eor	r4,r3
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	a2 d8       	st.b	r1[0x5],r8
80003150:	80 00       	ld.sh	r0,r0[0x0]
80003152:	a1 38       	mul	r8,r0
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	28 84       	sub	r4,-120
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	28 a0       	sub	r0,-118
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	3e 24       	mov	r4,-30

80003160 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80003160:	f8 c8 ff f8 	sub	r8,r12,-8
80003164:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80003166:	3f f9       	mov	r9,-1
80003168:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000316a:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
8000316c:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
8000316e:	30 08       	mov	r8,0
80003170:	99 08       	st.w	r12[0x0],r8
}
80003172:	5e fc       	retal	r12

80003174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80003174:	30 08       	mov	r8,0
80003176:	99 48       	st.w	r12[0x10],r8
}
80003178:	5e fc       	retal	r12

8000317a <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000317a:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
8000317c:	70 19       	ld.w	r9,r8[0x4]
8000317e:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80003180:	78 19       	ld.w	r9,r12[0x4]
80003182:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80003184:	70 19       	ld.w	r9,r8[0x4]
80003186:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80003188:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000318a:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000318c:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000318e:	78 08       	ld.w	r8,r12[0x0]
80003190:	2f f8       	sub	r8,-1
80003192:	99 08       	st.w	r12[0x0],r8
}
80003194:	5e fc       	retal	r12

80003196 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
80003196:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80003198:	5b fa       	cp.w	r10,-1
8000319a:	c0 31       	brne	800031a0 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
8000319c:	78 48       	ld.w	r8,r12[0x10]
8000319e:	c0 c8       	rjmp	800031b6 <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
800031a0:	f8 c8 ff f8 	sub	r8,r12,-8
800031a4:	70 19       	ld.w	r9,r8[0x4]
800031a6:	72 09       	ld.w	r9,r9[0x0]
800031a8:	12 3a       	cp.w	r10,r9
800031aa:	c0 63       	brcs	800031b6 <vListInsert+0x20>
800031ac:	70 18       	ld.w	r8,r8[0x4]
800031ae:	70 19       	ld.w	r9,r8[0x4]
800031b0:	72 09       	ld.w	r9,r9[0x0]
800031b2:	12 3a       	cp.w	r10,r9
800031b4:	cf c2       	brcc	800031ac <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
800031b6:	70 19       	ld.w	r9,r8[0x4]
800031b8:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
800031ba:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
800031bc:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
800031be:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
800031c0:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
800031c2:	78 08       	ld.w	r8,r12[0x0]
800031c4:	2f f8       	sub	r8,-1
800031c6:	99 08       	st.w	r12[0x0],r8
}
800031c8:	5e fc       	retal	r12

800031ca <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
800031ca:	78 18       	ld.w	r8,r12[0x4]
800031cc:	78 29       	ld.w	r9,r12[0x8]
800031ce:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
800031d0:	78 28       	ld.w	r8,r12[0x8]
800031d2:	78 19       	ld.w	r9,r12[0x4]
800031d4:	91 19       	st.w	r8[0x4],r9

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
800031d6:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
800031d8:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
800031da:	18 39       	cp.w	r9,r12
800031dc:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
800031e0:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
800031e4:	30 09       	mov	r9,0
800031e6:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
800031e8:	70 09       	ld.w	r9,r8[0x0]
800031ea:	20 19       	sub	r9,1
800031ec:	91 09       	st.w	r8[0x0],r9
}
800031ee:	5e fc       	retal	r12

800031f0 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
800031f0:	e0 68 08 08 	mov	r8,2056
800031f4:	ea 18 08 08 	orh	r8,0x808
800031f8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
800031fa:	e0 68 09 09 	mov	r8,2313
800031fe:	ea 18 09 09 	orh	r8,0x909
80003202:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
80003204:	e0 68 0a 0a 	mov	r8,2570
80003208:	ea 18 0a 0a 	orh	r8,0xa0a
8000320c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
8000320e:	e0 68 0b 0b 	mov	r8,2827
80003212:	ea 18 0b 0b 	orh	r8,0xb0b
80003216:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
80003218:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
8000321a:	e0 68 be ef 	mov	r8,48879
8000321e:	ea 18 de ad 	orh	r8,0xdead
80003222:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
80003224:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
80003226:	fc 18 00 40 	movh	r8,0x40
8000322a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
8000322c:	e0 68 00 ff 	mov	r8,255
80003230:	ea 18 ff 00 	orh	r8,0xff00
80003234:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
80003236:	e0 68 01 01 	mov	r8,257
8000323a:	ea 18 01 01 	orh	r8,0x101
8000323e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
80003240:	e0 68 02 02 	mov	r8,514
80003244:	ea 18 02 02 	orh	r8,0x202
80003248:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
8000324a:	e0 68 03 03 	mov	r8,771
8000324e:	ea 18 03 03 	orh	r8,0x303
80003252:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80003254:	e0 68 04 04 	mov	r8,1028
80003258:	ea 18 04 04 	orh	r8,0x404
8000325c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
8000325e:	e0 68 05 05 	mov	r8,1285
80003262:	ea 18 05 05 	orh	r8,0x505
80003266:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80003268:	e0 68 06 06 	mov	r8,1542
8000326c:	ea 18 06 06 	orh	r8,0x606
80003270:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80003272:	e0 68 07 07 	mov	r8,1799
80003276:	ea 18 07 07 	orh	r8,0x707
8000327a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
8000327c:	30 08       	mov	r8,0
8000327e:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80003280:	5e fc       	retal	r12
80003282:	d7 03       	nop

80003284 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80003284:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80003286:	48 38       	lddpc	r8,80003290 <vPortEnterCritical+0xc>
80003288:	70 09       	ld.w	r9,r8[0x0]
8000328a:	2f f9       	sub	r9,-1
8000328c:	91 09       	st.w	r8[0x0],r9
}
8000328e:	5e fc       	retal	r12
80003290:	00 00       	add	r0,r0
80003292:	00 24       	rsub	r4,r0

80003294 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80003294:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80003296:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80003298:	30 0a       	mov	r10,0
8000329a:	14 9b       	mov	r11,r10
8000329c:	49 2c       	lddpc	r12,800032e4 <xPortStartScheduler+0x50>
8000329e:	f0 1f 00 13 	mcall	800032e8 <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
800032a2:	e0 68 2e e0 	mov	r8,12000
800032a6:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
800032aa:	30 08       	mov	r8,0
800032ac:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
800032b0:	e0 68 07 30 	mov	r8,1840
800032b4:	ea 18 00 00 	orh	r8,0x0
800032b8:	70 00       	ld.w	r0,r8[0x0]
800032ba:	60 0d       	ld.w	sp,r0[0x0]
800032bc:	1b 00       	ld.w	r0,sp++
800032be:	e0 68 00 24 	mov	r8,36
800032c2:	ea 18 00 00 	orh	r8,0x0
800032c6:	91 00       	st.w	r8[0x0],r0
800032c8:	e3 cd 00 ff 	ldm	sp++,r0-r7
800032cc:	2f ed       	sub	sp,-8
800032ce:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
800032d2:	fa f0 ff e0 	ld.w	r0,sp[-32]
800032d6:	e3 b0 00 00 	mtsr	0x0,r0
800032da:	fa f0 ff dc 	ld.w	r0,sp[-36]
800032de:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
800032e2:	d8 0a       	popm	pc,r12=0
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	33 b0       	mov	r0,59
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	28 c0       	sub	r0,-116

800032ec <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
800032ec:	20 6d       	sub	sp,24
800032ee:	eb cd 00 ff 	pushm	r0-r7
800032f2:	fa c7 ff c0 	sub	r7,sp,-64
800032f6:	ee f0 ff f8 	ld.w	r0,r7[-8]
800032fa:	ef 40 ff e0 	st.w	r7[-32],r0
800032fe:	ee f0 ff fc 	ld.w	r0,r7[-4]
80003302:	ef 40 ff e4 	st.w	r7[-28],r0
80003306:	eb c7 5f 00 	stm	--r7,r8-r12,lr
8000330a:	e0 68 00 24 	mov	r8,36
8000330e:	ea 18 00 00 	orh	r8,0x0
80003312:	70 00       	ld.w	r0,r8[0x0]
80003314:	1a d0       	st.w	--sp,r0
80003316:	f0 1f 00 1a 	mcall	8000337c <LABEL_RET_SCALL_260+0x14>
8000331a:	e0 68 07 30 	mov	r8,1840
8000331e:	ea 18 00 00 	orh	r8,0x0
80003322:	70 00       	ld.w	r0,r8[0x0]
80003324:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
80003326:	f0 1f 00 17 	mcall	80003380 <LABEL_RET_SCALL_260+0x18>
	portRESTORE_CONTEXT_SCALL();
8000332a:	e0 68 07 30 	mov	r8,1840
8000332e:	ea 18 00 00 	orh	r8,0x0
80003332:	70 00       	ld.w	r0,r8[0x0]
80003334:	60 0d       	ld.w	sp,r0[0x0]
80003336:	1b 00       	ld.w	r0,sp++
80003338:	e0 68 00 24 	mov	r8,36
8000333c:	ea 18 00 00 	orh	r8,0x0
80003340:	91 00       	st.w	r8[0x0],r0
80003342:	fa c7 ff d8 	sub	r7,sp,-40
80003346:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
8000334a:	ee f0 ff e0 	ld.w	r0,r7[-32]
8000334e:	e0 61 00 24 	mov	r1,36
80003352:	ea 11 00 00 	orh	r1,0x0
80003356:	62 02       	ld.w	r2,r1[0x0]
80003358:	58 02       	cp.w	r2,0
8000335a:	c0 70       	breq	80003368 <LABEL_RET_SCALL_260>
8000335c:	e4 c2 00 01 	sub	r2,r2,1
80003360:	83 02       	st.w	r1[0x0],r2
80003362:	58 02       	cp.w	r2,0
80003364:	c0 21       	brne	80003368 <LABEL_RET_SCALL_260>
80003366:	b1 c0       	cbr	r0,0x10

80003368 <LABEL_RET_SCALL_260>:
80003368:	ef 40 ff f8 	st.w	r7[-8],r0
8000336c:	ee f0 ff e4 	ld.w	r0,r7[-28]
80003370:	ef 40 ff fc 	st.w	r7[-4],r0
80003374:	e3 cd 00 ff 	ldm	sp++,r0-r7
80003378:	2f ad       	sub	sp,-24
8000337a:	d6 13       	rets
8000337c:	80 00       	ld.sh	r0,r0[0x0]
8000337e:	32 84       	mov	r4,40
80003380:	80 00       	ld.sh	r0,r0[0x0]
80003382:	39 58       	mov	r8,-107

80003384 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80003384:	e1 b8 00 43 	mfsr	r8,0x10c
80003388:	e3 b8 00 43 	mtsr	0x10c,r8
	}
8000338c:	5e fc       	retal	r12
8000338e:	d7 03       	nop

80003390 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80003390:	48 78       	lddpc	r8,800033ac <vPortExitCritical+0x1c>
80003392:	70 08       	ld.w	r8,r8[0x0]
80003394:	58 08       	cp.w	r8,0
80003396:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
80003398:	48 58       	lddpc	r8,800033ac <vPortExitCritical+0x1c>
8000339a:	70 09       	ld.w	r9,r8[0x0]
8000339c:	20 19       	sub	r9,1
8000339e:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
800033a0:	70 08       	ld.w	r8,r8[0x0]
800033a2:	58 08       	cp.w	r8,0
800033a4:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
800033a6:	d5 03       	csrf	0x10
800033a8:	5e fc       	retal	r12
800033aa:	00 00       	add	r0,r0
800033ac:	00 00       	add	r0,r0
800033ae:	00 24       	rsub	r4,r0

800033b0 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
800033b0:	eb cd 00 ff 	pushm	r0-r7
800033b4:	e0 68 00 24 	mov	r8,36
800033b8:	ea 18 00 00 	orh	r8,0x0
800033bc:	70 00       	ld.w	r0,r8[0x0]
800033be:	1a d0       	st.w	--sp,r0
800033c0:	7a 90       	ld.w	r0,sp[0x24]
800033c2:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800033c6:	58 10       	cp.w	r0,1
800033c8:	e0 8b 00 08 	brhi	800033d8 <LABEL_INT_SKIP_SAVE_CONTEXT_234>
800033cc:	e0 68 07 30 	mov	r8,1840
800033d0:	ea 18 00 00 	orh	r8,0x0
800033d4:	70 00       	ld.w	r0,r8[0x0]
800033d6:	81 0d       	st.w	r0[0x0],sp

800033d8 <LABEL_INT_SKIP_SAVE_CONTEXT_234>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
800033d8:	f0 1f 00 12 	mcall	80003420 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
800033dc:	f0 1f 00 12 	mcall	80003424 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
		vTaskIncrementTick();
800033e0:	f0 1f 00 12 	mcall	80003428 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x1c>
	portEXIT_CRITICAL();
800033e4:	f0 1f 00 12 	mcall	8000342c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
800033e8:	7a 90       	ld.w	r0,sp[0x24]
800033ea:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800033ee:	58 10       	cp.w	r0,1
800033f0:	e0 8b 00 0e 	brhi	8000340c <LABEL_INT_SKIP_RESTORE_CONTEXT_251>
800033f4:	f0 1f 00 0c 	mcall	80003424 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
800033f8:	f0 1f 00 0e 	mcall	80003430 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x24>
800033fc:	f0 1f 00 0c 	mcall	8000342c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>
80003400:	e0 68 07 30 	mov	r8,1840
80003404:	ea 18 00 00 	orh	r8,0x0
80003408:	70 00       	ld.w	r0,r8[0x0]
8000340a:	60 0d       	ld.w	sp,r0[0x0]

8000340c <LABEL_INT_SKIP_RESTORE_CONTEXT_251>:
8000340c:	1b 00       	ld.w	r0,sp++
8000340e:	e0 68 00 24 	mov	r8,36
80003412:	ea 18 00 00 	orh	r8,0x0
80003416:	91 00       	st.w	r8[0x0],r0
80003418:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000341c:	d6 03       	rete
8000341e:	00 00       	add	r0,r0
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	33 84       	mov	r4,56
80003424:	80 00       	ld.sh	r0,r0[0x0]
80003426:	32 84       	mov	r4,40
80003428:	80 00       	ld.sh	r0,r0[0x0]
8000342a:	3b 5c       	mov	r12,-75
8000342c:	80 00       	ld.sh	r0,r0[0x0]
8000342e:	33 90       	mov	r0,57
80003430:	80 00       	ld.sh	r0,r0[0x0]
80003432:	39 58       	mov	r8,-107

80003434 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80003434:	d4 01       	pushm	lr
	vTaskSuspendAll();
80003436:	f0 1f 00 02 	mcall	8000343c <__malloc_lock+0x8>
}
8000343a:	d8 02       	popm	pc
8000343c:	80 00       	ld.sh	r0,r0[0x0]
8000343e:	39 48       	mov	r8,-108

80003440 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
80003440:	d4 01       	pushm	lr
	xTaskResumeAll();
80003442:	f0 1f 00 02 	mcall	80003448 <__malloc_unlock+0x8>
}
80003446:	d8 02       	popm	pc
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	3c e0       	mov	r0,-50

8000344c <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
8000344c:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
8000344e:	48 48       	lddpc	r8,8000345c <_init_startup+0x10>
80003450:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80003454:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80003456:	f0 1f 00 03 	mcall	80003460 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
8000345a:	da 0a       	popm	pc,r12=1
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	9e 00       	ld.sh	r0,pc[0x0]
80003460:	80 00       	ld.sh	r0,r0[0x0]
80003462:	29 40       	sub	r0,-108

80003464 <_read>:
/**
 * Low-level read command.
 */
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003464:	d4 21       	pushm	r4-r7,lr
80003466:	16 95       	mov	r5,r11
80003468:	14 96       	mov	r6,r10
  int nChars = 0;

  if (file != 0)
8000346a:	58 0c       	cp.w	r12,0
8000346c:	c0 30       	breq	80003472 <_read+0xe>
8000346e:	3f f7       	mov	r7,-1
80003470:	c1 48       	rjmp	80003498 <_read+0x34>
    return -1;

  for (; len > 0; --len)
80003472:	58 0a       	cp.w	r10,0
80003474:	e0 89 00 04 	brgt	8000347c <_read+0x18>
80003478:	30 07       	mov	r7,0
8000347a:	c0 f8       	rjmp	80003498 <_read+0x34>
8000347c:	30 07       	mov	r7,0
  {
    int c = usart_getchar(stdio_usart_base);
8000347e:	48 84       	lddpc	r4,8000349c <_read+0x38>
80003480:	68 0c       	ld.w	r12,r4[0x0]
80003482:	f0 1f 00 08 	mcall	800034a0 <_read+0x3c>
    if (c < 0)
80003486:	c0 95       	brlt	80003498 <_read+0x34>
      break;

    *ptr++ = c;
80003488:	ea 07 0b 0c 	st.b	r5[r7],r12
    ++nChars;
8000348c:	2f f7       	sub	r7,-1

/**
 * Low-level read command.
 */
int __attribute__((weak))
_read (int file, char * ptr, int len)
8000348e:	ec 07 01 08 	sub	r8,r6,r7
  int nChars = 0;

  if (file != 0)
    return -1;

  for (; len > 0; --len)
80003492:	58 08       	cp.w	r8,0
80003494:	fe 99 ff f6 	brgt	80003480 <_read+0x1c>
    *ptr++ = c;
    ++nChars;
  }

  return nChars;
}
80003498:	0e 9c       	mov	r12,r7
8000349a:	d8 22       	popm	r4-r7,pc
8000349c:	00 00       	add	r0,r0
8000349e:	07 d4       	ld.ub	r4,r3[0x5]
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	2b 04       	sub	r4,-80

800034a4 <_write>:
 * 1 and 2 is stdout and stderr which goes to usart
 * 3 is framebuffer
 */
int __attribute__((weak))
_write (int file, char * ptr, int len)
{
800034a4:	d4 21       	pushm	r4-r7,lr
800034a6:	16 95       	mov	r5,r11
800034a8:	14 96       	mov	r6,r10
  int nChars = 0;

  if ( (file != 1)
800034aa:	20 1c       	sub	r12,1
800034ac:	58 2c       	cp.w	r12,2
800034ae:	e0 8b 00 12 	brhi	800034d2 <_write+0x2e>
       && (file != 2) && (file!=3))
    return -1;

  for (; len != 0; --len)
800034b2:	58 0a       	cp.w	r10,0
800034b4:	c0 31       	brne	800034ba <_write+0x16>
800034b6:	30 07       	mov	r7,0
800034b8:	c0 e8       	rjmp	800034d4 <_write+0x30>
800034ba:	30 07       	mov	r7,0
  {
    if (usart_putchar(stdio_usart_base, *ptr++) < 0)
800034bc:	48 74       	lddpc	r4,800034d8 <_write+0x34>
800034be:	68 0c       	ld.w	r12,r4[0x0]
800034c0:	ea 07 07 0b 	ld.ub	r11,r5[r7]
800034c4:	f0 1f 00 06 	mcall	800034dc <_write+0x38>
800034c8:	c0 55       	brlt	800034d2 <_write+0x2e>
    {
      return -1;
    }

    ++nChars;
800034ca:	2f f7       	sub	r7,-1

  if ( (file != 1)
       && (file != 2) && (file!=3))
    return -1;

  for (; len != 0; --len)
800034cc:	0e 36       	cp.w	r6,r7
800034ce:	cf 81       	brne	800034be <_write+0x1a>
800034d0:	c0 28       	rjmp	800034d4 <_write+0x30>
800034d2:	3f f7       	mov	r7,-1

    ++nChars;
  }

  return nChars;
}
800034d4:	0e 9c       	mov	r12,r7
800034d6:	d8 22       	popm	r4-r7,pc
800034d8:	00 00       	add	r0,r0
800034da:	07 d4       	ld.ub	r4,r3[0x5]
800034dc:	80 00       	ld.sh	r0,r0[0x0]
800034de:	2a b4       	sub	r4,-85

800034e0 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800034e0:	eb cd 40 80 	pushm	r7,lr
800034e4:	18 97       	mov	r7,r12
	if( pv )
800034e6:	58 0c       	cp.w	r12,0
800034e8:	c0 80       	breq	800034f8 <vPortFree+0x18>
	{
		vTaskSuspendAll();
800034ea:	f0 1f 00 05 	mcall	800034fc <vPortFree+0x1c>
		{
			free( pv );
800034ee:	0e 9c       	mov	r12,r7
800034f0:	f0 1f 00 04 	mcall	80003500 <vPortFree+0x20>
		}
		xTaskResumeAll();
800034f4:	f0 1f 00 04 	mcall	80003504 <vPortFree+0x24>
800034f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	39 48       	mov	r8,-108
80003500:	80 00       	ld.sh	r0,r0[0x0]
80003502:	4a c0       	lddpc	r0,800035b0 <prvUnlockQueue+0x50>
80003504:	80 00       	ld.sh	r0,r0[0x0]
80003506:	3c e0       	mov	r0,-50

80003508 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80003508:	eb cd 40 80 	pushm	r7,lr
8000350c:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
8000350e:	f0 1f 00 06 	mcall	80003524 <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
80003512:	0e 9c       	mov	r12,r7
80003514:	f0 1f 00 05 	mcall	80003528 <pvPortMalloc+0x20>
80003518:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
8000351a:	f0 1f 00 05 	mcall	8000352c <pvPortMalloc+0x24>
		}
	}
	#endif

	return pvReturn;
}
8000351e:	0e 9c       	mov	r12,r7
80003520:	e3 cd 80 80 	ldm	sp++,r7,pc
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	39 48       	mov	r8,-108
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	4a d0       	lddpc	r0,800035dc <prvUnlockQueue+0x7c>
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	3c e0       	mov	r0,-50

80003530 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
80003530:	d4 01       	pushm	lr
80003532:	16 98       	mov	r8,r11
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
80003534:	78 09       	ld.w	r9,r12[0x0]
80003536:	58 09       	cp.w	r9,0
80003538:	c1 10       	breq	8000355a <prvCopyDataFromQueue+0x2a>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
8000353a:	78 3a       	ld.w	r10,r12[0xc]
8000353c:	79 09       	ld.w	r9,r12[0x40]
8000353e:	f4 09 00 09 	add	r9,r10,r9
80003542:	99 39       	st.w	r12[0xc],r9
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
80003544:	78 1a       	ld.w	r10,r12[0x4]
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
80003546:	14 39       	cp.w	r9,r10
80003548:	f9 f9 20 00 	ld.wcc	r9,r12[0x0]
8000354c:	f9 f9 2a 03 	st.wcc	r12[0xc],r9
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
80003550:	79 0a       	ld.w	r10,r12[0x40]
80003552:	78 3b       	ld.w	r11,r12[0xc]
80003554:	10 9c       	mov	r12,r8
80003556:	f0 1f 00 02 	mcall	8000355c <prvCopyDataFromQueue+0x2c>
8000355a:	d8 02       	popm	pc
8000355c:	80 00       	ld.sh	r0,r0[0x0]
8000355e:	4f 18       	lddpc	r8,80003720 <xQueueGenericReceive+0x120>

80003560 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
80003560:	eb cd 40 c0 	pushm	r6-r7,lr
80003564:	18 97       	mov	r7,r12

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80003566:	f0 1f 00 23 	mcall	800035f0 <prvUnlockQueue+0x90>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
8000356a:	6f 28       	ld.w	r8,r7[0x48]
8000356c:	58 08       	cp.w	r8,0
8000356e:	e0 8a 00 18 	brle	8000359e <prvUnlockQueue+0x3e>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003572:	6e 98       	ld.w	r8,r7[0x24]
80003574:	58 08       	cp.w	r8,0
80003576:	c1 40       	breq	8000359e <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003578:	ee c6 ff dc 	sub	r6,r7,-36
8000357c:	c0 48       	rjmp	80003584 <prvUnlockQueue+0x24>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000357e:	6e 98       	ld.w	r8,r7[0x24]
80003580:	58 08       	cp.w	r8,0
80003582:	c0 e0       	breq	8000359e <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003584:	0c 9c       	mov	r12,r6
80003586:	f0 1f 00 1c 	mcall	800035f4 <prvUnlockQueue+0x94>
8000358a:	c0 30       	breq	80003590 <prvUnlockQueue+0x30>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
8000358c:	f0 1f 00 1b 	mcall	800035f8 <prvUnlockQueue+0x98>
				}

				--( pxQueue->xTxLock );
80003590:	6f 28       	ld.w	r8,r7[0x48]
80003592:	20 18       	sub	r8,1
80003594:	ef 48 00 48 	st.w	r7[72],r8
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80003598:	58 08       	cp.w	r8,0
8000359a:	fe 99 ff f2 	brgt	8000357e <prvUnlockQueue+0x1e>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
8000359e:	3f f8       	mov	r8,-1
800035a0:	ef 48 00 48 	st.w	r7[72],r8
	}
	taskEXIT_CRITICAL();
800035a4:	f0 1f 00 16 	mcall	800035fc <prvUnlockQueue+0x9c>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
800035a8:	f0 1f 00 12 	mcall	800035f0 <prvUnlockQueue+0x90>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
800035ac:	6f 18       	ld.w	r8,r7[0x44]
800035ae:	58 08       	cp.w	r8,0
800035b0:	e0 8a 00 18 	brle	800035e0 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800035b4:	6e 48       	ld.w	r8,r7[0x10]
800035b6:	58 08       	cp.w	r8,0
800035b8:	c1 40       	breq	800035e0 <prvUnlockQueue+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
800035ba:	ee c6 ff f0 	sub	r6,r7,-16
800035be:	c0 48       	rjmp	800035c6 <prvUnlockQueue+0x66>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800035c0:	6e 48       	ld.w	r8,r7[0x10]
800035c2:	58 08       	cp.w	r8,0
800035c4:	c0 e0       	breq	800035e0 <prvUnlockQueue+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
800035c6:	0c 9c       	mov	r12,r6
800035c8:	f0 1f 00 0b 	mcall	800035f4 <prvUnlockQueue+0x94>
800035cc:	c0 30       	breq	800035d2 <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
800035ce:	f0 1f 00 0b 	mcall	800035f8 <prvUnlockQueue+0x98>
				}

				--( pxQueue->xRxLock );
800035d2:	6f 18       	ld.w	r8,r7[0x44]
800035d4:	20 18       	sub	r8,1
800035d6:	ef 48 00 44 	st.w	r7[68],r8
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
800035da:	58 08       	cp.w	r8,0
800035dc:	fe 99 ff f2 	brgt	800035c0 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
800035e0:	3f f8       	mov	r8,-1
800035e2:	ef 48 00 44 	st.w	r7[68],r8
	}
	taskEXIT_CRITICAL();
800035e6:	f0 1f 00 06 	mcall	800035fc <prvUnlockQueue+0x9c>
}
800035ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800035ee:	00 00       	add	r0,r0
800035f0:	80 00       	ld.sh	r0,r0[0x0]
800035f2:	32 84       	mov	r4,40
800035f4:	80 00       	ld.sh	r0,r0[0x0]
800035f6:	3a e0       	mov	r0,-82
800035f8:	80 00       	ld.sh	r0,r0[0x0]
800035fa:	39 ec       	mov	r12,-98
800035fc:	80 00       	ld.sh	r0,r0[0x0]
800035fe:	33 90       	mov	r0,57

80003600 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
80003600:	d4 31       	pushm	r0-r7,lr
80003602:	20 5d       	sub	sp,20
80003604:	18 97       	mov	r7,r12
80003606:	50 0b       	stdsp	sp[0x0],r11
80003608:	50 2a       	stdsp	sp[0x8],r10
8000360a:	50 19       	stdsp	sp[0x4],r9
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
8000360c:	f8 c2 ff dc 	sub	r2,r12,-36
80003610:	30 05       	mov	r5,0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80003612:	fa c4 ff f4 	sub	r4,sp,-12
80003616:	30 10       	mov	r0,1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
80003618:	0a 91       	mov	r1,r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
8000361a:	fa c3 ff f8 	sub	r3,sp,-8
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
8000361e:	f0 1f 00 3e 	mcall	80003714 <xQueueGenericReceive+0x114>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
80003622:	6e e8       	ld.w	r8,r7[0x38]
80003624:	58 08       	cp.w	r8,0
80003626:	c2 a0       	breq	8000367a <xQueueGenericReceive+0x7a>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
80003628:	6e 36       	ld.w	r6,r7[0xc]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
8000362a:	40 0b       	lddsp	r11,sp[0x0]
8000362c:	0e 9c       	mov	r12,r7
8000362e:	f0 1f 00 3b 	mcall	80003718 <xQueueGenericReceive+0x118>

				if( xJustPeeking == pdFALSE )
80003632:	40 18       	lddsp	r8,sp[0x4]
80003634:	58 08       	cp.w	r8,0
80003636:	c1 51       	brne	80003660 <xQueueGenericReceive+0x60>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
80003638:	6e e8       	ld.w	r8,r7[0x38]
8000363a:	20 18       	sub	r8,1
8000363c:	8f e8       	st.w	r7[0x38],r8

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
8000363e:	6e 08       	ld.w	r8,r7[0x0]
80003640:	58 08       	cp.w	r8,0
80003642:	c0 41       	brne	8000364a <xQueueGenericReceive+0x4a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
80003644:	f0 1f 00 36 	mcall	8000371c <xQueueGenericReceive+0x11c>
80003648:	8f 1c       	st.w	r7[0x4],r12
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000364a:	6e 48       	ld.w	r8,r7[0x10]
8000364c:	58 08       	cp.w	r8,0
8000364e:	c1 20       	breq	80003672 <xQueueGenericReceive+0x72>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80003650:	ee cc ff f0 	sub	r12,r7,-16
80003654:	f0 1f 00 33 	mcall	80003720 <xQueueGenericReceive+0x120>
80003658:	58 1c       	cp.w	r12,1
8000365a:	c0 c1       	brne	80003672 <xQueueGenericReceive+0x72>
						{
							portYIELD_WITHIN_API();
8000365c:	d7 33       	scall
8000365e:	c0 a8       	rjmp	80003672 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
80003660:	8f 36       	st.w	r7[0xc],r6

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80003662:	6e 98       	ld.w	r8,r7[0x24]
80003664:	58 08       	cp.w	r8,0
80003666:	c0 60       	breq	80003672 <xQueueGenericReceive+0x72>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80003668:	04 9c       	mov	r12,r2
8000366a:	f0 1f 00 2e 	mcall	80003720 <xQueueGenericReceive+0x120>
8000366e:	c0 20       	breq	80003672 <xQueueGenericReceive+0x72>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
80003670:	d7 33       	scall
						}
					}

				}

				taskEXIT_CRITICAL();
80003672:	f0 1f 00 2d 	mcall	80003724 <xQueueGenericReceive+0x124>
80003676:	30 1c       	mov	r12,1
				return pdPASS;
80003678:	c4 c8       	rjmp	80003710 <xQueueGenericReceive+0x110>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
8000367a:	40 28       	lddsp	r8,sp[0x8]
8000367c:	58 08       	cp.w	r8,0
8000367e:	c0 51       	brne	80003688 <xQueueGenericReceive+0x88>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80003680:	f0 1f 00 29 	mcall	80003724 <xQueueGenericReceive+0x124>
80003684:	30 0c       	mov	r12,0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
80003686:	c4 58       	rjmp	80003710 <xQueueGenericReceive+0x110>
				}
				else if( xEntryTimeSet == pdFALSE )
80003688:	58 05       	cp.w	r5,0
8000368a:	c0 51       	brne	80003694 <xQueueGenericReceive+0x94>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
8000368c:	08 9c       	mov	r12,r4
8000368e:	f0 1f 00 27 	mcall	80003728 <xQueueGenericReceive+0x128>
80003692:	00 95       	mov	r5,r0
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
80003694:	f0 1f 00 24 	mcall	80003724 <xQueueGenericReceive+0x124>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80003698:	f0 1f 00 25 	mcall	8000372c <xQueueGenericReceive+0x12c>
		prvLockQueue( pxQueue );
8000369c:	f0 1f 00 1e 	mcall	80003714 <xQueueGenericReceive+0x114>
800036a0:	6f 18       	ld.w	r8,r7[0x44]
800036a2:	5b f8       	cp.w	r8,-1
800036a4:	ef f1 0a 11 	st.weq	r7[0x44],r1
800036a8:	6f 28       	ld.w	r8,r7[0x48]
800036aa:	5b f8       	cp.w	r8,-1
800036ac:	ef f1 0a 12 	st.weq	r7[0x48],r1
800036b0:	f0 1f 00 1d 	mcall	80003724 <xQueueGenericReceive+0x124>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800036b4:	06 9b       	mov	r11,r3
800036b6:	08 9c       	mov	r12,r4
800036b8:	f0 1f 00 1e 	mcall	80003730 <xQueueGenericReceive+0x130>
800036bc:	c2 41       	brne	80003704 <xQueueGenericReceive+0x104>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
800036be:	f0 1f 00 16 	mcall	80003714 <xQueueGenericReceive+0x114>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
800036c2:	6e e6       	ld.w	r6,r7[0x38]
	taskEXIT_CRITICAL();
800036c4:	f0 1f 00 18 	mcall	80003724 <xQueueGenericReceive+0x124>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
800036c8:	58 06       	cp.w	r6,0
800036ca:	c1 71       	brne	800036f8 <xQueueGenericReceive+0xf8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800036cc:	6e 08       	ld.w	r8,r7[0x0]
800036ce:	58 08       	cp.w	r8,0
800036d0:	c0 81       	brne	800036e0 <xQueueGenericReceive+0xe0>
					{
						portENTER_CRITICAL();
800036d2:	f0 1f 00 11 	mcall	80003714 <xQueueGenericReceive+0x114>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
800036d6:	6e 1c       	ld.w	r12,r7[0x4]
800036d8:	f0 1f 00 17 	mcall	80003734 <xQueueGenericReceive+0x134>
						}
						portEXIT_CRITICAL();
800036dc:	f0 1f 00 12 	mcall	80003724 <xQueueGenericReceive+0x124>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
800036e0:	40 2b       	lddsp	r11,sp[0x8]
800036e2:	04 9c       	mov	r12,r2
800036e4:	f0 1f 00 15 	mcall	80003738 <xQueueGenericReceive+0x138>
				prvUnlockQueue( pxQueue );
800036e8:	0e 9c       	mov	r12,r7
800036ea:	f0 1f 00 15 	mcall	8000373c <xQueueGenericReceive+0x13c>
				if( !xTaskResumeAll() )
800036ee:	f0 1f 00 15 	mcall	80003740 <xQueueGenericReceive+0x140>
800036f2:	c9 61       	brne	8000361e <xQueueGenericReceive+0x1e>
				{
					portYIELD_WITHIN_API();
800036f4:	d7 33       	scall
800036f6:	c9 4b       	rjmp	8000361e <xQueueGenericReceive+0x1e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
800036f8:	0e 9c       	mov	r12,r7
800036fa:	f0 1f 00 11 	mcall	8000373c <xQueueGenericReceive+0x13c>
				( void ) xTaskResumeAll();
800036fe:	f0 1f 00 11 	mcall	80003740 <xQueueGenericReceive+0x140>
80003702:	c8 eb       	rjmp	8000361e <xQueueGenericReceive+0x1e>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
80003704:	0e 9c       	mov	r12,r7
80003706:	f0 1f 00 0e 	mcall	8000373c <xQueueGenericReceive+0x13c>
			( void ) xTaskResumeAll();
8000370a:	f0 1f 00 0e 	mcall	80003740 <xQueueGenericReceive+0x140>
8000370e:	30 0c       	mov	r12,0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
80003710:	2f bd       	sub	sp,-20
80003712:	d8 32       	popm	r0-r7,pc
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	32 84       	mov	r4,40
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	35 30       	mov	r0,83
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	39 f8       	mov	r8,-97
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	3a e0       	mov	r0,-82
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	33 90       	mov	r0,57
80003728:	80 00       	ld.sh	r0,r0[0x0]
8000372a:	39 d4       	mov	r4,-99
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	39 48       	mov	r8,-108
80003730:	80 00       	ld.sh	r0,r0[0x0]
80003732:	3c 70       	mov	r0,-57
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	3a 5c       	mov	r12,-91
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	3e 6c       	mov	r12,-26
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	35 60       	mov	r0,86
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	3c e0       	mov	r0,-50

80003744 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
80003744:	eb cd 40 80 	pushm	r7,lr
80003748:	18 97       	mov	r7,r12
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
8000374a:	79 08       	ld.w	r8,r12[0x40]
8000374c:	58 08       	cp.w	r8,0
8000374e:	c0 a1       	brne	80003762 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80003750:	78 08       	ld.w	r8,r12[0x0]
80003752:	58 08       	cp.w	r8,0
80003754:	c2 b1       	brne	800037aa <prvCopyDataToQueue+0x66>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80003756:	78 1c       	ld.w	r12,r12[0x4]
80003758:	f0 1f 00 17 	mcall	800037b4 <prvCopyDataToQueue+0x70>
				pxQueue->pxMutexHolder = NULL;
8000375c:	30 08       	mov	r8,0
8000375e:	8f 18       	st.w	r7[0x4],r8
80003760:	c2 58       	rjmp	800037aa <prvCopyDataToQueue+0x66>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
80003762:	58 0a       	cp.w	r10,0
80003764:	c1 01       	brne	80003784 <prvCopyDataToQueue+0x40>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80003766:	10 9a       	mov	r10,r8
80003768:	78 2c       	ld.w	r12,r12[0x8]
8000376a:	f0 1f 00 14 	mcall	800037b8 <prvCopyDataToQueue+0x74>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
8000376e:	6e 29       	ld.w	r9,r7[0x8]
80003770:	6f 08       	ld.w	r8,r7[0x40]
80003772:	f2 08 00 08 	add	r8,r9,r8
80003776:	8f 28       	st.w	r7[0x8],r8
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
80003778:	6e 19       	ld.w	r9,r7[0x4]
8000377a:	12 38       	cp.w	r8,r9
8000377c:	c1 73       	brcs	800037aa <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
8000377e:	6e 08       	ld.w	r8,r7[0x0]
80003780:	8f 28       	st.w	r7[0x8],r8
80003782:	c1 48       	rjmp	800037aa <prvCopyDataToQueue+0x66>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80003784:	10 9a       	mov	r10,r8
80003786:	78 3c       	ld.w	r12,r12[0xc]
80003788:	f0 1f 00 0c 	mcall	800037b8 <prvCopyDataToQueue+0x74>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
8000378c:	6f 08       	ld.w	r8,r7[0x40]
8000378e:	6e 39       	ld.w	r9,r7[0xc]
80003790:	f2 08 01 08 	sub	r8,r9,r8
80003794:	8f 38       	st.w	r7[0xc],r8
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
80003796:	6e 09       	ld.w	r9,r7[0x0]
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
80003798:	12 38       	cp.w	r8,r9
8000379a:	ef f8 30 10 	ld.wcs	r8,r7[0x40]
8000379e:	ef f9 30 01 	ld.wcs	r9,r7[0x4]
800037a2:	f3 d8 e3 19 	subcs	r9,r9,r8
800037a6:	ef f9 3a 03 	st.wcs	r7[0xc],r9
		}
	}

	++( pxQueue->uxMessagesWaiting );
800037aa:	6e e8       	ld.w	r8,r7[0x38]
800037ac:	2f f8       	sub	r8,-1
800037ae:	8f e8       	st.w	r7[0x38],r8
}
800037b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800037b4:	80 00       	ld.sh	r0,r0[0x0]
800037b6:	3a 04       	mov	r4,-96
800037b8:	80 00       	ld.sh	r0,r0[0x0]
800037ba:	4f 18       	lddpc	r8,8000397c <vTaskSwitchContext+0x24>

800037bc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
800037bc:	d4 31       	pushm	r0-r7,lr
800037be:	20 5d       	sub	sp,20
800037c0:	18 97       	mov	r7,r12
800037c2:	50 0b       	stdsp	sp[0x0],r11
800037c4:	50 2a       	stdsp	sp[0x8],r10
800037c6:	50 19       	stdsp	sp[0x4],r9
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
800037c8:	f8 c0 ff f0 	sub	r0,r12,-16
800037cc:	30 04       	mov	r4,0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
800037ce:	fa c3 ff f4 	sub	r3,sp,-12

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
800037d2:	08 91       	mov	r1,r4

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800037d4:	fa c2 ff f8 	sub	r2,sp,-8
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
800037d8:	f0 1f 00 2f 	mcall	80003894 <xQueueGenericSend+0xd8>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
800037dc:	6e e9       	ld.w	r9,r7[0x38]
800037de:	6e f8       	ld.w	r8,r7[0x3c]
800037e0:	10 39       	cp.w	r9,r8
800037e2:	c1 42       	brcc	8000380a <xQueueGenericSend+0x4e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
800037e4:	40 1a       	lddsp	r10,sp[0x4]
800037e6:	40 0b       	lddsp	r11,sp[0x0]
800037e8:	0e 9c       	mov	r12,r7
800037ea:	f0 1f 00 2c 	mcall	80003898 <xQueueGenericSend+0xdc>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800037ee:	6e 98       	ld.w	r8,r7[0x24]
800037f0:	58 08       	cp.w	r8,0
800037f2:	c0 80       	breq	80003802 <xQueueGenericSend+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
800037f4:	ee cc ff dc 	sub	r12,r7,-36
800037f8:	f0 1f 00 29 	mcall	8000389c <xQueueGenericSend+0xe0>
800037fc:	58 1c       	cp.w	r12,1
800037fe:	c0 21       	brne	80003802 <xQueueGenericSend+0x46>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
80003800:	d7 33       	scall
					}
				}

				taskEXIT_CRITICAL();
80003802:	f0 1f 00 28 	mcall	800038a0 <xQueueGenericSend+0xe4>
80003806:	30 1c       	mov	r12,1

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
80003808:	c4 38       	rjmp	8000388e <xQueueGenericSend+0xd2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
8000380a:	40 28       	lddsp	r8,sp[0x8]
8000380c:	58 08       	cp.w	r8,0
8000380e:	c0 51       	brne	80003818 <xQueueGenericSend+0x5c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80003810:	f0 1f 00 24 	mcall	800038a0 <xQueueGenericSend+0xe4>
80003814:	30 0c       	mov	r12,0

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
80003816:	c3 c8       	rjmp	8000388e <xQueueGenericSend+0xd2>
				}
				else if( xEntryTimeSet == pdFALSE )
80003818:	58 04       	cp.w	r4,0
8000381a:	c0 51       	brne	80003824 <xQueueGenericSend+0x68>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
8000381c:	06 9c       	mov	r12,r3
8000381e:	f0 1f 00 22 	mcall	800038a4 <xQueueGenericSend+0xe8>
80003822:	30 14       	mov	r4,1
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
80003824:	f0 1f 00 1f 	mcall	800038a0 <xQueueGenericSend+0xe4>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80003828:	f0 1f 00 20 	mcall	800038a8 <xQueueGenericSend+0xec>
		prvLockQueue( pxQueue );
8000382c:	f0 1f 00 1a 	mcall	80003894 <xQueueGenericSend+0xd8>
80003830:	6f 18       	ld.w	r8,r7[0x44]
80003832:	5b f8       	cp.w	r8,-1
80003834:	ef f1 0a 11 	st.weq	r7[0x44],r1
80003838:	6f 28       	ld.w	r8,r7[0x48]
8000383a:	5b f8       	cp.w	r8,-1
8000383c:	ef f1 0a 12 	st.weq	r7[0x48],r1
80003840:	f0 1f 00 18 	mcall	800038a0 <xQueueGenericSend+0xe4>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80003844:	04 9b       	mov	r11,r2
80003846:	06 9c       	mov	r12,r3
80003848:	f0 1f 00 19 	mcall	800038ac <xQueueGenericSend+0xf0>
8000384c:	c1 b1       	brne	80003882 <xQueueGenericSend+0xc6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
8000384e:	f0 1f 00 12 	mcall	80003894 <xQueueGenericSend+0xd8>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
80003852:	6e e5       	ld.w	r5,r7[0x38]
80003854:	6e f6       	ld.w	r6,r7[0x3c]
	taskEXIT_CRITICAL();
80003856:	f0 1f 00 13 	mcall	800038a0 <xQueueGenericSend+0xe4>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
8000385a:	0c 35       	cp.w	r5,r6
8000385c:	c0 d1       	brne	80003876 <xQueueGenericSend+0xba>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
8000385e:	40 2b       	lddsp	r11,sp[0x8]
80003860:	00 9c       	mov	r12,r0
80003862:	f0 1f 00 14 	mcall	800038b0 <xQueueGenericSend+0xf4>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
80003866:	0e 9c       	mov	r12,r7
80003868:	f0 1f 00 13 	mcall	800038b4 <xQueueGenericSend+0xf8>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
8000386c:	f0 1f 00 13 	mcall	800038b8 <xQueueGenericSend+0xfc>
80003870:	cb 41       	brne	800037d8 <xQueueGenericSend+0x1c>
				{
					portYIELD_WITHIN_API();
80003872:	d7 33       	scall
80003874:	cb 2b       	rjmp	800037d8 <xQueueGenericSend+0x1c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80003876:	0e 9c       	mov	r12,r7
80003878:	f0 1f 00 0f 	mcall	800038b4 <xQueueGenericSend+0xf8>
				( void ) xTaskResumeAll();
8000387c:	f0 1f 00 0f 	mcall	800038b8 <xQueueGenericSend+0xfc>
80003880:	ca cb       	rjmp	800037d8 <xQueueGenericSend+0x1c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80003882:	0e 9c       	mov	r12,r7
80003884:	f0 1f 00 0c 	mcall	800038b4 <xQueueGenericSend+0xf8>
			( void ) xTaskResumeAll();
80003888:	f0 1f 00 0c 	mcall	800038b8 <xQueueGenericSend+0xfc>
8000388c:	30 0c       	mov	r12,0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
8000388e:	2f bd       	sub	sp,-20
80003890:	d8 32       	popm	r0-r7,pc
80003892:	00 00       	add	r0,r0
80003894:	80 00       	ld.sh	r0,r0[0x0]
80003896:	32 84       	mov	r4,40
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	37 44       	mov	r4,116
8000389c:	80 00       	ld.sh	r0,r0[0x0]
8000389e:	3a e0       	mov	r0,-82
800038a0:	80 00       	ld.sh	r0,r0[0x0]
800038a2:	33 90       	mov	r0,57
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	39 d4       	mov	r4,-99
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	39 48       	mov	r8,-108
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	3c 70       	mov	r0,-57
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	3e 6c       	mov	r12,-26
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	35 60       	mov	r0,86
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	3c e0       	mov	r0,-50

800038bc <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
800038bc:	d4 21       	pushm	r4-r7,lr
800038be:	18 97       	mov	r7,r12
800038c0:	16 96       	mov	r6,r11
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
800038c2:	58 0c       	cp.w	r12,0
800038c4:	c2 f0       	breq	80003922 <xQueueCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
800038c6:	34 cc       	mov	r12,76
800038c8:	f0 1f 00 17 	mcall	80003924 <xQueueCreate+0x68>
800038cc:	18 95       	mov	r5,r12
		if( pxNewQueue != NULL )
800038ce:	c2 a0       	breq	80003922 <xQueueCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
800038d0:	ec 07 02 44 	mul	r4,r6,r7

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
800038d4:	e8 cc ff ff 	sub	r12,r4,-1
800038d8:	f0 1f 00 13 	mcall	80003924 <xQueueCreate+0x68>
800038dc:	8b 0c       	st.w	r5[0x0],r12
			if( pxNewQueue->pcHead != NULL )
800038de:	c1 e0       	breq	8000391a <xQueueCreate+0x5e>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
800038e0:	f8 04 00 04 	add	r4,r12,r4
800038e4:	8b 14       	st.w	r5[0x4],r4
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
800038e6:	30 08       	mov	r8,0
800038e8:	8b e8       	st.w	r5[0x38],r8
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
800038ea:	8b 2c       	st.w	r5[0x8],r12
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
800038ec:	ee c8 00 01 	sub	r8,r7,1
800038f0:	ad 38       	mul	r8,r6
800038f2:	10 0c       	add	r12,r8
800038f4:	8b 3c       	st.w	r5[0xc],r12
				pxNewQueue->uxLength = uxQueueLength;
800038f6:	8b f7       	st.w	r5[0x3c],r7
				pxNewQueue->uxItemSize = uxItemSize;
800038f8:	eb 46 00 40 	st.w	r5[64],r6
				pxNewQueue->xRxLock = queueUNLOCKED;
800038fc:	3f f8       	mov	r8,-1
800038fe:	eb 48 00 44 	st.w	r5[68],r8
				pxNewQueue->xTxLock = queueUNLOCKED;
80003902:	eb 48 00 48 	st.w	r5[72],r8

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80003906:	ea cc ff f0 	sub	r12,r5,-16
8000390a:	f0 1f 00 08 	mcall	80003928 <xQueueCreate+0x6c>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
8000390e:	ea cc ff dc 	sub	r12,r5,-36
80003912:	f0 1f 00 06 	mcall	80003928 <xQueueCreate+0x6c>
80003916:	0a 9c       	mov	r12,r5
80003918:	d8 22       	popm	r4-r7,pc
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
8000391a:	0a 9c       	mov	r12,r5
8000391c:	f0 1f 00 04 	mcall	8000392c <xQueueCreate+0x70>
80003920:	d8 2a       	popm	r4-r7,pc,r12=0
80003922:	d8 2a       	popm	r4-r7,pc,r12=0
80003924:	80 00       	ld.sh	r0,r0[0x0]
80003926:	35 08       	mov	r8,80
80003928:	80 00       	ld.sh	r0,r0[0x0]
8000392a:	31 60       	mov	r0,22
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	34 e0       	mov	r0,78

80003930 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
80003930:	eb cd 40 80 	pushm	r7,lr
80003934:	16 97       	mov	r7,r11
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
80003936:	30 0b       	mov	r11,0
80003938:	f0 1f 00 03 	mcall	80003944 <xQueueCreateCountingSemaphore+0x14>

		if( pxHandle != NULL )
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
8000393c:	f9 f7 1a 0e 	st.wne	r12[0x38],r7
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
80003940:	e3 cd 80 80 	ldm	sp++,r7,pc
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	38 bc       	mov	r12,-117

80003948 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80003948:	48 38       	lddpc	r8,80003954 <vTaskSuspendAll+0xc>
8000394a:	70 09       	ld.w	r9,r8[0x0]
8000394c:	2f f9       	sub	r9,-1
8000394e:	91 09       	st.w	r8[0x0],r9
}
80003950:	5e fc       	retal	r12
80003952:	00 00       	add	r0,r0
80003954:	00 00       	add	r0,r0
80003956:	07 60       	ld.uh	r0,--r3

80003958 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80003958:	49 a8       	lddpc	r8,800039c0 <vTaskSwitchContext+0x68>
8000395a:	70 08       	ld.w	r8,r8[0x0]
8000395c:	58 08       	cp.w	r8,0
8000395e:	c0 b1       	brne	80003974 <vTaskSwitchContext+0x1c>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80003960:	49 98       	lddpc	r8,800039c4 <vTaskSwitchContext+0x6c>
80003962:	70 08       	ld.w	r8,r8[0x0]
80003964:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003968:	49 89       	lddpc	r9,800039c8 <vTaskSwitchContext+0x70>
8000396a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000396e:	58 08       	cp.w	r8,0
80003970:	c0 60       	breq	8000397c <vTaskSwitchContext+0x24>
80003972:	c1 18       	rjmp	80003994 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80003974:	30 19       	mov	r9,1
80003976:	49 68       	lddpc	r8,800039cc <vTaskSwitchContext+0x74>
80003978:	91 09       	st.w	r8[0x0],r9
8000397a:	5e fc       	retal	r12

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
8000397c:	49 28       	lddpc	r8,800039c4 <vTaskSwitchContext+0x6c>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000397e:	49 3a       	lddpc	r10,800039c8 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80003980:	70 09       	ld.w	r9,r8[0x0]
80003982:	20 19       	sub	r9,1
80003984:	91 09       	st.w	r8[0x0],r9

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80003986:	70 09       	ld.w	r9,r8[0x0]
80003988:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000398c:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
80003990:	58 09       	cp.w	r9,0
80003992:	cf 70       	breq	80003980 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
80003994:	48 c8       	lddpc	r8,800039c4 <vTaskSwitchContext+0x6c>
80003996:	70 08       	ld.w	r8,r8[0x0]
80003998:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000399c:	48 b9       	lddpc	r9,800039c8 <vTaskSwitchContext+0x70>
8000399e:	f2 08 00 28 	add	r8,r9,r8<<0x2
800039a2:	70 19       	ld.w	r9,r8[0x4]
800039a4:	72 19       	ld.w	r9,r9[0x4]
800039a6:	91 19       	st.w	r8[0x4],r9
800039a8:	f0 ca ff f8 	sub	r10,r8,-8
800039ac:	14 39       	cp.w	r9,r10
800039ae:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800039b2:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800039b6:	70 18       	ld.w	r8,r8[0x4]
800039b8:	70 39       	ld.w	r9,r8[0xc]
800039ba:	48 68       	lddpc	r8,800039d0 <vTaskSwitchContext+0x78>
800039bc:	91 09       	st.w	r8[0x0],r9
800039be:	5e fc       	retal	r12
800039c0:	00 00       	add	r0,r0
800039c2:	07 60       	ld.uh	r0,--r3
800039c4:	00 00       	add	r0,r0
800039c6:	07 98       	ld.ub	r8,r3[0x1]
800039c8:	00 00       	add	r0,r0
800039ca:	06 7c       	tst	r12,r3
800039cc:	00 00       	add	r0,r0
800039ce:	07 80       	ld.ub	r0,r3[0x0]
800039d0:	00 00       	add	r0,r0
800039d2:	07 30       	ld.ub	r0,r3++

800039d4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
800039d4:	48 48       	lddpc	r8,800039e4 <vTaskSetTimeOutState+0x10>
800039d6:	70 08       	ld.w	r8,r8[0x0]
800039d8:	99 08       	st.w	r12[0x0],r8
	pxTimeOut->xTimeOnEntering = xTickCount;
800039da:	48 48       	lddpc	r8,800039e8 <vTaskSetTimeOutState+0x14>
800039dc:	70 08       	ld.w	r8,r8[0x0]
800039de:	99 18       	st.w	r12[0x4],r8
}
800039e0:	5e fc       	retal	r12
800039e2:	00 00       	add	r0,r0
800039e4:	00 00       	add	r0,r0
800039e6:	06 74       	tst	r4,r3
800039e8:	00 00       	add	r0,r0
800039ea:	07 5c       	ld.sh	r12,--r3

800039ec <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
800039ec:	30 19       	mov	r9,1
800039ee:	48 28       	lddpc	r8,800039f4 <vTaskMissedYield+0x8>
800039f0:	91 09       	st.w	r8[0x0],r9
}
800039f2:	5e fc       	retal	r12
800039f4:	00 00       	add	r0,r0
800039f6:	07 80       	ld.ub	r0,r3[0x0]

800039f8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
800039f8:	48 28       	lddpc	r8,80003a00 <xTaskGetCurrentTaskHandle+0x8>
800039fa:	70 0c       	ld.w	r12,r8[0x0]

		return xReturn;
	}
800039fc:	5e fc       	retal	r12
800039fe:	00 00       	add	r0,r0
80003a00:	00 00       	add	r0,r0
80003a02:	07 30       	ld.ub	r0,r3++

80003a04 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
80003a04:	eb cd 40 c0 	pushm	r6-r7,lr
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
80003a08:	58 0c       	cp.w	r12,0
80003a0a:	c1 f0       	breq	80003a48 <vTaskPriorityDisinherit+0x44>

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
80003a0c:	18 97       	mov	r7,r12

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
80003a0e:	78 b9       	ld.w	r9,r12[0x2c]
80003a10:	79 18       	ld.w	r8,r12[0x44]
80003a12:	10 39       	cp.w	r9,r8
80003a14:	c1 a0       	breq	80003a48 <vTaskPriorityDisinherit+0x44>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
80003a16:	f8 c6 ff fc 	sub	r6,r12,-4
80003a1a:	0c 9c       	mov	r12,r6
80003a1c:	f0 1f 00 0c 	mcall	80003a4c <vTaskPriorityDisinherit+0x48>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
80003a20:	6f 1c       	ld.w	r12,r7[0x44]
80003a22:	8f bc       	st.w	r7[0x2c],r12
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
80003a24:	f8 08 11 08 	rsub	r8,r12,8
80003a28:	8f 68       	st.w	r7[0x18],r8
				prvAddTaskToReadyQueue( pxTCB );
80003a2a:	48 a8       	lddpc	r8,80003a50 <vTaskPriorityDisinherit+0x4c>
80003a2c:	70 08       	ld.w	r8,r8[0x0]
80003a2e:	10 3c       	cp.w	r12,r8
80003a30:	e0 88 00 04 	brls	80003a38 <vTaskPriorityDisinherit+0x34>
80003a34:	48 78       	lddpc	r8,80003a50 <vTaskPriorityDisinherit+0x4c>
80003a36:	91 0c       	st.w	r8[0x0],r12
80003a38:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003a3c:	0c 9b       	mov	r11,r6
80003a3e:	48 68       	lddpc	r8,80003a54 <vTaskPriorityDisinherit+0x50>
80003a40:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80003a44:	f0 1f 00 05 	mcall	80003a58 <vTaskPriorityDisinherit+0x54>
80003a48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a4c:	80 00       	ld.sh	r0,r0[0x0]
80003a4e:	31 ca       	mov	r10,28
80003a50:	00 00       	add	r0,r0
80003a52:	07 98       	ld.ub	r8,r3[0x1]
80003a54:	00 00       	add	r0,r0
80003a56:	06 7c       	tst	r12,r3
80003a58:	80 00       	ld.sh	r0,r0[0x0]
80003a5a:	31 7a       	mov	r10,23

80003a5c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
80003a5c:	eb cd 40 c0 	pushm	r6-r7,lr
80003a60:	18 97       	mov	r7,r12
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80003a62:	49 b8       	lddpc	r8,80003acc <vTaskPriorityInherit+0x70>
80003a64:	70 08       	ld.w	r8,r8[0x0]
80003a66:	78 b9       	ld.w	r9,r12[0x2c]
80003a68:	70 b8       	ld.w	r8,r8[0x2c]
80003a6a:	10 39       	cp.w	r9,r8
80003a6c:	c2 d2       	brcc	80003ac6 <vTaskPriorityInherit+0x6a>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
80003a6e:	49 88       	lddpc	r8,80003acc <vTaskPriorityInherit+0x70>
80003a70:	70 08       	ld.w	r8,r8[0x0]
80003a72:	70 b8       	ld.w	r8,r8[0x2c]
80003a74:	f0 08 11 08 	rsub	r8,r8,8
80003a78:	99 68       	st.w	r12[0x18],r8

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
80003a7a:	f2 09 00 28 	add	r8,r9,r9<<0x2
80003a7e:	49 59       	lddpc	r9,80003ad0 <vTaskPriorityInherit+0x74>
80003a80:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003a84:	78 59       	ld.w	r9,r12[0x14]
80003a86:	10 39       	cp.w	r9,r8
80003a88:	c1 b1       	brne	80003abe <vTaskPriorityInherit+0x62>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
80003a8a:	f8 c6 ff fc 	sub	r6,r12,-4
80003a8e:	0c 9c       	mov	r12,r6
80003a90:	f0 1f 00 11 	mcall	80003ad4 <vTaskPriorityInherit+0x78>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80003a94:	48 e8       	lddpc	r8,80003acc <vTaskPriorityInherit+0x70>
80003a96:	70 08       	ld.w	r8,r8[0x0]
80003a98:	70 bc       	ld.w	r12,r8[0x2c]
80003a9a:	8f bc       	st.w	r7[0x2c],r12
				prvAddTaskToReadyQueue( pxTCB );
80003a9c:	48 f8       	lddpc	r8,80003ad8 <vTaskPriorityInherit+0x7c>
80003a9e:	70 08       	ld.w	r8,r8[0x0]
80003aa0:	10 3c       	cp.w	r12,r8
80003aa2:	e0 88 00 04 	brls	80003aaa <vTaskPriorityInherit+0x4e>
80003aa6:	48 d8       	lddpc	r8,80003ad8 <vTaskPriorityInherit+0x7c>
80003aa8:	91 0c       	st.w	r8[0x0],r12
80003aaa:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003aae:	0c 9b       	mov	r11,r6
80003ab0:	48 88       	lddpc	r8,80003ad0 <vTaskPriorityInherit+0x74>
80003ab2:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80003ab6:	f0 1f 00 0a 	mcall	80003adc <vTaskPriorityInherit+0x80>
80003aba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80003abe:	48 48       	lddpc	r8,80003acc <vTaskPriorityInherit+0x70>
80003ac0:	70 08       	ld.w	r8,r8[0x0]
80003ac2:	70 b8       	ld.w	r8,r8[0x2c]
80003ac4:	99 b8       	st.w	r12[0x2c],r8
80003ac6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003aca:	00 00       	add	r0,r0
80003acc:	00 00       	add	r0,r0
80003ace:	07 30       	ld.ub	r0,r3++
80003ad0:	00 00       	add	r0,r0
80003ad2:	06 7c       	tst	r12,r3
80003ad4:	80 00       	ld.sh	r0,r0[0x0]
80003ad6:	31 ca       	mov	r10,28
80003ad8:	00 00       	add	r0,r0
80003ada:	07 98       	ld.ub	r8,r3[0x1]
80003adc:	80 00       	ld.sh	r0,r0[0x0]
80003ade:	31 7a       	mov	r10,23

80003ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
80003ae0:	eb cd 40 c0 	pushm	r6-r7,lr
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
80003ae4:	78 38       	ld.w	r8,r12[0xc]
80003ae6:	70 37       	ld.w	r7,r8[0xc]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
80003ae8:	ee c6 ff e8 	sub	r6,r7,-24
80003aec:	0c 9c       	mov	r12,r6
80003aee:	f0 1f 00 15 	mcall	80003b40 <xTaskRemoveFromEventList+0x60>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80003af2:	49 58       	lddpc	r8,80003b44 <xTaskRemoveFromEventList+0x64>
80003af4:	70 08       	ld.w	r8,r8[0x0]
80003af6:	58 08       	cp.w	r8,0
80003af8:	c1 71       	brne	80003b26 <xTaskRemoveFromEventList+0x46>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80003afa:	ee c6 ff fc 	sub	r6,r7,-4
80003afe:	0c 9c       	mov	r12,r6
80003b00:	f0 1f 00 10 	mcall	80003b40 <xTaskRemoveFromEventList+0x60>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
80003b04:	6e bc       	ld.w	r12,r7[0x2c]
80003b06:	49 18       	lddpc	r8,80003b48 <xTaskRemoveFromEventList+0x68>
80003b08:	70 08       	ld.w	r8,r8[0x0]
80003b0a:	10 3c       	cp.w	r12,r8
80003b0c:	e0 88 00 04 	brls	80003b14 <xTaskRemoveFromEventList+0x34>
80003b10:	48 e8       	lddpc	r8,80003b48 <xTaskRemoveFromEventList+0x68>
80003b12:	91 0c       	st.w	r8[0x0],r12
80003b14:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003b18:	0c 9b       	mov	r11,r6
80003b1a:	48 d8       	lddpc	r8,80003b4c <xTaskRemoveFromEventList+0x6c>
80003b1c:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80003b20:	f0 1f 00 0c 	mcall	80003b50 <xTaskRemoveFromEventList+0x70>
80003b24:	c0 58       	rjmp	80003b2e <xTaskRemoveFromEventList+0x4e>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80003b26:	0c 9b       	mov	r11,r6
80003b28:	48 bc       	lddpc	r12,80003b54 <xTaskRemoveFromEventList+0x74>
80003b2a:	f0 1f 00 0a 	mcall	80003b50 <xTaskRemoveFromEventList+0x70>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
80003b2e:	48 b8       	lddpc	r8,80003b58 <xTaskRemoveFromEventList+0x78>
80003b30:	70 08       	ld.w	r8,r8[0x0]
80003b32:	6e b9       	ld.w	r9,r7[0x2c]
80003b34:	70 b8       	ld.w	r8,r8[0x2c]
80003b36:	10 39       	cp.w	r9,r8
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
80003b38:	5f 2c       	srhs	r12
80003b3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003b3e:	00 00       	add	r0,r0
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	31 ca       	mov	r10,28
80003b44:	00 00       	add	r0,r0
80003b46:	07 60       	ld.uh	r0,--r3
80003b48:	00 00       	add	r0,r0
80003b4a:	07 98       	ld.ub	r8,r3[0x1]
80003b4c:	00 00       	add	r0,r0
80003b4e:	06 7c       	tst	r12,r3
80003b50:	80 00       	ld.sh	r0,r0[0x0]
80003b52:	31 7a       	mov	r10,23
80003b54:	00 00       	add	r0,r0
80003b56:	07 34       	ld.ub	r4,r3++
80003b58:	00 00       	add	r0,r0
80003b5a:	07 30       	ld.ub	r0,r3++

80003b5c <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
80003b5c:	eb cd 40 fc 	pushm	r2-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80003b60:	4b 98       	lddpc	r8,80003c44 <vTaskIncrementTick+0xe8>
80003b62:	70 08       	ld.w	r8,r8[0x0]
80003b64:	58 08       	cp.w	r8,0
80003b66:	c6 91       	brne	80003c38 <vTaskIncrementTick+0xdc>
	{
		++xTickCount;
80003b68:	4b 88       	lddpc	r8,80003c48 <vTaskIncrementTick+0xec>
80003b6a:	70 09       	ld.w	r9,r8[0x0]
80003b6c:	2f f9       	sub	r9,-1
80003b6e:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80003b70:	70 08       	ld.w	r8,r8[0x0]
80003b72:	58 08       	cp.w	r8,0
80003b74:	c1 a1       	brne	80003ba8 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
80003b76:	4b 68       	lddpc	r8,80003c4c <vTaskIncrementTick+0xf0>
80003b78:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80003b7a:	4b 69       	lddpc	r9,80003c50 <vTaskIncrementTick+0xf4>
80003b7c:	72 0b       	ld.w	r11,r9[0x0]
80003b7e:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80003b80:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
80003b82:	4b 59       	lddpc	r9,80003c54 <vTaskIncrementTick+0xf8>
80003b84:	72 0a       	ld.w	r10,r9[0x0]
80003b86:	2f fa       	sub	r10,-1
80003b88:	93 0a       	st.w	r9[0x0],r10

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80003b8a:	70 08       	ld.w	r8,r8[0x0]
80003b8c:	70 08       	ld.w	r8,r8[0x0]
80003b8e:	58 08       	cp.w	r8,0
80003b90:	c0 51       	brne	80003b9a <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80003b92:	3f f9       	mov	r9,-1
80003b94:	4b 18       	lddpc	r8,80003c58 <vTaskIncrementTick+0xfc>
80003b96:	91 09       	st.w	r8[0x0],r9
80003b98:	c0 88       	rjmp	80003ba8 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80003b9a:	4a d8       	lddpc	r8,80003c4c <vTaskIncrementTick+0xf0>
80003b9c:	70 08       	ld.w	r8,r8[0x0]
80003b9e:	70 38       	ld.w	r8,r8[0xc]
80003ba0:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80003ba2:	70 19       	ld.w	r9,r8[0x4]
80003ba4:	4a d8       	lddpc	r8,80003c58 <vTaskIncrementTick+0xfc>
80003ba6:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80003ba8:	4a 88       	lddpc	r8,80003c48 <vTaskIncrementTick+0xec>
80003baa:	70 09       	ld.w	r9,r8[0x0]
80003bac:	4a b8       	lddpc	r8,80003c58 <vTaskIncrementTick+0xfc>
80003bae:	70 08       	ld.w	r8,r8[0x0]
80003bb0:	10 39       	cp.w	r9,r8
80003bb2:	c4 73       	brcs	80003c40 <vTaskIncrementTick+0xe4>
80003bb4:	4a 68       	lddpc	r8,80003c4c <vTaskIncrementTick+0xf0>
80003bb6:	70 08       	ld.w	r8,r8[0x0]
80003bb8:	70 08       	ld.w	r8,r8[0x0]
80003bba:	58 08       	cp.w	r8,0
80003bbc:	c0 c0       	breq	80003bd4 <vTaskIncrementTick+0x78>
80003bbe:	4a 48       	lddpc	r8,80003c4c <vTaskIncrementTick+0xf0>
80003bc0:	70 08       	ld.w	r8,r8[0x0]
80003bc2:	70 38       	ld.w	r8,r8[0xc]
80003bc4:	70 37       	ld.w	r7,r8[0xc]
80003bc6:	6e 18       	ld.w	r8,r7[0x4]
80003bc8:	4a 09       	lddpc	r9,80003c48 <vTaskIncrementTick+0xec>
80003bca:	72 09       	ld.w	r9,r9[0x0]
80003bcc:	12 38       	cp.w	r8,r9
80003bce:	e0 88 00 14 	brls	80003bf6 <vTaskIncrementTick+0x9a>
80003bd2:	c0 e8       	rjmp	80003bee <vTaskIncrementTick+0x92>
80003bd4:	3f f9       	mov	r9,-1
80003bd6:	4a 18       	lddpc	r8,80003c58 <vTaskIncrementTick+0xfc>
80003bd8:	91 09       	st.w	r8[0x0],r9
80003bda:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003bde:	6a 08       	ld.w	r8,r5[0x0]
80003be0:	70 38       	ld.w	r8,r8[0xc]
80003be2:	70 37       	ld.w	r7,r8[0xc]
80003be4:	6e 18       	ld.w	r8,r7[0x4]
80003be6:	64 09       	ld.w	r9,r2[0x0]
80003be8:	12 38       	cp.w	r8,r9
80003bea:	e0 88 00 0a 	brls	80003bfe <vTaskIncrementTick+0xa2>
80003bee:	49 b9       	lddpc	r9,80003c58 <vTaskIncrementTick+0xfc>
80003bf0:	93 08       	st.w	r9[0x0],r8
80003bf2:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003bf6:	49 a4       	lddpc	r4,80003c5c <vTaskIncrementTick+0x100>
80003bf8:	49 a3       	lddpc	r3,80003c60 <vTaskIncrementTick+0x104>
80003bfa:	49 55       	lddpc	r5,80003c4c <vTaskIncrementTick+0xf0>
80003bfc:	49 32       	lddpc	r2,80003c48 <vTaskIncrementTick+0xec>
80003bfe:	ee c6 ff fc 	sub	r6,r7,-4
80003c02:	0c 9c       	mov	r12,r6
80003c04:	f0 1f 00 18 	mcall	80003c64 <vTaskIncrementTick+0x108>
80003c08:	6e a8       	ld.w	r8,r7[0x28]
80003c0a:	58 08       	cp.w	r8,0
80003c0c:	c0 50       	breq	80003c16 <vTaskIncrementTick+0xba>
80003c0e:	ee cc ff e8 	sub	r12,r7,-24
80003c12:	f0 1f 00 15 	mcall	80003c64 <vTaskIncrementTick+0x108>
80003c16:	6e bc       	ld.w	r12,r7[0x2c]
80003c18:	68 08       	ld.w	r8,r4[0x0]
80003c1a:	10 3c       	cp.w	r12,r8
80003c1c:	e9 fc ba 00 	st.whi	r4[0x0],r12
80003c20:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003c24:	0c 9b       	mov	r11,r6
80003c26:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
80003c2a:	f0 1f 00 10 	mcall	80003c68 <vTaskIncrementTick+0x10c>
80003c2e:	6a 08       	ld.w	r8,r5[0x0]
80003c30:	70 08       	ld.w	r8,r8[0x0]
80003c32:	58 08       	cp.w	r8,0
80003c34:	cd 51       	brne	80003bde <vTaskIncrementTick+0x82>
80003c36:	cc fb       	rjmp	80003bd4 <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
80003c38:	48 d8       	lddpc	r8,80003c6c <vTaskIncrementTick+0x110>
80003c3a:	70 09       	ld.w	r9,r8[0x0]
80003c3c:	2f f9       	sub	r9,-1
80003c3e:	91 09       	st.w	r8[0x0],r9
80003c40:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003c44:	00 00       	add	r0,r0
80003c46:	07 60       	ld.uh	r0,--r3
80003c48:	00 00       	add	r0,r0
80003c4a:	07 5c       	ld.sh	r12,--r3
80003c4c:	00 00       	add	r0,r0
80003c4e:	06 68       	and	r8,r3
80003c50:	00 00       	add	r0,r0
80003c52:	06 78       	tst	r8,r3
80003c54:	00 00       	add	r0,r0
80003c56:	06 74       	tst	r4,r3
80003c58:	00 00       	add	r0,r0
80003c5a:	00 28       	rsub	r8,r0
80003c5c:	00 00       	add	r0,r0
80003c5e:	07 98       	ld.ub	r8,r3[0x1]
80003c60:	00 00       	add	r0,r0
80003c62:	06 7c       	tst	r12,r3
80003c64:	80 00       	ld.sh	r0,r0[0x0]
80003c66:	31 ca       	mov	r10,28
80003c68:	80 00       	ld.sh	r0,r0[0x0]
80003c6a:	31 7a       	mov	r10,23
80003c6c:	00 00       	add	r0,r0
80003c6e:	06 60       	and	r0,r3

80003c70 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
80003c70:	eb cd 40 c0 	pushm	r6-r7,lr
80003c74:	18 97       	mov	r7,r12
80003c76:	16 96       	mov	r6,r11
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
80003c78:	f0 1f 00 15 	mcall	80003ccc <xTaskCheckForTimeOut+0x5c>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
80003c7c:	6c 08       	ld.w	r8,r6[0x0]
80003c7e:	5b f8       	cp.w	r8,-1
80003c80:	c0 31       	brne	80003c86 <xTaskCheckForTimeOut+0x16>
80003c82:	30 07       	mov	r7,0
80003c84:	c1 f8       	rjmp	80003cc2 <xTaskCheckForTimeOut+0x52>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
80003c86:	49 39       	lddpc	r9,80003cd0 <xTaskCheckForTimeOut+0x60>
80003c88:	72 09       	ld.w	r9,r9[0x0]
80003c8a:	6e 0a       	ld.w	r10,r7[0x0]
80003c8c:	12 3a       	cp.w	r10,r9
80003c8e:	c0 70       	breq	80003c9c <xTaskCheckForTimeOut+0x2c>
80003c90:	49 19       	lddpc	r9,80003cd4 <xTaskCheckForTimeOut+0x64>
80003c92:	72 09       	ld.w	r9,r9[0x0]
80003c94:	6e 1a       	ld.w	r10,r7[0x4]
80003c96:	12 3a       	cp.w	r10,r9
80003c98:	e0 88 00 14 	brls	80003cc0 <xTaskCheckForTimeOut+0x50>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
80003c9c:	48 e9       	lddpc	r9,80003cd4 <xTaskCheckForTimeOut+0x64>
80003c9e:	72 0a       	ld.w	r10,r9[0x0]
80003ca0:	6e 19       	ld.w	r9,r7[0x4]
80003ca2:	12 1a       	sub	r10,r9
80003ca4:	14 38       	cp.w	r8,r10
80003ca6:	e0 88 00 0d 	brls	80003cc0 <xTaskCheckForTimeOut+0x50>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
80003caa:	48 ba       	lddpc	r10,80003cd4 <xTaskCheckForTimeOut+0x64>
80003cac:	74 0a       	ld.w	r10,r10[0x0]
80003cae:	14 19       	sub	r9,r10
80003cb0:	f2 08 00 08 	add	r8,r9,r8
80003cb4:	8d 08       	st.w	r6[0x0],r8
			vTaskSetTimeOutState( pxTimeOut );
80003cb6:	0e 9c       	mov	r12,r7
80003cb8:	f0 1f 00 08 	mcall	80003cd8 <xTaskCheckForTimeOut+0x68>
80003cbc:	30 07       	mov	r7,0
80003cbe:	c0 28       	rjmp	80003cc2 <xTaskCheckForTimeOut+0x52>
80003cc0:	30 17       	mov	r7,1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
80003cc2:	f0 1f 00 07 	mcall	80003cdc <xTaskCheckForTimeOut+0x6c>

	return xReturn;
}
80003cc6:	0e 9c       	mov	r12,r7
80003cc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ccc:	80 00       	ld.sh	r0,r0[0x0]
80003cce:	32 84       	mov	r4,40
80003cd0:	00 00       	add	r0,r0
80003cd2:	06 74       	tst	r4,r3
80003cd4:	00 00       	add	r0,r0
80003cd6:	07 5c       	ld.sh	r12,--r3
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	39 d4       	mov	r4,-99
80003cdc:	80 00       	ld.sh	r0,r0[0x0]
80003cde:	33 90       	mov	r0,57

80003ce0 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80003ce0:	eb cd 40 fe 	pushm	r1-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80003ce4:	f0 1f 00 2c 	mcall	80003d94 <xTaskResumeAll+0xb4>
	{
		--uxSchedulerSuspended;
80003ce8:	4a c8       	lddpc	r8,80003d98 <xTaskResumeAll+0xb8>
80003cea:	70 09       	ld.w	r9,r8[0x0]
80003cec:	20 19       	sub	r9,1
80003cee:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80003cf0:	70 08       	ld.w	r8,r8[0x0]
80003cf2:	58 08       	cp.w	r8,0
80003cf4:	c4 91       	brne	80003d86 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80003cf6:	4a a8       	lddpc	r8,80003d9c <xTaskResumeAll+0xbc>
80003cf8:	70 08       	ld.w	r8,r8[0x0]
80003cfa:	58 08       	cp.w	r8,0
80003cfc:	c4 50       	breq	80003d86 <xTaskResumeAll+0xa6>
80003cfe:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80003d00:	4a 85       	lddpc	r5,80003da0 <xTaskResumeAll+0xc0>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
80003d02:	4a 93       	lddpc	r3,80003da4 <xTaskResumeAll+0xc4>
80003d04:	4a 92       	lddpc	r2,80003da8 <xTaskResumeAll+0xc8>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80003d06:	4a a1       	lddpc	r1,80003dac <xTaskResumeAll+0xcc>
80003d08:	c1 e8       	rjmp	80003d44 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80003d0a:	6a 38       	ld.w	r8,r5[0xc]
80003d0c:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
80003d0e:	ee cc ff e8 	sub	r12,r7,-24
80003d12:	f0 1f 00 28 	mcall	80003db0 <xTaskResumeAll+0xd0>
					vListRemove( &( pxTCB->xGenericListItem ) );
80003d16:	ee c6 ff fc 	sub	r6,r7,-4
80003d1a:	0c 9c       	mov	r12,r6
80003d1c:	f0 1f 00 25 	mcall	80003db0 <xTaskResumeAll+0xd0>
					prvAddTaskToReadyQueue( pxTCB );
80003d20:	6e bc       	ld.w	r12,r7[0x2c]
80003d22:	66 08       	ld.w	r8,r3[0x0]
80003d24:	10 3c       	cp.w	r12,r8
80003d26:	e7 fc ba 00 	st.whi	r3[0x0],r12
80003d2a:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80003d2e:	0c 9b       	mov	r11,r6
80003d30:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80003d34:	f0 1f 00 20 	mcall	80003db4 <xTaskResumeAll+0xd4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80003d38:	62 08       	ld.w	r8,r1[0x0]
80003d3a:	6e b9       	ld.w	r9,r7[0x2c]
80003d3c:	70 b8       	ld.w	r8,r8[0x2c]
80003d3e:	10 39       	cp.w	r9,r8
80003d40:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80003d44:	6a 08       	ld.w	r8,r5[0x0]
80003d46:	58 08       	cp.w	r8,0
80003d48:	ce 11       	brne	80003d0a <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80003d4a:	49 c8       	lddpc	r8,80003db8 <xTaskResumeAll+0xd8>
80003d4c:	70 08       	ld.w	r8,r8[0x0]
80003d4e:	58 08       	cp.w	r8,0
80003d50:	c0 f0       	breq	80003d6e <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80003d52:	49 a8       	lddpc	r8,80003db8 <xTaskResumeAll+0xd8>
80003d54:	70 08       	ld.w	r8,r8[0x0]
80003d56:	58 08       	cp.w	r8,0
80003d58:	c1 10       	breq	80003d7a <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
80003d5a:	49 87       	lddpc	r7,80003db8 <xTaskResumeAll+0xd8>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80003d5c:	f0 1f 00 18 	mcall	80003dbc <xTaskResumeAll+0xdc>
						--uxMissedTicks;
80003d60:	6e 08       	ld.w	r8,r7[0x0]
80003d62:	20 18       	sub	r8,1
80003d64:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80003d66:	6e 08       	ld.w	r8,r7[0x0]
80003d68:	58 08       	cp.w	r8,0
80003d6a:	cf 91       	brne	80003d5c <xTaskResumeAll+0x7c>
80003d6c:	c0 78       	rjmp	80003d7a <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
80003d6e:	58 14       	cp.w	r4,1
80003d70:	c0 50       	breq	80003d7a <xTaskResumeAll+0x9a>
80003d72:	49 48       	lddpc	r8,80003dc0 <xTaskResumeAll+0xe0>
80003d74:	70 08       	ld.w	r8,r8[0x0]
80003d76:	58 18       	cp.w	r8,1
80003d78:	c0 71       	brne	80003d86 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
80003d7a:	30 09       	mov	r9,0
80003d7c:	49 18       	lddpc	r8,80003dc0 <xTaskResumeAll+0xe0>
80003d7e:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
80003d80:	d7 33       	scall
80003d82:	30 17       	mov	r7,1
80003d84:	c0 28       	rjmp	80003d88 <xTaskResumeAll+0xa8>
80003d86:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
80003d88:	f0 1f 00 0f 	mcall	80003dc4 <xTaskResumeAll+0xe4>

	return xAlreadyYielded;
}
80003d8c:	0e 9c       	mov	r12,r7
80003d8e:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80003d92:	00 00       	add	r0,r0
80003d94:	80 00       	ld.sh	r0,r0[0x0]
80003d96:	32 84       	mov	r4,40
80003d98:	00 00       	add	r0,r0
80003d9a:	07 60       	ld.uh	r0,--r3
80003d9c:	00 00       	add	r0,r0
80003d9e:	07 7c       	ld.ub	r12,--r3
80003da0:	00 00       	add	r0,r0
80003da2:	07 34       	ld.ub	r4,r3++
80003da4:	00 00       	add	r0,r0
80003da6:	07 98       	ld.ub	r8,r3[0x1]
80003da8:	00 00       	add	r0,r0
80003daa:	06 7c       	tst	r12,r3
80003dac:	00 00       	add	r0,r0
80003dae:	07 30       	ld.ub	r0,r3++
80003db0:	80 00       	ld.sh	r0,r0[0x0]
80003db2:	31 ca       	mov	r10,28
80003db4:	80 00       	ld.sh	r0,r0[0x0]
80003db6:	31 7a       	mov	r10,23
80003db8:	00 00       	add	r0,r0
80003dba:	06 60       	and	r0,r3
80003dbc:	80 00       	ld.sh	r0,r0[0x0]
80003dbe:	3b 5c       	mov	r12,-75
80003dc0:	00 00       	add	r0,r0
80003dc2:	07 80       	ld.ub	r0,r3[0x0]
80003dc4:	80 00       	ld.sh	r0,r0[0x0]
80003dc6:	33 90       	mov	r0,57

80003dc8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
80003dc8:	eb cd 40 80 	pushm	r7,lr
80003dcc:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80003dce:	49 08       	lddpc	r8,80003e0c <prvAddCurrentTaskToDelayedList+0x44>
80003dd0:	70 08       	ld.w	r8,r8[0x0]
80003dd2:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
80003dd4:	48 f8       	lddpc	r8,80003e10 <prvAddCurrentTaskToDelayedList+0x48>
80003dd6:	70 08       	ld.w	r8,r8[0x0]
80003dd8:	10 3c       	cp.w	r12,r8
80003dda:	c0 a2       	brcc	80003dee <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80003ddc:	48 c8       	lddpc	r8,80003e0c <prvAddCurrentTaskToDelayedList+0x44>
80003dde:	70 0b       	ld.w	r11,r8[0x0]
80003de0:	48 d8       	lddpc	r8,80003e14 <prvAddCurrentTaskToDelayedList+0x4c>
80003de2:	70 0c       	ld.w	r12,r8[0x0]
80003de4:	2f cb       	sub	r11,-4
80003de6:	f0 1f 00 0d 	mcall	80003e18 <prvAddCurrentTaskToDelayedList+0x50>
80003dea:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80003dee:	48 88       	lddpc	r8,80003e0c <prvAddCurrentTaskToDelayedList+0x44>
80003df0:	70 0b       	ld.w	r11,r8[0x0]
80003df2:	48 b8       	lddpc	r8,80003e1c <prvAddCurrentTaskToDelayedList+0x54>
80003df4:	70 0c       	ld.w	r12,r8[0x0]
80003df6:	2f cb       	sub	r11,-4
80003df8:	f0 1f 00 08 	mcall	80003e18 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80003dfc:	48 98       	lddpc	r8,80003e20 <prvAddCurrentTaskToDelayedList+0x58>
80003dfe:	70 08       	ld.w	r8,r8[0x0]
80003e00:	10 37       	cp.w	r7,r8
80003e02:	c0 32       	brcc	80003e08 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
80003e04:	48 78       	lddpc	r8,80003e20 <prvAddCurrentTaskToDelayedList+0x58>
80003e06:	91 07       	st.w	r8[0x0],r7
80003e08:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e0c:	00 00       	add	r0,r0
80003e0e:	07 30       	ld.ub	r0,r3++
80003e10:	00 00       	add	r0,r0
80003e12:	07 5c       	ld.sh	r12,--r3
80003e14:	00 00       	add	r0,r0
80003e16:	06 78       	tst	r8,r3
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	31 96       	mov	r6,25
80003e1c:	00 00       	add	r0,r0
80003e1e:	06 68       	and	r8,r3
80003e20:	00 00       	add	r0,r0
80003e22:	00 28       	rsub	r8,r0

80003e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80003e24:	eb cd 40 c0 	pushm	r6-r7,lr
80003e28:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80003e2a:	58 0c       	cp.w	r12,0
80003e2c:	c1 10       	breq	80003e4e <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80003e2e:	f0 1f 00 0a 	mcall	80003e54 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80003e32:	48 a8       	lddpc	r8,80003e58 <vTaskDelay+0x34>
80003e34:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80003e36:	48 a8       	lddpc	r8,80003e5c <vTaskDelay+0x38>
80003e38:	70 0c       	ld.w	r12,r8[0x0]
80003e3a:	2f cc       	sub	r12,-4
80003e3c:	f0 1f 00 09 	mcall	80003e60 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80003e40:	ee 06 00 0c 	add	r12,r7,r6
80003e44:	f0 1f 00 08 	mcall	80003e64 <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80003e48:	f0 1f 00 08 	mcall	80003e68 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80003e4c:	c0 21       	brne	80003e50 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80003e4e:	d7 33       	scall
80003e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003e54:	80 00       	ld.sh	r0,r0[0x0]
80003e56:	39 48       	mov	r8,-108
80003e58:	00 00       	add	r0,r0
80003e5a:	07 5c       	ld.sh	r12,--r3
80003e5c:	00 00       	add	r0,r0
80003e5e:	07 30       	ld.ub	r0,r3++
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	31 ca       	mov	r10,28
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	3d c8       	mov	r8,-36
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	3c e0       	mov	r0,-50

80003e6c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
80003e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80003e70:	16 96       	mov	r6,r11
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
80003e72:	48 e7       	lddpc	r7,80003ea8 <vTaskPlaceOnEventList+0x3c>
80003e74:	6e 0b       	ld.w	r11,r7[0x0]
80003e76:	2e 8b       	sub	r11,-24
80003e78:	f0 1f 00 0d 	mcall	80003eac <vTaskPlaceOnEventList+0x40>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80003e7c:	6e 0c       	ld.w	r12,r7[0x0]
80003e7e:	2f cc       	sub	r12,-4
80003e80:	f0 1f 00 0c 	mcall	80003eb0 <vTaskPlaceOnEventList+0x44>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80003e84:	5b f6       	cp.w	r6,-1
80003e86:	c0 81       	brne	80003e96 <vTaskPlaceOnEventList+0x2a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80003e88:	6e 0b       	ld.w	r11,r7[0x0]
80003e8a:	2f cb       	sub	r11,-4
80003e8c:	48 ac       	lddpc	r12,80003eb4 <vTaskPlaceOnEventList+0x48>
80003e8e:	f0 1f 00 0b 	mcall	80003eb8 <vTaskPlaceOnEventList+0x4c>
80003e92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
80003e96:	48 a8       	lddpc	r8,80003ebc <vTaskPlaceOnEventList+0x50>
80003e98:	70 0c       	ld.w	r12,r8[0x0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80003e9a:	ec 0c 00 0c 	add	r12,r6,r12
80003e9e:	f0 1f 00 09 	mcall	80003ec0 <vTaskPlaceOnEventList+0x54>
80003ea2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ea6:	00 00       	add	r0,r0
80003ea8:	00 00       	add	r0,r0
80003eaa:	07 30       	ld.ub	r0,r3++
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	31 96       	mov	r6,25
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	31 ca       	mov	r10,28
80003eb4:	00 00       	add	r0,r0
80003eb6:	07 84       	ld.ub	r4,r3[0x0]
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	31 7a       	mov	r10,23
80003ebc:	00 00       	add	r0,r0
80003ebe:	07 5c       	ld.sh	r12,--r3
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	3d c8       	mov	r8,-36

80003ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80003ec4:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80003ec8:	49 57       	lddpc	r7,80003f1c <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80003eca:	49 64       	lddpc	r4,80003f20 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
80003ecc:	49 63       	lddpc	r3,80003f24 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80003ece:	49 75       	lddpc	r5,80003f28 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80003ed0:	6e 08       	ld.w	r8,r7[0x0]
80003ed2:	58 08       	cp.w	r8,0
80003ed4:	c1 e0       	breq	80003f10 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
80003ed6:	f0 1f 00 16 	mcall	80003f2c <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80003eda:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
80003edc:	f0 1f 00 15 	mcall	80003f30 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
80003ee0:	58 06       	cp.w	r6,0
80003ee2:	c1 70       	breq	80003f10 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
80003ee4:	f0 1f 00 14 	mcall	80003f34 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
80003ee8:	68 38       	ld.w	r8,r4[0xc]
80003eea:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
80003eec:	ec cc ff fc 	sub	r12,r6,-4
80003ef0:	f0 1f 00 12 	mcall	80003f38 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
80003ef4:	66 08       	ld.w	r8,r3[0x0]
80003ef6:	20 18       	sub	r8,1
80003ef8:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
80003efa:	6e 08       	ld.w	r8,r7[0x0]
80003efc:	20 18       	sub	r8,1
80003efe:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
80003f00:	f0 1f 00 0f 	mcall	80003f3c <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
80003f04:	6c cc       	ld.w	r12,r6[0x30]
80003f06:	f0 1f 00 0f 	mcall	80003f40 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
80003f0a:	0c 9c       	mov	r12,r6
80003f0c:	f0 1f 00 0d 	mcall	80003f40 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80003f10:	6a 08       	ld.w	r8,r5[0x0]
80003f12:	58 18       	cp.w	r8,1
80003f14:	fe 98 ff de 	brls	80003ed0 <prvIdleTask+0xc>
			{
				taskYIELD();
80003f18:	d7 33       	scall
80003f1a:	cd bb       	rjmp	80003ed0 <prvIdleTask+0xc>
80003f1c:	00 00       	add	r0,r0
80003f1e:	06 70       	tst	r0,r3
80003f20:	00 00       	add	r0,r0
80003f22:	07 1c       	ld.sh	r12,r3++
80003f24:	00 00       	add	r0,r0
80003f26:	07 7c       	ld.ub	r12,--r3
80003f28:	00 00       	add	r0,r0
80003f2a:	06 7c       	tst	r12,r3
80003f2c:	80 00       	ld.sh	r0,r0[0x0]
80003f2e:	39 48       	mov	r8,-108
80003f30:	80 00       	ld.sh	r0,r0[0x0]
80003f32:	3c e0       	mov	r0,-50
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	32 84       	mov	r4,40
80003f38:	80 00       	ld.sh	r0,r0[0x0]
80003f3a:	31 ca       	mov	r10,28
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	33 90       	mov	r0,57
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	34 e0       	mov	r0,78

80003f44 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80003f44:	d4 31       	pushm	r0-r7,lr
80003f46:	20 1d       	sub	sp,4
80003f48:	fa c4 ff d8 	sub	r4,sp,-40
80003f4c:	50 0c       	stdsp	sp[0x0],r12
80003f4e:	16 91       	mov	r1,r11
80003f50:	14 97       	mov	r7,r10
80003f52:	12 90       	mov	r0,r9
80003f54:	10 93       	mov	r3,r8
80003f56:	68 02       	ld.w	r2,r4[0x0]
80003f58:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
80003f5a:	34 8c       	mov	r12,72
80003f5c:	f0 1f 00 5c 	mcall	800040cc <xTaskGenericCreate+0x188>
80003f60:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80003f62:	c0 31       	brne	80003f68 <xTaskGenericCreate+0x24>
80003f64:	3f fc       	mov	r12,-1
80003f66:	ca f8       	rjmp	800040c4 <xTaskGenericCreate+0x180>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80003f68:	58 06       	cp.w	r6,0
80003f6a:	e0 81 00 af 	brne	800040c8 <xTaskGenericCreate+0x184>
80003f6e:	0e 9c       	mov	r12,r7
80003f70:	5c 7c       	castu.h	r12
80003f72:	a3 6c       	lsl	r12,0x2
80003f74:	f0 1f 00 56 	mcall	800040cc <xTaskGenericCreate+0x188>
80003f78:	18 96       	mov	r6,r12
80003f7a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
80003f7c:	c0 61       	brne	80003f88 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
80003f7e:	0a 9c       	mov	r12,r5
80003f80:	f0 1f 00 54 	mcall	800040d0 <xTaskGenericCreate+0x18c>
80003f84:	3f fc       	mov	r12,-1
80003f86:	c9 f8       	rjmp	800040c4 <xTaskGenericCreate+0x180>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80003f88:	5c 77       	castu.h	r7
80003f8a:	ee 0a 15 02 	lsl	r10,r7,0x2
80003f8e:	e0 6b 00 a5 	mov	r11,165
80003f92:	0c 9c       	mov	r12,r6
80003f94:	f0 1f 00 50 	mcall	800040d4 <xTaskGenericCreate+0x190>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80003f98:	ee c6 00 01 	sub	r6,r7,1
80003f9c:	6a c8       	ld.w	r8,r5[0x30]
80003f9e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80003fa2:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80003fa6:	31 0a       	mov	r10,16
80003fa8:	02 9b       	mov	r11,r1
80003faa:	ea cc ff cc 	sub	r12,r5,-52
80003fae:	f0 1f 00 4b 	mcall	800040d8 <xTaskGenericCreate+0x194>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80003fb2:	30 08       	mov	r8,0
80003fb4:	eb 68 00 43 	st.b	r5[67],r8
80003fb8:	58 73       	cp.w	r3,7
80003fba:	e6 07 17 80 	movls	r7,r3
80003fbe:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
80003fc2:	8b b7       	st.w	r5[0x2c],r7
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80003fc4:	eb 47 00 44 	st.w	r5[68],r7
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80003fc8:	ea c4 ff fc 	sub	r4,r5,-4
80003fcc:	08 9c       	mov	r12,r4
80003fce:	f0 1f 00 44 	mcall	800040dc <xTaskGenericCreate+0x198>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80003fd2:	ea cc ff e8 	sub	r12,r5,-24
80003fd6:	f0 1f 00 42 	mcall	800040dc <xTaskGenericCreate+0x198>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80003fda:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
80003fdc:	ee 07 11 08 	rsub	r7,r7,8
80003fe0:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80003fe2:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80003fe4:	00 9a       	mov	r10,r0
80003fe6:	40 0b       	lddsp	r11,sp[0x0]
80003fe8:	0c 9c       	mov	r12,r6
80003fea:	f0 1f 00 3e 	mcall	800040e0 <xTaskGenericCreate+0x19c>
80003fee:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
80003ff0:	58 02       	cp.w	r2,0
80003ff2:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
80003ff6:	f0 1f 00 3c 	mcall	800040e4 <xTaskGenericCreate+0x1a0>
		{
			uxCurrentNumberOfTasks++;
80003ffa:	4b c8       	lddpc	r8,800040e8 <xTaskGenericCreate+0x1a4>
80003ffc:	70 09       	ld.w	r9,r8[0x0]
80003ffe:	2f f9       	sub	r9,-1
80004000:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
80004002:	4b b8       	lddpc	r8,800040ec <xTaskGenericCreate+0x1a8>
80004004:	70 08       	ld.w	r8,r8[0x0]
80004006:	58 08       	cp.w	r8,0
80004008:	c2 61       	brne	80004054 <xTaskGenericCreate+0x110>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
8000400a:	4b 98       	lddpc	r8,800040ec <xTaskGenericCreate+0x1a8>
8000400c:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
8000400e:	4b 78       	lddpc	r8,800040e8 <xTaskGenericCreate+0x1a4>
80004010:	70 08       	ld.w	r8,r8[0x0]
80004012:	58 18       	cp.w	r8,1
80004014:	c2 b1       	brne	8000406a <xTaskGenericCreate+0x126>
80004016:	4b 77       	lddpc	r7,800040f0 <xTaskGenericCreate+0x1ac>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
80004018:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
8000401c:	0e 9c       	mov	r12,r7
8000401e:	f0 1f 00 36 	mcall	800040f4 <xTaskGenericCreate+0x1b0>
80004022:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80004024:	0c 37       	cp.w	r7,r6
80004026:	cf b1       	brne	8000401c <xTaskGenericCreate+0xd8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
80004028:	4b 47       	lddpc	r7,800040f8 <xTaskGenericCreate+0x1b4>
8000402a:	0e 9c       	mov	r12,r7
8000402c:	f0 1f 00 32 	mcall	800040f4 <xTaskGenericCreate+0x1b0>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
80004030:	4b 36       	lddpc	r6,800040fc <xTaskGenericCreate+0x1b8>
80004032:	0c 9c       	mov	r12,r6
80004034:	f0 1f 00 30 	mcall	800040f4 <xTaskGenericCreate+0x1b0>
	vListInitialise( ( xList * ) &xPendingReadyList );
80004038:	4b 2c       	lddpc	r12,80004100 <xTaskGenericCreate+0x1bc>
8000403a:	f0 1f 00 2f 	mcall	800040f4 <xTaskGenericCreate+0x1b0>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
8000403e:	4b 2c       	lddpc	r12,80004104 <xTaskGenericCreate+0x1c0>
80004040:	f0 1f 00 2d 	mcall	800040f4 <xTaskGenericCreate+0x1b0>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004044:	4b 1c       	lddpc	r12,80004108 <xTaskGenericCreate+0x1c4>
80004046:	f0 1f 00 2c 	mcall	800040f4 <xTaskGenericCreate+0x1b0>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
8000404a:	4b 18       	lddpc	r8,8000410c <xTaskGenericCreate+0x1c8>
8000404c:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000404e:	4b 18       	lddpc	r8,80004110 <xTaskGenericCreate+0x1cc>
80004050:	91 06       	st.w	r8[0x0],r6
80004052:	c0 c8       	rjmp	8000406a <xTaskGenericCreate+0x126>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004054:	4b 08       	lddpc	r8,80004114 <xTaskGenericCreate+0x1d0>
80004056:	70 08       	ld.w	r8,r8[0x0]
80004058:	58 08       	cp.w	r8,0
8000405a:	c0 81       	brne	8000406a <xTaskGenericCreate+0x126>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
8000405c:	4a 48       	lddpc	r8,800040ec <xTaskGenericCreate+0x1a8>
8000405e:	70 08       	ld.w	r8,r8[0x0]
80004060:	70 b8       	ld.w	r8,r8[0x2c]
80004062:	10 33       	cp.w	r3,r8
80004064:	c0 33       	brcs	8000406a <xTaskGenericCreate+0x126>
					{
						pxCurrentTCB = pxNewTCB;
80004066:	4a 28       	lddpc	r8,800040ec <xTaskGenericCreate+0x1a8>
80004068:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
8000406a:	6a b8       	ld.w	r8,r5[0x2c]
8000406c:	4a b9       	lddpc	r9,80004118 <xTaskGenericCreate+0x1d4>
8000406e:	72 09       	ld.w	r9,r9[0x0]
80004070:	12 38       	cp.w	r8,r9
80004072:	e0 88 00 04 	brls	8000407a <xTaskGenericCreate+0x136>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004076:	4a 99       	lddpc	r9,80004118 <xTaskGenericCreate+0x1d4>
80004078:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
8000407a:	4a 98       	lddpc	r8,8000411c <xTaskGenericCreate+0x1d8>
8000407c:	70 09       	ld.w	r9,r8[0x0]
8000407e:	2f f9       	sub	r9,-1
80004080:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80004082:	6a b8       	ld.w	r8,r5[0x2c]
80004084:	4a 79       	lddpc	r9,80004120 <xTaskGenericCreate+0x1dc>
80004086:	72 09       	ld.w	r9,r9[0x0]
80004088:	12 38       	cp.w	r8,r9
8000408a:	e0 88 00 04 	brls	80004092 <xTaskGenericCreate+0x14e>
8000408e:	4a 59       	lddpc	r9,80004120 <xTaskGenericCreate+0x1dc>
80004090:	93 08       	st.w	r9[0x0],r8
80004092:	6a bc       	ld.w	r12,r5[0x2c]
80004094:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004098:	08 9b       	mov	r11,r4
8000409a:	49 68       	lddpc	r8,800040f0 <xTaskGenericCreate+0x1ac>
8000409c:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800040a0:	f0 1f 00 21 	mcall	80004124 <xTaskGenericCreate+0x1e0>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800040a4:	f0 1f 00 21 	mcall	80004128 <xTaskGenericCreate+0x1e4>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
800040a8:	49 b8       	lddpc	r8,80004114 <xTaskGenericCreate+0x1d0>
800040aa:	70 08       	ld.w	r8,r8[0x0]
800040ac:	58 08       	cp.w	r8,0
800040ae:	c0 a0       	breq	800040c2 <xTaskGenericCreate+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800040b0:	48 f8       	lddpc	r8,800040ec <xTaskGenericCreate+0x1a8>
800040b2:	70 08       	ld.w	r8,r8[0x0]
800040b4:	70 b8       	ld.w	r8,r8[0x2c]
800040b6:	10 33       	cp.w	r3,r8
800040b8:	e0 88 00 05 	brls	800040c2 <xTaskGenericCreate+0x17e>
			{
				portYIELD_WITHIN_API();
800040bc:	d7 33       	scall
800040be:	30 1c       	mov	r12,1
800040c0:	c0 28       	rjmp	800040c4 <xTaskGenericCreate+0x180>
800040c2:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
800040c4:	2f fd       	sub	sp,-4
800040c6:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
800040c8:	99 c6       	st.w	r12[0x30],r6
800040ca:	c5 fb       	rjmp	80003f88 <xTaskGenericCreate+0x44>
800040cc:	80 00       	ld.sh	r0,r0[0x0]
800040ce:	35 08       	mov	r8,80
800040d0:	80 00       	ld.sh	r0,r0[0x0]
800040d2:	34 e0       	mov	r0,78
800040d4:	80 00       	ld.sh	r0,r0[0x0]
800040d6:	50 60       	stdsp	sp[0x18],r0
800040d8:	80 00       	ld.sh	r0,r0[0x0]
800040da:	53 8c       	stdsp	sp[0xe0],r12
800040dc:	80 00       	ld.sh	r0,r0[0x0]
800040de:	31 74       	mov	r4,23
800040e0:	80 00       	ld.sh	r0,r0[0x0]
800040e2:	31 f0       	mov	r0,31
800040e4:	80 00       	ld.sh	r0,r0[0x0]
800040e6:	32 84       	mov	r4,40
800040e8:	00 00       	add	r0,r0
800040ea:	07 7c       	ld.ub	r12,--r3
800040ec:	00 00       	add	r0,r0
800040ee:	07 30       	ld.ub	r0,r3++
800040f0:	00 00       	add	r0,r0
800040f2:	06 7c       	tst	r12,r3
800040f4:	80 00       	ld.sh	r0,r0[0x0]
800040f6:	31 60       	mov	r0,22
800040f8:	00 00       	add	r0,r0
800040fa:	07 48       	ld.w	r8,--r3
800040fc:	00 00       	add	r0,r0
800040fe:	07 64       	ld.uh	r4,--r3
80004100:	00 00       	add	r0,r0
80004102:	07 34       	ld.ub	r4,r3++
80004104:	00 00       	add	r0,r0
80004106:	07 1c       	ld.sh	r12,r3++
80004108:	00 00       	add	r0,r0
8000410a:	07 84       	ld.ub	r4,r3[0x0]
8000410c:	00 00       	add	r0,r0
8000410e:	06 68       	and	r8,r3
80004110:	00 00       	add	r0,r0
80004112:	06 78       	tst	r8,r3
80004114:	00 00       	add	r0,r0
80004116:	06 6c       	and	r12,r3
80004118:	00 00       	add	r0,r0
8000411a:	06 64       	and	r4,r3
8000411c:	00 00       	add	r0,r0
8000411e:	07 78       	ld.ub	r8,--r3
80004120:	00 00       	add	r0,r0
80004122:	07 98       	ld.ub	r8,r3[0x1]
80004124:	80 00       	ld.sh	r0,r0[0x0]
80004126:	31 7a       	mov	r10,23
80004128:	80 00       	ld.sh	r0,r0[0x0]
8000412a:	33 90       	mov	r0,57

8000412c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
8000412c:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
8000412e:	30 09       	mov	r9,0
80004130:	1a d9       	st.w	--sp,r9
80004132:	1a d9       	st.w	--sp,r9
80004134:	1a d9       	st.w	--sp,r9
80004136:	12 98       	mov	r8,r9
80004138:	e0 6a 01 00 	mov	r10,256
8000413c:	48 9b       	lddpc	r11,80004160 <vTaskStartScheduler+0x34>
8000413e:	48 ac       	lddpc	r12,80004164 <vTaskStartScheduler+0x38>
80004140:	f0 1f 00 0a 	mcall	80004168 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004144:	2f dd       	sub	sp,-12
80004146:	58 1c       	cp.w	r12,1
80004148:	c0 a1       	brne	8000415c <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
8000414a:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
8000414c:	30 19       	mov	r9,1
8000414e:	48 88       	lddpc	r8,8000416c <vTaskStartScheduler+0x40>
80004150:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
80004152:	30 09       	mov	r9,0
80004154:	48 78       	lddpc	r8,80004170 <vTaskStartScheduler+0x44>
80004156:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004158:	f0 1f 00 07 	mcall	80004174 <vTaskStartScheduler+0x48>
8000415c:	d8 02       	popm	pc
8000415e:	00 00       	add	r0,r0
80004160:	80 00       	ld.sh	r0,r0[0x0]
80004162:	a2 e0       	st.b	r1[0x6],r0
80004164:	80 00       	ld.sh	r0,r0[0x0]
80004166:	3e c4       	mov	r4,-20
80004168:	80 00       	ld.sh	r0,r0[0x0]
8000416a:	3f 44       	mov	r4,-12
8000416c:	00 00       	add	r0,r0
8000416e:	06 6c       	and	r12,r3
80004170:	00 00       	add	r0,r0
80004172:	07 5c       	ld.sh	r12,--r3
80004174:	80 00       	ld.sh	r0,r0[0x0]
80004176:	32 94       	mov	r4,41

80004178 <__avr32_f64_mul>:
80004178:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000417c:	e0 80 00 dc 	breq	80004334 <__avr32_f64_mul_op1_zero>
80004180:	d4 21       	pushm	r4-r7,lr
80004182:	f7 e9 20 0e 	eor	lr,r11,r9
80004186:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000418a:	30 15       	mov	r5,1
8000418c:	c4 30       	breq	80004212 <__avr32_f64_mul_op1_subnormal>
8000418e:	ab 6b       	lsl	r11,0xa
80004190:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80004194:	ab 6a       	lsl	r10,0xa
80004196:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000419a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000419e:	c5 c0       	breq	80004256 <__avr32_f64_mul_op2_subnormal>
800041a0:	a1 78       	lsl	r8,0x1
800041a2:	5c f9       	rol	r9
800041a4:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800041a8:	e0 47 07 ff 	cp.w	r7,2047
800041ac:	c7 70       	breq	8000429a <__avr32_f64_mul_op_nan_or_inf>
800041ae:	e0 46 07 ff 	cp.w	r6,2047
800041b2:	c7 40       	breq	8000429a <__avr32_f64_mul_op_nan_or_inf>
800041b4:	ee 06 00 0c 	add	r12,r7,r6
800041b8:	e0 2c 03 fe 	sub	r12,1022
800041bc:	f6 08 06 44 	mulu.d	r4,r11,r8
800041c0:	f4 09 07 44 	macu.d	r4,r10,r9
800041c4:	f4 08 06 46 	mulu.d	r6,r10,r8
800041c8:	f6 09 06 4a 	mulu.d	r10,r11,r9
800041cc:	08 07       	add	r7,r4
800041ce:	f4 05 00 4a 	adc	r10,r10,r5
800041d2:	5c 0b       	acr	r11
800041d4:	ed bb 00 14 	bld	r11,0x14
800041d8:	c0 50       	breq	800041e2 <__avr32_f64_mul+0x6a>
800041da:	a1 77       	lsl	r7,0x1
800041dc:	5c fa       	rol	r10
800041de:	5c fb       	rol	r11
800041e0:	20 1c       	sub	r12,1
800041e2:	58 0c       	cp.w	r12,0
800041e4:	e0 8a 00 6f 	brle	800042c2 <__avr32_f64_mul_res_subnormal>
800041e8:	e0 4c 07 ff 	cp.w	r12,2047
800041ec:	e0 84 00 9c 	brge	80004324 <__avr32_f64_mul_res_inf>
800041f0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800041f4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800041f8:	ef e6 12 17 	or	r7,r7,r6>>0x1
800041fc:	ee 17 80 00 	eorh	r7,0x8000
80004200:	f1 b7 04 20 	satu	r7,0x1
80004204:	0e 0a       	add	r10,r7
80004206:	5c 0b       	acr	r11
80004208:	ed be 00 1f 	bld	lr,0x1f
8000420c:	ef bb 00 1f 	bst	r11,0x1f
80004210:	d8 22       	popm	r4-r7,pc

80004212 <__avr32_f64_mul_op1_subnormal>:
80004212:	e4 1b 00 0f 	andh	r11,0xf
80004216:	f4 0c 12 00 	clz	r12,r10
8000421a:	f6 06 12 00 	clz	r6,r11
8000421e:	f7 bc 03 e1 	sublo	r12,-31
80004222:	f8 06 17 30 	movlo	r6,r12
80004226:	f7 b6 02 01 	subhs	r6,1
8000422a:	e0 46 00 20 	cp.w	r6,32
8000422e:	c0 d4       	brge	80004248 <__avr32_f64_mul_op1_subnormal+0x36>
80004230:	ec 0c 11 20 	rsub	r12,r6,32
80004234:	f6 06 09 4b 	lsl	r11,r11,r6
80004238:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000423c:	18 4b       	or	r11,r12
8000423e:	f4 06 09 4a 	lsl	r10,r10,r6
80004242:	20 b6       	sub	r6,11
80004244:	0c 17       	sub	r7,r6
80004246:	ca ab       	rjmp	8000419a <__avr32_f64_mul+0x22>
80004248:	f4 06 09 4b 	lsl	r11,r10,r6
8000424c:	c6 40       	breq	80004314 <__avr32_f64_mul_res_zero>
8000424e:	30 0a       	mov	r10,0
80004250:	20 b6       	sub	r6,11
80004252:	0c 17       	sub	r7,r6
80004254:	ca 3b       	rjmp	8000419a <__avr32_f64_mul+0x22>

80004256 <__avr32_f64_mul_op2_subnormal>:
80004256:	e4 19 00 0f 	andh	r9,0xf
8000425a:	f0 0c 12 00 	clz	r12,r8
8000425e:	f2 05 12 00 	clz	r5,r9
80004262:	f7 bc 03 ea 	sublo	r12,-22
80004266:	f8 05 17 30 	movlo	r5,r12
8000426a:	f7 b5 02 0a 	subhs	r5,10
8000426e:	e0 45 00 20 	cp.w	r5,32
80004272:	c0 d4       	brge	8000428c <__avr32_f64_mul_op2_subnormal+0x36>
80004274:	ea 0c 11 20 	rsub	r12,r5,32
80004278:	f2 05 09 49 	lsl	r9,r9,r5
8000427c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80004280:	18 49       	or	r9,r12
80004282:	f0 05 09 48 	lsl	r8,r8,r5
80004286:	20 25       	sub	r5,2
80004288:	0a 16       	sub	r6,r5
8000428a:	c8 fb       	rjmp	800041a8 <__avr32_f64_mul+0x30>
8000428c:	f0 05 09 49 	lsl	r9,r8,r5
80004290:	c4 20       	breq	80004314 <__avr32_f64_mul_res_zero>
80004292:	30 08       	mov	r8,0
80004294:	20 25       	sub	r5,2
80004296:	0a 16       	sub	r6,r5
80004298:	c8 8b       	rjmp	800041a8 <__avr32_f64_mul+0x30>

8000429a <__avr32_f64_mul_op_nan_or_inf>:
8000429a:	e4 19 00 0f 	andh	r9,0xf
8000429e:	e4 1b 00 0f 	andh	r11,0xf
800042a2:	14 4b       	or	r11,r10
800042a4:	10 49       	or	r9,r8
800042a6:	e0 47 07 ff 	cp.w	r7,2047
800042aa:	c0 91       	brne	800042bc <__avr32_f64_mul_op1_not_naninf>
800042ac:	58 0b       	cp.w	r11,0
800042ae:	c3 81       	brne	8000431e <__avr32_f64_mul_res_nan>
800042b0:	e0 46 07 ff 	cp.w	r6,2047
800042b4:	c3 81       	brne	80004324 <__avr32_f64_mul_res_inf>
800042b6:	58 09       	cp.w	r9,0
800042b8:	c3 60       	breq	80004324 <__avr32_f64_mul_res_inf>
800042ba:	c3 28       	rjmp	8000431e <__avr32_f64_mul_res_nan>

800042bc <__avr32_f64_mul_op1_not_naninf>:
800042bc:	58 09       	cp.w	r9,0
800042be:	c3 30       	breq	80004324 <__avr32_f64_mul_res_inf>
800042c0:	c2 f8       	rjmp	8000431e <__avr32_f64_mul_res_nan>

800042c2 <__avr32_f64_mul_res_subnormal>:
800042c2:	5c 3c       	neg	r12
800042c4:	2f fc       	sub	r12,-1
800042c6:	f1 bc 04 c0 	satu	r12,0x6
800042ca:	e0 4c 00 20 	cp.w	r12,32
800042ce:	c1 14       	brge	800042f0 <__avr32_f64_mul_res_subnormal+0x2e>
800042d0:	f8 08 11 20 	rsub	r8,r12,32
800042d4:	0e 46       	or	r6,r7
800042d6:	ee 0c 0a 47 	lsr	r7,r7,r12
800042da:	f4 08 09 49 	lsl	r9,r10,r8
800042de:	12 47       	or	r7,r9
800042e0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800042e4:	f6 08 09 49 	lsl	r9,r11,r8
800042e8:	12 4a       	or	r10,r9
800042ea:	f6 0c 0a 4b 	lsr	r11,r11,r12
800042ee:	c8 3b       	rjmp	800041f4 <__avr32_f64_mul+0x7c>
800042f0:	f8 08 11 20 	rsub	r8,r12,32
800042f4:	f9 b9 00 00 	moveq	r9,0
800042f8:	c0 30       	breq	800042fe <__avr32_f64_mul_res_subnormal+0x3c>
800042fa:	f6 08 09 49 	lsl	r9,r11,r8
800042fe:	0e 46       	or	r6,r7
80004300:	ed ea 10 16 	or	r6,r6,r10<<0x1
80004304:	f4 0c 0a 4a 	lsr	r10,r10,r12
80004308:	f3 ea 10 07 	or	r7,r9,r10
8000430c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80004310:	30 0b       	mov	r11,0
80004312:	c7 1b       	rjmp	800041f4 <__avr32_f64_mul+0x7c>

80004314 <__avr32_f64_mul_res_zero>:
80004314:	1c 9b       	mov	r11,lr
80004316:	e6 1b 80 00 	andh	r11,0x8000,COH
8000431a:	30 0a       	mov	r10,0
8000431c:	d8 22       	popm	r4-r7,pc

8000431e <__avr32_f64_mul_res_nan>:
8000431e:	3f fb       	mov	r11,-1
80004320:	3f fa       	mov	r10,-1
80004322:	d8 22       	popm	r4-r7,pc

80004324 <__avr32_f64_mul_res_inf>:
80004324:	f0 6b 00 00 	mov	r11,-1048576
80004328:	ed be 00 1f 	bld	lr,0x1f
8000432c:	ef bb 00 1f 	bst	r11,0x1f
80004330:	30 0a       	mov	r10,0
80004332:	d8 22       	popm	r4-r7,pc

80004334 <__avr32_f64_mul_op1_zero>:
80004334:	f7 e9 20 0b 	eor	r11,r11,r9
80004338:	e6 1b 80 00 	andh	r11,0x8000,COH
8000433c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80004340:	e0 4c 07 ff 	cp.w	r12,2047
80004344:	5e 1c       	retne	r12
80004346:	3f fa       	mov	r10,-1
80004348:	3f fb       	mov	r11,-1
8000434a:	5e fc       	retal	r12

8000434c <__avr32_f64_sub_from_add>:
8000434c:	ee 19 80 00 	eorh	r9,0x8000

80004350 <__avr32_f64_sub>:
80004350:	f7 e9 20 0c 	eor	r12,r11,r9
80004354:	e0 86 00 ca 	brmi	800044e8 <__avr32_f64_add_from_sub>
80004358:	eb cd 40 e0 	pushm	r5-r7,lr
8000435c:	16 9c       	mov	r12,r11
8000435e:	e6 1c 80 00 	andh	r12,0x8000,COH
80004362:	bf db       	cbr	r11,0x1f
80004364:	bf d9       	cbr	r9,0x1f
80004366:	10 3a       	cp.w	r10,r8
80004368:	f2 0b 13 00 	cpc	r11,r9
8000436c:	c0 92       	brcc	8000437e <__avr32_f64_sub+0x2e>
8000436e:	16 97       	mov	r7,r11
80004370:	12 9b       	mov	r11,r9
80004372:	0e 99       	mov	r9,r7
80004374:	14 97       	mov	r7,r10
80004376:	10 9a       	mov	r10,r8
80004378:	0e 98       	mov	r8,r7
8000437a:	ee 1c 80 00 	eorh	r12,0x8000
8000437e:	f6 07 16 14 	lsr	r7,r11,0x14
80004382:	ab 7b       	lsl	r11,0xb
80004384:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80004388:	ab 7a       	lsl	r10,0xb
8000438a:	bf bb       	sbr	r11,0x1f
8000438c:	f2 06 16 14 	lsr	r6,r9,0x14
80004390:	c4 40       	breq	80004418 <__avr32_f64_sub_opL_subnormal>
80004392:	ab 79       	lsl	r9,0xb
80004394:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80004398:	ab 78       	lsl	r8,0xb
8000439a:	bf b9       	sbr	r9,0x1f

8000439c <__avr32_f64_sub_opL_subnormal_done>:
8000439c:	e0 47 07 ff 	cp.w	r7,2047
800043a0:	c4 f0       	breq	8000443e <__avr32_f64_sub_opH_nan_or_inf>
800043a2:	0e 26       	rsub	r6,r7
800043a4:	c1 20       	breq	800043c8 <__avr32_f64_sub_shift_done>
800043a6:	ec 05 11 20 	rsub	r5,r6,32
800043aa:	e0 46 00 20 	cp.w	r6,32
800043ae:	c7 c2       	brcc	800044a6 <__avr32_f64_sub_longshift>
800043b0:	f0 05 09 4e 	lsl	lr,r8,r5
800043b4:	f2 05 09 45 	lsl	r5,r9,r5
800043b8:	f0 06 0a 48 	lsr	r8,r8,r6
800043bc:	f2 06 0a 49 	lsr	r9,r9,r6
800043c0:	0a 48       	or	r8,r5
800043c2:	58 0e       	cp.w	lr,0
800043c4:	5f 1e       	srne	lr
800043c6:	1c 48       	or	r8,lr

800043c8 <__avr32_f64_sub_shift_done>:
800043c8:	10 1a       	sub	r10,r8
800043ca:	f6 09 01 4b 	sbc	r11,r11,r9
800043ce:	f6 06 12 00 	clz	r6,r11
800043d2:	c0 e0       	breq	800043ee <__avr32_f64_sub_longnormalize_done>
800043d4:	c7 83       	brcs	800044c4 <__avr32_f64_sub_longnormalize>
800043d6:	ec 0e 11 20 	rsub	lr,r6,32
800043da:	f6 06 09 4b 	lsl	r11,r11,r6
800043de:	f4 0e 0a 4e 	lsr	lr,r10,lr
800043e2:	1c 4b       	or	r11,lr
800043e4:	f4 06 09 4a 	lsl	r10,r10,r6
800043e8:	0c 17       	sub	r7,r6
800043ea:	e0 8a 00 39 	brle	8000445c <__avr32_f64_sub_subnormal_result>

800043ee <__avr32_f64_sub_longnormalize_done>:
800043ee:	f4 09 15 15 	lsl	r9,r10,0x15
800043f2:	ab 9a       	lsr	r10,0xb
800043f4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800043f8:	ab 9b       	lsr	r11,0xb
800043fa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800043fe:	18 4b       	or	r11,r12

80004400 <__avr32_f64_sub_round>:
80004400:	fc 17 80 00 	movh	r7,0x8000
80004404:	ed ba 00 00 	bld	r10,0x0
80004408:	f7 b7 01 ff 	subne	r7,-1
8000440c:	0e 39       	cp.w	r9,r7
8000440e:	5f 29       	srhs	r9
80004410:	12 0a       	add	r10,r9
80004412:	5c 0b       	acr	r11
80004414:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004418 <__avr32_f64_sub_opL_subnormal>:
80004418:	ab 79       	lsl	r9,0xb
8000441a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000441e:	ab 78       	lsl	r8,0xb
80004420:	f3 e8 10 0e 	or	lr,r9,r8
80004424:	f9 b6 01 01 	movne	r6,1
80004428:	ee 0e 11 00 	rsub	lr,r7,0
8000442c:	f9 b7 00 01 	moveq	r7,1
80004430:	ef bb 00 1f 	bst	r11,0x1f
80004434:	f7 ea 10 0e 	or	lr,r11,r10
80004438:	f9 b7 00 00 	moveq	r7,0
8000443c:	cb 0b       	rjmp	8000439c <__avr32_f64_sub_opL_subnormal_done>

8000443e <__avr32_f64_sub_opH_nan_or_inf>:
8000443e:	bf db       	cbr	r11,0x1f
80004440:	f7 ea 10 0e 	or	lr,r11,r10
80004444:	c0 81       	brne	80004454 <__avr32_f64_sub_return_nan>
80004446:	e0 46 07 ff 	cp.w	r6,2047
8000444a:	c0 50       	breq	80004454 <__avr32_f64_sub_return_nan>
8000444c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80004450:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004454 <__avr32_f64_sub_return_nan>:
80004454:	3f fa       	mov	r10,-1
80004456:	3f fb       	mov	r11,-1
80004458:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000445c <__avr32_f64_sub_subnormal_result>:
8000445c:	5c 37       	neg	r7
8000445e:	2f f7       	sub	r7,-1
80004460:	f1 b7 04 c0 	satu	r7,0x6
80004464:	e0 47 00 20 	cp.w	r7,32
80004468:	c1 14       	brge	8000448a <__avr32_f64_sub_subnormal_result+0x2e>
8000446a:	ee 08 11 20 	rsub	r8,r7,32
8000446e:	f4 08 09 49 	lsl	r9,r10,r8
80004472:	5f 16       	srne	r6
80004474:	f4 07 0a 4a 	lsr	r10,r10,r7
80004478:	0c 4a       	or	r10,r6
8000447a:	f6 08 09 49 	lsl	r9,r11,r8
8000447e:	f5 e9 10 0a 	or	r10,r10,r9
80004482:	f4 07 0a 4b 	lsr	r11,r10,r7
80004486:	30 07       	mov	r7,0
80004488:	cb 3b       	rjmp	800043ee <__avr32_f64_sub_longnormalize_done>
8000448a:	ee 08 11 40 	rsub	r8,r7,64
8000448e:	f6 08 09 49 	lsl	r9,r11,r8
80004492:	14 49       	or	r9,r10
80004494:	5f 16       	srne	r6
80004496:	f6 07 0a 4a 	lsr	r10,r11,r7
8000449a:	0c 4a       	or	r10,r6
8000449c:	30 0b       	mov	r11,0
8000449e:	30 07       	mov	r7,0
800044a0:	ca 7b       	rjmp	800043ee <__avr32_f64_sub_longnormalize_done>
800044a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800044a6 <__avr32_f64_sub_longshift>:
800044a6:	f1 b6 04 c0 	satu	r6,0x6
800044aa:	f0 0e 17 00 	moveq	lr,r8
800044ae:	c0 40       	breq	800044b6 <__avr32_f64_sub_longshift+0x10>
800044b0:	f2 05 09 4e 	lsl	lr,r9,r5
800044b4:	10 4e       	or	lr,r8
800044b6:	f2 06 0a 48 	lsr	r8,r9,r6
800044ba:	30 09       	mov	r9,0
800044bc:	58 0e       	cp.w	lr,0
800044be:	5f 1e       	srne	lr
800044c0:	1c 48       	or	r8,lr
800044c2:	c8 3b       	rjmp	800043c8 <__avr32_f64_sub_shift_done>

800044c4 <__avr32_f64_sub_longnormalize>:
800044c4:	f4 06 12 00 	clz	r6,r10
800044c8:	f9 b7 03 00 	movlo	r7,0
800044cc:	f9 b6 03 00 	movlo	r6,0
800044d0:	f9 bc 03 00 	movlo	r12,0
800044d4:	f7 b6 02 e0 	subhs	r6,-32
800044d8:	f4 06 09 4b 	lsl	r11,r10,r6
800044dc:	30 0a       	mov	r10,0
800044de:	0c 17       	sub	r7,r6
800044e0:	fe 9a ff be 	brle	8000445c <__avr32_f64_sub_subnormal_result>
800044e4:	c8 5b       	rjmp	800043ee <__avr32_f64_sub_longnormalize_done>
800044e6:	d7 03       	nop

800044e8 <__avr32_f64_add_from_sub>:
800044e8:	ee 19 80 00 	eorh	r9,0x8000

800044ec <__avr32_f64_add>:
800044ec:	f7 e9 20 0c 	eor	r12,r11,r9
800044f0:	fe 96 ff 2e 	brmi	8000434c <__avr32_f64_sub_from_add>
800044f4:	eb cd 40 e0 	pushm	r5-r7,lr
800044f8:	16 9c       	mov	r12,r11
800044fa:	e6 1c 80 00 	andh	r12,0x8000,COH
800044fe:	bf db       	cbr	r11,0x1f
80004500:	bf d9       	cbr	r9,0x1f
80004502:	12 3b       	cp.w	r11,r9
80004504:	c0 72       	brcc	80004512 <__avr32_f64_add+0x26>
80004506:	16 97       	mov	r7,r11
80004508:	12 9b       	mov	r11,r9
8000450a:	0e 99       	mov	r9,r7
8000450c:	14 97       	mov	r7,r10
8000450e:	10 9a       	mov	r10,r8
80004510:	0e 98       	mov	r8,r7
80004512:	30 0e       	mov	lr,0
80004514:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80004518:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000451c:	b5 ab       	sbr	r11,0x14
8000451e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80004522:	c6 20       	breq	800045e6 <__avr32_f64_add_op2_subnormal>
80004524:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80004528:	b5 a9       	sbr	r9,0x14
8000452a:	e0 47 07 ff 	cp.w	r7,2047
8000452e:	c2 80       	breq	8000457e <__avr32_f64_add_opH_nan_or_inf>
80004530:	0e 26       	rsub	r6,r7
80004532:	c1 20       	breq	80004556 <__avr32_f64_add_shift_done>
80004534:	e0 46 00 36 	cp.w	r6,54
80004538:	c1 52       	brcc	80004562 <__avr32_f64_add_res_of_done>
8000453a:	ec 05 11 20 	rsub	r5,r6,32
8000453e:	e0 46 00 20 	cp.w	r6,32
80004542:	c3 52       	brcc	800045ac <__avr32_f64_add_longshift>
80004544:	f0 05 09 4e 	lsl	lr,r8,r5
80004548:	f2 05 09 45 	lsl	r5,r9,r5
8000454c:	f0 06 0a 48 	lsr	r8,r8,r6
80004550:	f2 06 0a 49 	lsr	r9,r9,r6
80004554:	0a 48       	or	r8,r5

80004556 <__avr32_f64_add_shift_done>:
80004556:	10 0a       	add	r10,r8
80004558:	f6 09 00 4b 	adc	r11,r11,r9
8000455c:	ed bb 00 15 	bld	r11,0x15
80004560:	c3 40       	breq	800045c8 <__avr32_f64_add_res_of>

80004562 <__avr32_f64_add_res_of_done>:
80004562:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80004566:	18 4b       	or	r11,r12

80004568 <__avr32_f64_add_round>:
80004568:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000456c:	18 4e       	or	lr,r12
8000456e:	ee 1e 80 00 	eorh	lr,0x8000
80004572:	f1 be 04 20 	satu	lr,0x1
80004576:	1c 0a       	add	r10,lr
80004578:	5c 0b       	acr	r11
8000457a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000457e <__avr32_f64_add_opH_nan_or_inf>:
8000457e:	b5 cb       	cbr	r11,0x14
80004580:	f7 ea 10 0e 	or	lr,r11,r10
80004584:	c1 01       	brne	800045a4 <__avr32_f64_add_return_nan>
80004586:	e0 46 07 ff 	cp.w	r6,2047
8000458a:	c0 30       	breq	80004590 <__avr32_f64_add_opL_nan_or_inf>
8000458c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80004590 <__avr32_f64_add_opL_nan_or_inf>:
80004590:	b5 c9       	cbr	r9,0x14
80004592:	f3 e8 10 0e 	or	lr,r9,r8
80004596:	c0 71       	brne	800045a4 <__avr32_f64_add_return_nan>
80004598:	30 0a       	mov	r10,0
8000459a:	fc 1b 7f f0 	movh	r11,0x7ff0
8000459e:	18 4b       	or	r11,r12
800045a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800045a4 <__avr32_f64_add_return_nan>:
800045a4:	3f fa       	mov	r10,-1
800045a6:	3f fb       	mov	r11,-1
800045a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800045ac <__avr32_f64_add_longshift>:
800045ac:	f1 b6 04 c0 	satu	r6,0x6
800045b0:	f0 0e 17 00 	moveq	lr,r8
800045b4:	c0 60       	breq	800045c0 <__avr32_f64_add_longshift+0x14>
800045b6:	f2 05 09 4e 	lsl	lr,r9,r5
800045ba:	58 08       	cp.w	r8,0
800045bc:	5f 18       	srne	r8
800045be:	10 4e       	or	lr,r8
800045c0:	f2 06 0a 48 	lsr	r8,r9,r6
800045c4:	30 09       	mov	r9,0
800045c6:	cc 8b       	rjmp	80004556 <__avr32_f64_add_shift_done>

800045c8 <__avr32_f64_add_res_of>:
800045c8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800045cc:	a1 9b       	lsr	r11,0x1
800045ce:	5d 0a       	ror	r10
800045d0:	5d 0e       	ror	lr
800045d2:	2f f7       	sub	r7,-1
800045d4:	e0 47 07 ff 	cp.w	r7,2047
800045d8:	f9 ba 00 00 	moveq	r10,0
800045dc:	f9 bb 00 00 	moveq	r11,0
800045e0:	f9 be 00 00 	moveq	lr,0
800045e4:	cb fb       	rjmp	80004562 <__avr32_f64_add_res_of_done>

800045e6 <__avr32_f64_add_op2_subnormal>:
800045e6:	30 16       	mov	r6,1
800045e8:	58 07       	cp.w	r7,0
800045ea:	ca 01       	brne	8000452a <__avr32_f64_add+0x3e>
800045ec:	b5 cb       	cbr	r11,0x14
800045ee:	10 0a       	add	r10,r8
800045f0:	f6 09 00 4b 	adc	r11,r11,r9
800045f4:	18 4b       	or	r11,r12
800045f6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800045fa:	d7 03       	nop

800045fc <__avr32_f64_to_u32>:
800045fc:	58 0b       	cp.w	r11,0
800045fe:	5e 6d       	retmi	0

80004600 <__avr32_f64_to_s32>:
80004600:	f6 0c 15 01 	lsl	r12,r11,0x1
80004604:	b5 9c       	lsr	r12,0x15
80004606:	e0 2c 03 ff 	sub	r12,1023
8000460a:	5e 3d       	retlo	0
8000460c:	f8 0c 11 1f 	rsub	r12,r12,31
80004610:	16 99       	mov	r9,r11
80004612:	ab 7b       	lsl	r11,0xb
80004614:	bf bb       	sbr	r11,0x1f
80004616:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000461a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000461e:	a1 79       	lsl	r9,0x1
80004620:	5e 2b       	reths	r11
80004622:	5c 3b       	neg	r11
80004624:	5e fb       	retal	r11

80004626 <__avr32_u32_to_f64>:
80004626:	f8 cb 00 00 	sub	r11,r12,0
8000462a:	30 0c       	mov	r12,0
8000462c:	c0 38       	rjmp	80004632 <__avr32_s32_to_f64+0x4>

8000462e <__avr32_s32_to_f64>:
8000462e:	18 9b       	mov	r11,r12
80004630:	5c 4b       	abs	r11
80004632:	30 0a       	mov	r10,0
80004634:	5e 0b       	reteq	r11
80004636:	d4 01       	pushm	lr
80004638:	e0 69 04 1e 	mov	r9,1054
8000463c:	f6 08 12 00 	clz	r8,r11
80004640:	c1 70       	breq	8000466e <__avr32_s32_to_f64+0x40>
80004642:	c0 c3       	brcs	8000465a <__avr32_s32_to_f64+0x2c>
80004644:	f0 0e 11 20 	rsub	lr,r8,32
80004648:	f6 08 09 4b 	lsl	r11,r11,r8
8000464c:	f4 0e 0a 4e 	lsr	lr,r10,lr
80004650:	1c 4b       	or	r11,lr
80004652:	f4 08 09 4a 	lsl	r10,r10,r8
80004656:	10 19       	sub	r9,r8
80004658:	c0 b8       	rjmp	8000466e <__avr32_s32_to_f64+0x40>
8000465a:	f4 08 12 00 	clz	r8,r10
8000465e:	f9 b8 03 00 	movlo	r8,0
80004662:	f7 b8 02 e0 	subhs	r8,-32
80004666:	f4 08 09 4b 	lsl	r11,r10,r8
8000466a:	30 0a       	mov	r10,0
8000466c:	10 19       	sub	r9,r8
8000466e:	58 09       	cp.w	r9,0
80004670:	e0 89 00 30 	brgt	800046d0 <__avr32_s32_to_f64+0xa2>
80004674:	5c 39       	neg	r9
80004676:	2f f9       	sub	r9,-1
80004678:	e0 49 00 36 	cp.w	r9,54
8000467c:	c0 43       	brcs	80004684 <__avr32_s32_to_f64+0x56>
8000467e:	30 0b       	mov	r11,0
80004680:	30 0a       	mov	r10,0
80004682:	c2 68       	rjmp	800046ce <__avr32_s32_to_f64+0xa0>
80004684:	2f 69       	sub	r9,-10
80004686:	f2 08 11 20 	rsub	r8,r9,32
8000468a:	e0 49 00 20 	cp.w	r9,32
8000468e:	c0 b2       	brcc	800046a4 <__avr32_s32_to_f64+0x76>
80004690:	f4 08 09 4e 	lsl	lr,r10,r8
80004694:	f6 08 09 48 	lsl	r8,r11,r8
80004698:	f4 09 0a 4a 	lsr	r10,r10,r9
8000469c:	f6 09 0a 4b 	lsr	r11,r11,r9
800046a0:	10 4b       	or	r11,r8
800046a2:	c0 88       	rjmp	800046b2 <__avr32_s32_to_f64+0x84>
800046a4:	f6 08 09 4e 	lsl	lr,r11,r8
800046a8:	14 4e       	or	lr,r10
800046aa:	16 9a       	mov	r10,r11
800046ac:	30 0b       	mov	r11,0
800046ae:	f4 09 0a 4a 	lsr	r10,r10,r9
800046b2:	ed ba 00 00 	bld	r10,0x0
800046b6:	c0 92       	brcc	800046c8 <__avr32_s32_to_f64+0x9a>
800046b8:	1c 7e       	tst	lr,lr
800046ba:	c0 41       	brne	800046c2 <__avr32_s32_to_f64+0x94>
800046bc:	ed ba 00 01 	bld	r10,0x1
800046c0:	c0 42       	brcc	800046c8 <__avr32_s32_to_f64+0x9a>
800046c2:	2f fa       	sub	r10,-1
800046c4:	f7 bb 02 ff 	subhs	r11,-1
800046c8:	5c fc       	rol	r12
800046ca:	5d 0b       	ror	r11
800046cc:	5d 0a       	ror	r10
800046ce:	d8 02       	popm	pc
800046d0:	e0 68 03 ff 	mov	r8,1023
800046d4:	ed ba 00 0b 	bld	r10,0xb
800046d8:	f7 b8 00 ff 	subeq	r8,-1
800046dc:	10 0a       	add	r10,r8
800046de:	5c 0b       	acr	r11
800046e0:	f7 b9 03 fe 	sublo	r9,-2
800046e4:	e0 49 07 ff 	cp.w	r9,2047
800046e8:	c0 55       	brlt	800046f2 <__avr32_s32_to_f64+0xc4>
800046ea:	30 0a       	mov	r10,0
800046ec:	fc 1b ff e0 	movh	r11,0xffe0
800046f0:	c0 c8       	rjmp	80004708 <__floatsidf_return_op1>
800046f2:	ed bb 00 1f 	bld	r11,0x1f
800046f6:	f7 b9 01 01 	subne	r9,1
800046fa:	ab 9a       	lsr	r10,0xb
800046fc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80004700:	a1 7b       	lsl	r11,0x1
80004702:	ab 9b       	lsr	r11,0xb
80004704:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80004708 <__floatsidf_return_op1>:
80004708:	a1 7c       	lsl	r12,0x1
8000470a:	5d 0b       	ror	r11
8000470c:	d8 02       	popm	pc

8000470e <__avr32_f64_cmp_lt>:
8000470e:	1a de       	st.w	--sp,lr
80004710:	1a d7       	st.w	--sp,r7
80004712:	a1 7b       	lsl	r11,0x1
80004714:	5f 3c       	srlo	r12
80004716:	a1 79       	lsl	r9,0x1
80004718:	5f 37       	srlo	r7
8000471a:	5c fc       	rol	r12
8000471c:	fc 1e ff e0 	movh	lr,0xffe0
80004720:	58 0a       	cp.w	r10,0
80004722:	fc 0b 13 00 	cpc	r11,lr
80004726:	e0 8b 00 1d 	brhi	80004760 <__avr32_f64_cmp_lt+0x52>
8000472a:	58 08       	cp.w	r8,0
8000472c:	fc 09 13 00 	cpc	r9,lr
80004730:	e0 8b 00 18 	brhi	80004760 <__avr32_f64_cmp_lt+0x52>
80004734:	58 0b       	cp.w	r11,0
80004736:	f5 ba 00 00 	subfeq	r10,0
8000473a:	c1 50       	breq	80004764 <__avr32_f64_cmp_lt+0x56>
8000473c:	1b 07       	ld.w	r7,sp++
8000473e:	1b 0e       	ld.w	lr,sp++
80004740:	58 3c       	cp.w	r12,3
80004742:	c0 a0       	breq	80004756 <__avr32_f64_cmp_lt+0x48>
80004744:	58 1c       	cp.w	r12,1
80004746:	c0 33       	brcs	8000474c <__avr32_f64_cmp_lt+0x3e>
80004748:	5e 0d       	reteq	0
8000474a:	5e 1f       	retne	1
8000474c:	10 3a       	cp.w	r10,r8
8000474e:	f2 0b 13 00 	cpc	r11,r9
80004752:	5e 2d       	reths	0
80004754:	5e 3f       	retlo	1
80004756:	14 38       	cp.w	r8,r10
80004758:	f6 09 13 00 	cpc	r9,r11
8000475c:	5e 2d       	reths	0
8000475e:	5e 3f       	retlo	1
80004760:	1b 07       	ld.w	r7,sp++
80004762:	d8 0a       	popm	pc,r12=0
80004764:	58 17       	cp.w	r7,1
80004766:	5f 1c       	srne	r12
80004768:	58 09       	cp.w	r9,0
8000476a:	f5 b8 00 00 	subfeq	r8,0
8000476e:	1b 07       	ld.w	r7,sp++
80004770:	1b 0e       	ld.w	lr,sp++
80004772:	5e 0d       	reteq	0
80004774:	5e fc       	retal	r12
80004776:	d7 03       	nop

80004778 <__avr32_f64_div>:
80004778:	eb cd 40 ff 	pushm	r0-r7,lr
8000477c:	f7 e9 20 0e 	eor	lr,r11,r9
80004780:	f6 07 16 14 	lsr	r7,r11,0x14
80004784:	a9 7b       	lsl	r11,0x9
80004786:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000478a:	a9 7a       	lsl	r10,0x9
8000478c:	bd bb       	sbr	r11,0x1d
8000478e:	e4 1b 3f ff 	andh	r11,0x3fff
80004792:	ab d7       	cbr	r7,0xb
80004794:	e0 80 00 cc 	breq	8000492c <__avr32_f64_div_round_subnormal+0x54>
80004798:	e0 47 07 ff 	cp.w	r7,2047
8000479c:	e0 84 00 b5 	brge	80004906 <__avr32_f64_div_round_subnormal+0x2e>
800047a0:	f2 06 16 14 	lsr	r6,r9,0x14
800047a4:	a9 79       	lsl	r9,0x9
800047a6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800047aa:	a9 78       	lsl	r8,0x9
800047ac:	bd b9       	sbr	r9,0x1d
800047ae:	e4 19 3f ff 	andh	r9,0x3fff
800047b2:	ab d6       	cbr	r6,0xb
800047b4:	e0 80 00 e2 	breq	80004978 <__avr32_f64_div_round_subnormal+0xa0>
800047b8:	e0 46 07 ff 	cp.w	r6,2047
800047bc:	e0 84 00 b2 	brge	80004920 <__avr32_f64_div_round_subnormal+0x48>
800047c0:	0c 17       	sub	r7,r6
800047c2:	fe 37 fc 01 	sub	r7,-1023
800047c6:	fc 1c 80 00 	movh	r12,0x8000
800047ca:	f8 03 16 01 	lsr	r3,r12,0x1
800047ce:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800047d2:	5c d4       	com	r4
800047d4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800047d8:	e6 09 06 44 	mulu.d	r4,r3,r9
800047dc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800047e0:	e6 05 06 44 	mulu.d	r4,r3,r5
800047e4:	ea 03 15 02 	lsl	r3,r5,0x2
800047e8:	e6 09 06 44 	mulu.d	r4,r3,r9
800047ec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800047f0:	e6 05 06 44 	mulu.d	r4,r3,r5
800047f4:	ea 03 15 02 	lsl	r3,r5,0x2
800047f8:	e6 09 06 44 	mulu.d	r4,r3,r9
800047fc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80004800:	e6 05 06 44 	mulu.d	r4,r3,r5
80004804:	ea 03 15 02 	lsl	r3,r5,0x2
80004808:	e6 08 06 40 	mulu.d	r0,r3,r8
8000480c:	e4 09 07 40 	macu.d	r0,r2,r9
80004810:	e6 09 06 44 	mulu.d	r4,r3,r9
80004814:	02 04       	add	r4,r1
80004816:	5c 05       	acr	r5
80004818:	a3 65       	lsl	r5,0x2
8000481a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000481e:	a3 64       	lsl	r4,0x2
80004820:	5c 34       	neg	r4
80004822:	f8 05 01 45 	sbc	r5,r12,r5
80004826:	e6 04 06 40 	mulu.d	r0,r3,r4
8000482a:	e4 05 07 40 	macu.d	r0,r2,r5
8000482e:	e6 05 06 44 	mulu.d	r4,r3,r5
80004832:	02 04       	add	r4,r1
80004834:	5c 05       	acr	r5
80004836:	ea 03 15 02 	lsl	r3,r5,0x2
8000483a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000483e:	e8 02 15 02 	lsl	r2,r4,0x2
80004842:	e6 08 06 40 	mulu.d	r0,r3,r8
80004846:	e4 09 07 40 	macu.d	r0,r2,r9
8000484a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000484e:	02 04       	add	r4,r1
80004850:	5c 05       	acr	r5
80004852:	a3 65       	lsl	r5,0x2
80004854:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80004858:	a3 64       	lsl	r4,0x2
8000485a:	5c 34       	neg	r4
8000485c:	f8 05 01 45 	sbc	r5,r12,r5
80004860:	e6 04 06 40 	mulu.d	r0,r3,r4
80004864:	e4 05 07 40 	macu.d	r0,r2,r5
80004868:	e6 05 06 44 	mulu.d	r4,r3,r5
8000486c:	02 04       	add	r4,r1
8000486e:	5c 05       	acr	r5
80004870:	ea 03 15 02 	lsl	r3,r5,0x2
80004874:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80004878:	e8 02 15 02 	lsl	r2,r4,0x2
8000487c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80004880:	e4 0b 07 40 	macu.d	r0,r2,r11
80004884:	e6 0b 06 42 	mulu.d	r2,r3,r11
80004888:	02 02       	add	r2,r1
8000488a:	5c 03       	acr	r3
8000488c:	ed b3 00 1c 	bld	r3,0x1c
80004890:	c0 90       	breq	800048a2 <__avr32_f64_div+0x12a>
80004892:	a1 72       	lsl	r2,0x1
80004894:	5c f3       	rol	r3
80004896:	20 17       	sub	r7,1
80004898:	a3 9a       	lsr	r10,0x3
8000489a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000489e:	a3 9b       	lsr	r11,0x3
800048a0:	c0 58       	rjmp	800048aa <__avr32_f64_div+0x132>
800048a2:	a5 8a       	lsr	r10,0x4
800048a4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800048a8:	a5 8b       	lsr	r11,0x4
800048aa:	58 07       	cp.w	r7,0
800048ac:	e0 8a 00 8b 	brle	800049c2 <__avr32_f64_div_res_subnormal>
800048b0:	e0 12 ff 00 	andl	r2,0xff00
800048b4:	e8 12 00 80 	orl	r2,0x80
800048b8:	e6 08 06 40 	mulu.d	r0,r3,r8
800048bc:	e4 09 07 40 	macu.d	r0,r2,r9
800048c0:	e4 08 06 44 	mulu.d	r4,r2,r8
800048c4:	e6 09 06 48 	mulu.d	r8,r3,r9
800048c8:	00 05       	add	r5,r0
800048ca:	f0 01 00 48 	adc	r8,r8,r1
800048ce:	5c 09       	acr	r9
800048d0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800048d4:	58 04       	cp.w	r4,0
800048d6:	5c 25       	cpc	r5

800048d8 <__avr32_f64_div_round_subnormal>:
800048d8:	f4 08 13 00 	cpc	r8,r10
800048dc:	f6 09 13 00 	cpc	r9,r11
800048e0:	5f 36       	srlo	r6
800048e2:	f8 06 17 00 	moveq	r6,r12
800048e6:	e4 0a 16 08 	lsr	r10,r2,0x8
800048ea:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800048ee:	e6 0b 16 08 	lsr	r11,r3,0x8
800048f2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800048f6:	ed be 00 1f 	bld	lr,0x1f
800048fa:	ef bb 00 1f 	bst	r11,0x1f
800048fe:	0c 0a       	add	r10,r6
80004900:	5c 0b       	acr	r11
80004902:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80004906:	e4 1b 00 0f 	andh	r11,0xf
8000490a:	14 4b       	or	r11,r10
8000490c:	e0 81 00 a7 	brne	80004a5a <__avr32_f64_div_res_subnormal+0x98>
80004910:	f2 06 16 14 	lsr	r6,r9,0x14
80004914:	ab d6       	cbr	r6,0xb
80004916:	e0 46 07 ff 	cp.w	r6,2047
8000491a:	e0 81 00 a4 	brne	80004a62 <__avr32_f64_div_res_subnormal+0xa0>
8000491e:	c9 e8       	rjmp	80004a5a <__avr32_f64_div_res_subnormal+0x98>
80004920:	e4 19 00 0f 	andh	r9,0xf
80004924:	10 49       	or	r9,r8
80004926:	e0 81 00 9a 	brne	80004a5a <__avr32_f64_div_res_subnormal+0x98>
8000492a:	c9 28       	rjmp	80004a4e <__avr32_f64_div_res_subnormal+0x8c>
8000492c:	a3 7b       	lsl	r11,0x3
8000492e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80004932:	a3 7a       	lsl	r10,0x3
80004934:	f5 eb 10 04 	or	r4,r10,r11
80004938:	e0 80 00 a0 	breq	80004a78 <__avr32_f64_div_op1_zero>
8000493c:	f6 04 12 00 	clz	r4,r11
80004940:	c1 70       	breq	8000496e <__avr32_f64_div_round_subnormal+0x96>
80004942:	c0 c3       	brcs	8000495a <__avr32_f64_div_round_subnormal+0x82>
80004944:	e8 05 11 20 	rsub	r5,r4,32
80004948:	f6 04 09 4b 	lsl	r11,r11,r4
8000494c:	f4 05 0a 45 	lsr	r5,r10,r5
80004950:	0a 4b       	or	r11,r5
80004952:	f4 04 09 4a 	lsl	r10,r10,r4
80004956:	08 17       	sub	r7,r4
80004958:	c0 b8       	rjmp	8000496e <__avr32_f64_div_round_subnormal+0x96>
8000495a:	f4 04 12 00 	clz	r4,r10
8000495e:	f9 b4 03 00 	movlo	r4,0
80004962:	f7 b4 02 e0 	subhs	r4,-32
80004966:	f4 04 09 4b 	lsl	r11,r10,r4
8000496a:	30 0a       	mov	r10,0
8000496c:	08 17       	sub	r7,r4
8000496e:	a3 8a       	lsr	r10,0x2
80004970:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80004974:	a3 8b       	lsr	r11,0x2
80004976:	c1 1b       	rjmp	80004798 <__avr32_f64_div+0x20>
80004978:	a3 79       	lsl	r9,0x3
8000497a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000497e:	a3 78       	lsl	r8,0x3
80004980:	f3 e8 10 04 	or	r4,r9,r8
80004984:	c6 f0       	breq	80004a62 <__avr32_f64_div_res_subnormal+0xa0>
80004986:	f2 04 12 00 	clz	r4,r9
8000498a:	c1 70       	breq	800049b8 <__avr32_f64_div_round_subnormal+0xe0>
8000498c:	c0 c3       	brcs	800049a4 <__avr32_f64_div_round_subnormal+0xcc>
8000498e:	e8 05 11 20 	rsub	r5,r4,32
80004992:	f2 04 09 49 	lsl	r9,r9,r4
80004996:	f0 05 0a 45 	lsr	r5,r8,r5
8000499a:	0a 49       	or	r9,r5
8000499c:	f0 04 09 48 	lsl	r8,r8,r4
800049a0:	08 16       	sub	r6,r4
800049a2:	c0 b8       	rjmp	800049b8 <__avr32_f64_div_round_subnormal+0xe0>
800049a4:	f0 04 12 00 	clz	r4,r8
800049a8:	f9 b4 03 00 	movlo	r4,0
800049ac:	f7 b4 02 e0 	subhs	r4,-32
800049b0:	f0 04 09 49 	lsl	r9,r8,r4
800049b4:	30 08       	mov	r8,0
800049b6:	08 16       	sub	r6,r4
800049b8:	a3 88       	lsr	r8,0x2
800049ba:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800049be:	a3 89       	lsr	r9,0x2
800049c0:	cf ca       	rjmp	800047b8 <__avr32_f64_div+0x40>

800049c2 <__avr32_f64_div_res_subnormal>:
800049c2:	5c 37       	neg	r7
800049c4:	2f f7       	sub	r7,-1
800049c6:	f1 b7 04 c0 	satu	r7,0x6
800049ca:	e0 47 00 20 	cp.w	r7,32
800049ce:	c1 54       	brge	800049f8 <__avr32_f64_div_res_subnormal+0x36>
800049d0:	ee 06 11 20 	rsub	r6,r7,32
800049d4:	e4 07 0a 42 	lsr	r2,r2,r7
800049d8:	e6 06 09 4c 	lsl	r12,r3,r6
800049dc:	18 42       	or	r2,r12
800049de:	e6 07 0a 43 	lsr	r3,r3,r7
800049e2:	f4 06 09 41 	lsl	r1,r10,r6
800049e6:	f4 07 0a 4a 	lsr	r10,r10,r7
800049ea:	f6 06 09 4c 	lsl	r12,r11,r6
800049ee:	18 4a       	or	r10,r12
800049f0:	f6 07 0a 4b 	lsr	r11,r11,r7
800049f4:	30 00       	mov	r0,0
800049f6:	c1 58       	rjmp	80004a20 <__avr32_f64_div_res_subnormal+0x5e>
800049f8:	ee 06 11 20 	rsub	r6,r7,32
800049fc:	f9 b0 00 00 	moveq	r0,0
80004a00:	f9 bc 00 00 	moveq	r12,0
80004a04:	c0 50       	breq	80004a0e <__avr32_f64_div_res_subnormal+0x4c>
80004a06:	f4 06 09 40 	lsl	r0,r10,r6
80004a0a:	f6 06 09 4c 	lsl	r12,r11,r6
80004a0e:	e6 07 0a 42 	lsr	r2,r3,r7
80004a12:	30 03       	mov	r3,0
80004a14:	f4 07 0a 41 	lsr	r1,r10,r7
80004a18:	18 41       	or	r1,r12
80004a1a:	f6 07 0a 4a 	lsr	r10,r11,r7
80004a1e:	30 0b       	mov	r11,0
80004a20:	e0 12 ff 00 	andl	r2,0xff00
80004a24:	e8 12 00 80 	orl	r2,0x80
80004a28:	e6 08 06 46 	mulu.d	r6,r3,r8
80004a2c:	e4 09 07 46 	macu.d	r6,r2,r9
80004a30:	e4 08 06 44 	mulu.d	r4,r2,r8
80004a34:	e6 09 06 48 	mulu.d	r8,r3,r9
80004a38:	0c 05       	add	r5,r6
80004a3a:	f0 07 00 48 	adc	r8,r8,r7
80004a3e:	5c 09       	acr	r9
80004a40:	30 07       	mov	r7,0
80004a42:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80004a46:	00 34       	cp.w	r4,r0
80004a48:	e2 05 13 00 	cpc	r5,r1
80004a4c:	c4 6b       	rjmp	800048d8 <__avr32_f64_div_round_subnormal>
80004a4e:	1c 9b       	mov	r11,lr
80004a50:	e6 1b 80 00 	andh	r11,0x8000,COH
80004a54:	30 0a       	mov	r10,0
80004a56:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80004a5a:	3f fb       	mov	r11,-1
80004a5c:	30 0a       	mov	r10,0
80004a5e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80004a62:	f5 eb 10 04 	or	r4,r10,r11
80004a66:	c0 90       	breq	80004a78 <__avr32_f64_div_op1_zero>
80004a68:	1c 9b       	mov	r11,lr
80004a6a:	e6 1b 80 00 	andh	r11,0x8000,COH
80004a6e:	ea 1b 7f f0 	orh	r11,0x7ff0
80004a72:	30 0a       	mov	r10,0
80004a74:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80004a78 <__avr32_f64_div_op1_zero>:
80004a78:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80004a7c:	ce f0       	breq	80004a5a <__avr32_f64_div_res_subnormal+0x98>
80004a7e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80004a82:	e0 44 07 ff 	cp.w	r4,2047
80004a86:	ce 41       	brne	80004a4e <__avr32_f64_div_res_subnormal+0x8c>
80004a88:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80004a8c:	ce 10       	breq	80004a4e <__avr32_f64_div_res_subnormal+0x8c>
80004a8e:	ce 6b       	rjmp	80004a5a <__avr32_f64_div_res_subnormal+0x98>

80004a90 <atexit>:
80004a90:	d4 01       	pushm	lr
80004a92:	30 09       	mov	r9,0
80004a94:	18 9b       	mov	r11,r12
80004a96:	12 9a       	mov	r10,r9
80004a98:	12 9c       	mov	r12,r9
80004a9a:	e0 a0 16 8d 	rcall	800077b4 <__register_exitproc>
80004a9e:	d8 02       	popm	pc

80004aa0 <exit>:
80004aa0:	d4 21       	pushm	r4-r7,lr
80004aa2:	30 0b       	mov	r11,0
80004aa4:	18 97       	mov	r7,r12
80004aa6:	e0 a0 16 d9 	rcall	80007858 <__call_exitprocs>
80004aaa:	fe c8 a7 be 	sub	r8,pc,-22594
80004aae:	70 0c       	ld.w	r12,r8[0x0]
80004ab0:	78 a8       	ld.w	r8,r12[0x28]
80004ab2:	58 08       	cp.w	r8,0
80004ab4:	c0 20       	breq	80004ab8 <exit+0x18>
80004ab6:	5d 18       	icall	r8
80004ab8:	0e 9c       	mov	r12,r7
80004aba:	e0 a0 04 7e 	rcall	800053b6 <_exit>
80004abe:	d7 03       	nop

80004ac0 <free>:
80004ac0:	d4 01       	pushm	lr
80004ac2:	e0 68 01 1c 	mov	r8,284
80004ac6:	18 9b       	mov	r11,r12
80004ac8:	70 0c       	ld.w	r12,r8[0x0]
80004aca:	e0 a0 1f 23 	rcall	80008910 <_free_r>
80004ace:	d8 02       	popm	pc

80004ad0 <malloc>:
80004ad0:	d4 01       	pushm	lr
80004ad2:	e0 68 01 1c 	mov	r8,284
80004ad6:	18 9b       	mov	r11,r12
80004ad8:	70 0c       	ld.w	r12,r8[0x0]
80004ada:	c0 3c       	rcall	80004ae0 <_malloc_r>
80004adc:	d8 02       	popm	pc
80004ade:	d7 03       	nop

80004ae0 <_malloc_r>:
80004ae0:	d4 31       	pushm	r0-r7,lr
80004ae2:	f6 c8 ff f5 	sub	r8,r11,-11
80004ae6:	18 95       	mov	r5,r12
80004ae8:	10 97       	mov	r7,r8
80004aea:	e0 17 ff f8 	andl	r7,0xfff8
80004aee:	59 68       	cp.w	r8,22
80004af0:	f9 b7 08 10 	movls	r7,16
80004af4:	16 37       	cp.w	r7,r11
80004af6:	5f 38       	srlo	r8
80004af8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004afc:	c0 50       	breq	80004b06 <_malloc_r+0x26>
80004afe:	30 c8       	mov	r8,12
80004b00:	99 38       	st.w	r12[0xc],r8
80004b02:	e0 8f 01 fa 	bral	80004ef6 <_malloc_r+0x416>
80004b06:	fe b0 f4 97 	rcall	80003434 <__malloc_lock>
80004b0a:	e0 47 01 f7 	cp.w	r7,503
80004b0e:	e0 8b 00 1d 	brhi	80004b48 <_malloc_r+0x68>
80004b12:	ee 03 16 03 	lsr	r3,r7,0x3
80004b16:	e0 68 01 20 	mov	r8,288
80004b1a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004b1e:	70 36       	ld.w	r6,r8[0xc]
80004b20:	10 36       	cp.w	r6,r8
80004b22:	c0 61       	brne	80004b2e <_malloc_r+0x4e>
80004b24:	ec c8 ff f8 	sub	r8,r6,-8
80004b28:	70 36       	ld.w	r6,r8[0xc]
80004b2a:	10 36       	cp.w	r6,r8
80004b2c:	c0 c0       	breq	80004b44 <_malloc_r+0x64>
80004b2e:	6c 18       	ld.w	r8,r6[0x4]
80004b30:	e0 18 ff fc 	andl	r8,0xfffc
80004b34:	6c 3a       	ld.w	r10,r6[0xc]
80004b36:	ec 08 00 09 	add	r9,r6,r8
80004b3a:	0a 9c       	mov	r12,r5
80004b3c:	6c 28       	ld.w	r8,r6[0x8]
80004b3e:	95 28       	st.w	r10[0x8],r8
80004b40:	91 3a       	st.w	r8[0xc],r10
80004b42:	c4 78       	rjmp	80004bd0 <_malloc_r+0xf0>
80004b44:	2f e3       	sub	r3,-2
80004b46:	c4 d8       	rjmp	80004be0 <_malloc_r+0x100>
80004b48:	ee 03 16 09 	lsr	r3,r7,0x9
80004b4c:	c0 41       	brne	80004b54 <_malloc_r+0x74>
80004b4e:	ee 03 16 03 	lsr	r3,r7,0x3
80004b52:	c2 68       	rjmp	80004b9e <_malloc_r+0xbe>
80004b54:	58 43       	cp.w	r3,4
80004b56:	e0 8b 00 06 	brhi	80004b62 <_malloc_r+0x82>
80004b5a:	ee 03 16 06 	lsr	r3,r7,0x6
80004b5e:	2c 83       	sub	r3,-56
80004b60:	c1 f8       	rjmp	80004b9e <_malloc_r+0xbe>
80004b62:	59 43       	cp.w	r3,20
80004b64:	e0 8b 00 04 	brhi	80004b6c <_malloc_r+0x8c>
80004b68:	2a 53       	sub	r3,-91
80004b6a:	c1 a8       	rjmp	80004b9e <_malloc_r+0xbe>
80004b6c:	e0 43 00 54 	cp.w	r3,84
80004b70:	e0 8b 00 06 	brhi	80004b7c <_malloc_r+0x9c>
80004b74:	ee 03 16 0c 	lsr	r3,r7,0xc
80004b78:	29 23       	sub	r3,-110
80004b7a:	c1 28       	rjmp	80004b9e <_malloc_r+0xbe>
80004b7c:	e0 43 01 54 	cp.w	r3,340
80004b80:	e0 8b 00 06 	brhi	80004b8c <_malloc_r+0xac>
80004b84:	ee 03 16 0f 	lsr	r3,r7,0xf
80004b88:	28 93       	sub	r3,-119
80004b8a:	c0 a8       	rjmp	80004b9e <_malloc_r+0xbe>
80004b8c:	e0 43 05 54 	cp.w	r3,1364
80004b90:	e0 88 00 04 	brls	80004b98 <_malloc_r+0xb8>
80004b94:	37 e3       	mov	r3,126
80004b96:	c0 48       	rjmp	80004b9e <_malloc_r+0xbe>
80004b98:	ee 03 16 12 	lsr	r3,r7,0x12
80004b9c:	28 43       	sub	r3,-124
80004b9e:	e0 6a 01 20 	mov	r10,288
80004ba2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004ba6:	74 36       	ld.w	r6,r10[0xc]
80004ba8:	c1 98       	rjmp	80004bda <_malloc_r+0xfa>
80004baa:	6c 19       	ld.w	r9,r6[0x4]
80004bac:	e0 19 ff fc 	andl	r9,0xfffc
80004bb0:	f2 07 01 0b 	sub	r11,r9,r7
80004bb4:	58 fb       	cp.w	r11,15
80004bb6:	e0 8a 00 04 	brle	80004bbe <_malloc_r+0xde>
80004bba:	20 13       	sub	r3,1
80004bbc:	c1 18       	rjmp	80004bde <_malloc_r+0xfe>
80004bbe:	6c 38       	ld.w	r8,r6[0xc]
80004bc0:	58 0b       	cp.w	r11,0
80004bc2:	c0 b5       	brlt	80004bd8 <_malloc_r+0xf8>
80004bc4:	6c 2a       	ld.w	r10,r6[0x8]
80004bc6:	ec 09 00 09 	add	r9,r6,r9
80004bca:	0a 9c       	mov	r12,r5
80004bcc:	91 2a       	st.w	r8[0x8],r10
80004bce:	95 38       	st.w	r10[0xc],r8
80004bd0:	72 18       	ld.w	r8,r9[0x4]
80004bd2:	a1 a8       	sbr	r8,0x0
80004bd4:	93 18       	st.w	r9[0x4],r8
80004bd6:	cb c8       	rjmp	80004d4e <_malloc_r+0x26e>
80004bd8:	10 96       	mov	r6,r8
80004bda:	14 36       	cp.w	r6,r10
80004bdc:	ce 71       	brne	80004baa <_malloc_r+0xca>
80004bde:	2f f3       	sub	r3,-1
80004be0:	e0 6a 01 20 	mov	r10,288
80004be4:	f4 cc ff f8 	sub	r12,r10,-8
80004be8:	78 26       	ld.w	r6,r12[0x8]
80004bea:	18 36       	cp.w	r6,r12
80004bec:	c6 c0       	breq	80004cc4 <_malloc_r+0x1e4>
80004bee:	6c 19       	ld.w	r9,r6[0x4]
80004bf0:	e0 19 ff fc 	andl	r9,0xfffc
80004bf4:	f2 07 01 08 	sub	r8,r9,r7
80004bf8:	58 f8       	cp.w	r8,15
80004bfa:	e0 89 00 8f 	brgt	80004d18 <_malloc_r+0x238>
80004bfe:	99 3c       	st.w	r12[0xc],r12
80004c00:	99 2c       	st.w	r12[0x8],r12
80004c02:	58 08       	cp.w	r8,0
80004c04:	c0 55       	brlt	80004c0e <_malloc_r+0x12e>
80004c06:	ec 09 00 09 	add	r9,r6,r9
80004c0a:	0a 9c       	mov	r12,r5
80004c0c:	ce 2b       	rjmp	80004bd0 <_malloc_r+0xf0>
80004c0e:	e0 49 01 ff 	cp.w	r9,511
80004c12:	e0 8b 00 13 	brhi	80004c38 <_malloc_r+0x158>
80004c16:	a3 99       	lsr	r9,0x3
80004c18:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004c1c:	70 2b       	ld.w	r11,r8[0x8]
80004c1e:	8d 38       	st.w	r6[0xc],r8
80004c20:	8d 2b       	st.w	r6[0x8],r11
80004c22:	97 36       	st.w	r11[0xc],r6
80004c24:	91 26       	st.w	r8[0x8],r6
80004c26:	a3 49       	asr	r9,0x2
80004c28:	74 18       	ld.w	r8,r10[0x4]
80004c2a:	30 1b       	mov	r11,1
80004c2c:	f6 09 09 49 	lsl	r9,r11,r9
80004c30:	f1 e9 10 09 	or	r9,r8,r9
80004c34:	95 19       	st.w	r10[0x4],r9
80004c36:	c4 78       	rjmp	80004cc4 <_malloc_r+0x1e4>
80004c38:	f2 0a 16 09 	lsr	r10,r9,0x9
80004c3c:	58 4a       	cp.w	r10,4
80004c3e:	e0 8b 00 07 	brhi	80004c4c <_malloc_r+0x16c>
80004c42:	f2 0a 16 06 	lsr	r10,r9,0x6
80004c46:	2c 8a       	sub	r10,-56
80004c48:	c2 08       	rjmp	80004c88 <_malloc_r+0x1a8>
80004c4a:	d7 03       	nop
80004c4c:	59 4a       	cp.w	r10,20
80004c4e:	e0 8b 00 04 	brhi	80004c56 <_malloc_r+0x176>
80004c52:	2a 5a       	sub	r10,-91
80004c54:	c1 a8       	rjmp	80004c88 <_malloc_r+0x1a8>
80004c56:	e0 4a 00 54 	cp.w	r10,84
80004c5a:	e0 8b 00 06 	brhi	80004c66 <_malloc_r+0x186>
80004c5e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004c62:	29 2a       	sub	r10,-110
80004c64:	c1 28       	rjmp	80004c88 <_malloc_r+0x1a8>
80004c66:	e0 4a 01 54 	cp.w	r10,340
80004c6a:	e0 8b 00 06 	brhi	80004c76 <_malloc_r+0x196>
80004c6e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004c72:	28 9a       	sub	r10,-119
80004c74:	c0 a8       	rjmp	80004c88 <_malloc_r+0x1a8>
80004c76:	e0 4a 05 54 	cp.w	r10,1364
80004c7a:	e0 88 00 04 	brls	80004c82 <_malloc_r+0x1a2>
80004c7e:	37 ea       	mov	r10,126
80004c80:	c0 48       	rjmp	80004c88 <_malloc_r+0x1a8>
80004c82:	f2 0a 16 12 	lsr	r10,r9,0x12
80004c86:	28 4a       	sub	r10,-124
80004c88:	e0 6b 01 20 	mov	r11,288
80004c8c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004c90:	68 28       	ld.w	r8,r4[0x8]
80004c92:	08 38       	cp.w	r8,r4
80004c94:	c0 e1       	brne	80004cb0 <_malloc_r+0x1d0>
80004c96:	76 19       	ld.w	r9,r11[0x4]
80004c98:	a3 4a       	asr	r10,0x2
80004c9a:	30 1e       	mov	lr,1
80004c9c:	fc 0a 09 4a 	lsl	r10,lr,r10
80004ca0:	f3 ea 10 0a 	or	r10,r9,r10
80004ca4:	10 99       	mov	r9,r8
80004ca6:	97 1a       	st.w	r11[0x4],r10
80004ca8:	c0 a8       	rjmp	80004cbc <_malloc_r+0x1dc>
80004caa:	70 28       	ld.w	r8,r8[0x8]
80004cac:	08 38       	cp.w	r8,r4
80004cae:	c0 60       	breq	80004cba <_malloc_r+0x1da>
80004cb0:	70 1a       	ld.w	r10,r8[0x4]
80004cb2:	e0 1a ff fc 	andl	r10,0xfffc
80004cb6:	14 39       	cp.w	r9,r10
80004cb8:	cf 93       	brcs	80004caa <_malloc_r+0x1ca>
80004cba:	70 39       	ld.w	r9,r8[0xc]
80004cbc:	8d 39       	st.w	r6[0xc],r9
80004cbe:	8d 28       	st.w	r6[0x8],r8
80004cc0:	91 36       	st.w	r8[0xc],r6
80004cc2:	93 26       	st.w	r9[0x8],r6
80004cc4:	e6 08 14 02 	asr	r8,r3,0x2
80004cc8:	30 1b       	mov	r11,1
80004cca:	e0 64 01 20 	mov	r4,288
80004cce:	f6 08 09 4b 	lsl	r11,r11,r8
80004cd2:	68 18       	ld.w	r8,r4[0x4]
80004cd4:	10 3b       	cp.w	r11,r8
80004cd6:	e0 8b 00 6b 	brhi	80004dac <_malloc_r+0x2cc>
80004cda:	f7 e8 00 09 	and	r9,r11,r8
80004cde:	c0 b1       	brne	80004cf4 <_malloc_r+0x214>
80004ce0:	e0 13 ff fc 	andl	r3,0xfffc
80004ce4:	a1 7b       	lsl	r11,0x1
80004ce6:	2f c3       	sub	r3,-4
80004ce8:	c0 38       	rjmp	80004cee <_malloc_r+0x20e>
80004cea:	2f c3       	sub	r3,-4
80004cec:	a1 7b       	lsl	r11,0x1
80004cee:	f7 e8 00 09 	and	r9,r11,r8
80004cf2:	cf c0       	breq	80004cea <_malloc_r+0x20a>
80004cf4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004cf8:	06 92       	mov	r2,r3
80004cfa:	1c 91       	mov	r1,lr
80004cfc:	62 36       	ld.w	r6,r1[0xc]
80004cfe:	c2 e8       	rjmp	80004d5a <_malloc_r+0x27a>
80004d00:	6c 1a       	ld.w	r10,r6[0x4]
80004d02:	e0 1a ff fc 	andl	r10,0xfffc
80004d06:	f4 07 01 08 	sub	r8,r10,r7
80004d0a:	58 f8       	cp.w	r8,15
80004d0c:	e0 8a 00 15 	brle	80004d36 <_malloc_r+0x256>
80004d10:	6c 3a       	ld.w	r10,r6[0xc]
80004d12:	6c 29       	ld.w	r9,r6[0x8]
80004d14:	95 29       	st.w	r10[0x8],r9
80004d16:	93 3a       	st.w	r9[0xc],r10
80004d18:	0e 99       	mov	r9,r7
80004d1a:	ec 07 00 07 	add	r7,r6,r7
80004d1e:	a1 a9       	sbr	r9,0x0
80004d20:	99 37       	st.w	r12[0xc],r7
80004d22:	99 27       	st.w	r12[0x8],r7
80004d24:	8d 19       	st.w	r6[0x4],r9
80004d26:	ee 08 09 08 	st.w	r7[r8],r8
80004d2a:	8f 2c       	st.w	r7[0x8],r12
80004d2c:	8f 3c       	st.w	r7[0xc],r12
80004d2e:	a1 a8       	sbr	r8,0x0
80004d30:	0a 9c       	mov	r12,r5
80004d32:	8f 18       	st.w	r7[0x4],r8
80004d34:	c0 d8       	rjmp	80004d4e <_malloc_r+0x26e>
80004d36:	6c 39       	ld.w	r9,r6[0xc]
80004d38:	58 08       	cp.w	r8,0
80004d3a:	c0 f5       	brlt	80004d58 <_malloc_r+0x278>
80004d3c:	ec 0a 00 0a 	add	r10,r6,r10
80004d40:	74 18       	ld.w	r8,r10[0x4]
80004d42:	a1 a8       	sbr	r8,0x0
80004d44:	0a 9c       	mov	r12,r5
80004d46:	95 18       	st.w	r10[0x4],r8
80004d48:	6c 28       	ld.w	r8,r6[0x8]
80004d4a:	93 28       	st.w	r9[0x8],r8
80004d4c:	91 39       	st.w	r8[0xc],r9
80004d4e:	fe b0 f3 79 	rcall	80003440 <__malloc_unlock>
80004d52:	ec cc ff f8 	sub	r12,r6,-8
80004d56:	d8 32       	popm	r0-r7,pc
80004d58:	12 96       	mov	r6,r9
80004d5a:	02 36       	cp.w	r6,r1
80004d5c:	cd 21       	brne	80004d00 <_malloc_r+0x220>
80004d5e:	2f f2       	sub	r2,-1
80004d60:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004d64:	c0 30       	breq	80004d6a <_malloc_r+0x28a>
80004d66:	2f 81       	sub	r1,-8
80004d68:	cc ab       	rjmp	80004cfc <_malloc_r+0x21c>
80004d6a:	1c 98       	mov	r8,lr
80004d6c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004d70:	c0 81       	brne	80004d80 <_malloc_r+0x2a0>
80004d72:	68 19       	ld.w	r9,r4[0x4]
80004d74:	f6 08 11 ff 	rsub	r8,r11,-1
80004d78:	f3 e8 00 08 	and	r8,r9,r8
80004d7c:	89 18       	st.w	r4[0x4],r8
80004d7e:	c0 78       	rjmp	80004d8c <_malloc_r+0x2ac>
80004d80:	f0 c9 00 08 	sub	r9,r8,8
80004d84:	20 13       	sub	r3,1
80004d86:	70 08       	ld.w	r8,r8[0x0]
80004d88:	12 38       	cp.w	r8,r9
80004d8a:	cf 10       	breq	80004d6c <_malloc_r+0x28c>
80004d8c:	a1 7b       	lsl	r11,0x1
80004d8e:	68 18       	ld.w	r8,r4[0x4]
80004d90:	10 3b       	cp.w	r11,r8
80004d92:	e0 8b 00 0d 	brhi	80004dac <_malloc_r+0x2cc>
80004d96:	58 0b       	cp.w	r11,0
80004d98:	c0 a0       	breq	80004dac <_malloc_r+0x2cc>
80004d9a:	04 93       	mov	r3,r2
80004d9c:	c0 38       	rjmp	80004da2 <_malloc_r+0x2c2>
80004d9e:	2f c3       	sub	r3,-4
80004da0:	a1 7b       	lsl	r11,0x1
80004da2:	f7 e8 00 09 	and	r9,r11,r8
80004da6:	ca 71       	brne	80004cf4 <_malloc_r+0x214>
80004da8:	cf bb       	rjmp	80004d9e <_malloc_r+0x2be>
80004daa:	d7 03       	nop
80004dac:	68 23       	ld.w	r3,r4[0x8]
80004dae:	66 12       	ld.w	r2,r3[0x4]
80004db0:	e0 12 ff fc 	andl	r2,0xfffc
80004db4:	0e 32       	cp.w	r2,r7
80004db6:	5f 39       	srlo	r9
80004db8:	e4 07 01 08 	sub	r8,r2,r7
80004dbc:	58 f8       	cp.w	r8,15
80004dbe:	5f aa       	srle	r10
80004dc0:	f5 e9 10 09 	or	r9,r10,r9
80004dc4:	e0 80 00 9a 	breq	80004ef8 <_malloc_r+0x418>
80004dc8:	e0 68 07 a4 	mov	r8,1956
80004dcc:	70 01       	ld.w	r1,r8[0x0]
80004dce:	e0 68 05 2c 	mov	r8,1324
80004dd2:	2f 01       	sub	r1,-16
80004dd4:	70 08       	ld.w	r8,r8[0x0]
80004dd6:	0e 01       	add	r1,r7
80004dd8:	5b f8       	cp.w	r8,-1
80004dda:	c0 40       	breq	80004de2 <_malloc_r+0x302>
80004ddc:	28 11       	sub	r1,-127
80004dde:	e0 11 ff 80 	andl	r1,0xff80
80004de2:	02 9b       	mov	r11,r1
80004de4:	0a 9c       	mov	r12,r5
80004de6:	e0 a0 02 a5 	rcall	80005330 <_sbrk_r>
80004dea:	18 96       	mov	r6,r12
80004dec:	5b fc       	cp.w	r12,-1
80004dee:	c7 50       	breq	80004ed8 <_malloc_r+0x3f8>
80004df0:	e6 02 00 08 	add	r8,r3,r2
80004df4:	10 3c       	cp.w	r12,r8
80004df6:	c0 32       	brcc	80004dfc <_malloc_r+0x31c>
80004df8:	08 33       	cp.w	r3,r4
80004dfa:	c6 f1       	brne	80004ed8 <_malloc_r+0x3f8>
80004dfc:	e0 6a 07 a8 	mov	r10,1960
80004e00:	74 09       	ld.w	r9,r10[0x0]
80004e02:	e2 09 00 09 	add	r9,r1,r9
80004e06:	95 09       	st.w	r10[0x0],r9
80004e08:	10 36       	cp.w	r6,r8
80004e0a:	c0 a1       	brne	80004e1e <_malloc_r+0x33e>
80004e0c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004e10:	c0 71       	brne	80004e1e <_malloc_r+0x33e>
80004e12:	e2 02 00 02 	add	r2,r1,r2
80004e16:	68 28       	ld.w	r8,r4[0x8]
80004e18:	a1 a2       	sbr	r2,0x0
80004e1a:	91 12       	st.w	r8[0x4],r2
80004e1c:	c4 f8       	rjmp	80004eba <_malloc_r+0x3da>
80004e1e:	e0 6a 05 2c 	mov	r10,1324
80004e22:	74 0b       	ld.w	r11,r10[0x0]
80004e24:	5b fb       	cp.w	r11,-1
80004e26:	c0 31       	brne	80004e2c <_malloc_r+0x34c>
80004e28:	95 06       	st.w	r10[0x0],r6
80004e2a:	c0 78       	rjmp	80004e38 <_malloc_r+0x358>
80004e2c:	ec 09 00 09 	add	r9,r6,r9
80004e30:	e0 6a 07 a8 	mov	r10,1960
80004e34:	10 19       	sub	r9,r8
80004e36:	95 09       	st.w	r10[0x0],r9
80004e38:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004e3c:	f0 09 11 08 	rsub	r9,r8,8
80004e40:	58 08       	cp.w	r8,0
80004e42:	f2 08 17 10 	movne	r8,r9
80004e46:	ed d8 e1 06 	addne	r6,r6,r8
80004e4a:	28 08       	sub	r8,-128
80004e4c:	ec 01 00 01 	add	r1,r6,r1
80004e50:	0a 9c       	mov	r12,r5
80004e52:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004e56:	f0 01 01 01 	sub	r1,r8,r1
80004e5a:	02 9b       	mov	r11,r1
80004e5c:	e0 a0 02 6a 	rcall	80005330 <_sbrk_r>
80004e60:	e0 68 07 a8 	mov	r8,1960
80004e64:	5b fc       	cp.w	r12,-1
80004e66:	ec 0c 17 00 	moveq	r12,r6
80004e6a:	f9 b1 00 00 	moveq	r1,0
80004e6e:	70 09       	ld.w	r9,r8[0x0]
80004e70:	0c 1c       	sub	r12,r6
80004e72:	89 26       	st.w	r4[0x8],r6
80004e74:	02 0c       	add	r12,r1
80004e76:	12 01       	add	r1,r9
80004e78:	a1 ac       	sbr	r12,0x0
80004e7a:	91 01       	st.w	r8[0x0],r1
80004e7c:	8d 1c       	st.w	r6[0x4],r12
80004e7e:	08 33       	cp.w	r3,r4
80004e80:	c1 d0       	breq	80004eba <_malloc_r+0x3da>
80004e82:	58 f2       	cp.w	r2,15
80004e84:	e0 8b 00 05 	brhi	80004e8e <_malloc_r+0x3ae>
80004e88:	30 18       	mov	r8,1
80004e8a:	8d 18       	st.w	r6[0x4],r8
80004e8c:	c2 68       	rjmp	80004ed8 <_malloc_r+0x3f8>
80004e8e:	30 59       	mov	r9,5
80004e90:	20 c2       	sub	r2,12
80004e92:	e0 12 ff f8 	andl	r2,0xfff8
80004e96:	e6 02 00 08 	add	r8,r3,r2
80004e9a:	91 29       	st.w	r8[0x8],r9
80004e9c:	91 19       	st.w	r8[0x4],r9
80004e9e:	66 18       	ld.w	r8,r3[0x4]
80004ea0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004ea4:	e5 e8 10 08 	or	r8,r2,r8
80004ea8:	87 18       	st.w	r3[0x4],r8
80004eaa:	58 f2       	cp.w	r2,15
80004eac:	e0 88 00 07 	brls	80004eba <_malloc_r+0x3da>
80004eb0:	e6 cb ff f8 	sub	r11,r3,-8
80004eb4:	0a 9c       	mov	r12,r5
80004eb6:	e0 a0 1d 2d 	rcall	80008910 <_free_r>
80004eba:	e0 69 07 a0 	mov	r9,1952
80004ebe:	72 0a       	ld.w	r10,r9[0x0]
80004ec0:	e0 68 07 a8 	mov	r8,1960
80004ec4:	70 08       	ld.w	r8,r8[0x0]
80004ec6:	14 38       	cp.w	r8,r10
80004ec8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ecc:	e0 69 07 9c 	mov	r9,1948
80004ed0:	72 0a       	ld.w	r10,r9[0x0]
80004ed2:	14 38       	cp.w	r8,r10
80004ed4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ed8:	68 28       	ld.w	r8,r4[0x8]
80004eda:	70 18       	ld.w	r8,r8[0x4]
80004edc:	e0 18 ff fc 	andl	r8,0xfffc
80004ee0:	0e 38       	cp.w	r8,r7
80004ee2:	5f 39       	srlo	r9
80004ee4:	0e 18       	sub	r8,r7
80004ee6:	58 f8       	cp.w	r8,15
80004ee8:	5f aa       	srle	r10
80004eea:	f5 e9 10 09 	or	r9,r10,r9
80004eee:	c0 50       	breq	80004ef8 <_malloc_r+0x418>
80004ef0:	0a 9c       	mov	r12,r5
80004ef2:	fe b0 f2 a7 	rcall	80003440 <__malloc_unlock>
80004ef6:	d8 3a       	popm	r0-r7,pc,r12=0
80004ef8:	68 26       	ld.w	r6,r4[0x8]
80004efa:	a1 a8       	sbr	r8,0x0
80004efc:	0e 99       	mov	r9,r7
80004efe:	a1 a9       	sbr	r9,0x0
80004f00:	8d 19       	st.w	r6[0x4],r9
80004f02:	ec 07 00 07 	add	r7,r6,r7
80004f06:	0a 9c       	mov	r12,r5
80004f08:	89 27       	st.w	r4[0x8],r7
80004f0a:	8f 18       	st.w	r7[0x4],r8
80004f0c:	fe b0 f2 9a 	rcall	80003440 <__malloc_unlock>
80004f10:	ec cc ff f8 	sub	r12,r6,-8
80004f14:	d8 32       	popm	r0-r7,pc
80004f16:	d7 03       	nop

80004f18 <memcpy>:
80004f18:	58 8a       	cp.w	r10,8
80004f1a:	c2 f5       	brlt	80004f78 <memcpy+0x60>
80004f1c:	f9 eb 10 09 	or	r9,r12,r11
80004f20:	e2 19 00 03 	andl	r9,0x3,COH
80004f24:	e0 81 00 97 	brne	80005052 <memcpy+0x13a>
80004f28:	e0 4a 00 20 	cp.w	r10,32
80004f2c:	c3 b4       	brge	80004fa2 <memcpy+0x8a>
80004f2e:	f4 08 14 02 	asr	r8,r10,0x2
80004f32:	f0 09 11 08 	rsub	r9,r8,8
80004f36:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004f3a:	76 69       	ld.w	r9,r11[0x18]
80004f3c:	99 69       	st.w	r12[0x18],r9
80004f3e:	76 59       	ld.w	r9,r11[0x14]
80004f40:	99 59       	st.w	r12[0x14],r9
80004f42:	76 49       	ld.w	r9,r11[0x10]
80004f44:	99 49       	st.w	r12[0x10],r9
80004f46:	76 39       	ld.w	r9,r11[0xc]
80004f48:	99 39       	st.w	r12[0xc],r9
80004f4a:	76 29       	ld.w	r9,r11[0x8]
80004f4c:	99 29       	st.w	r12[0x8],r9
80004f4e:	76 19       	ld.w	r9,r11[0x4]
80004f50:	99 19       	st.w	r12[0x4],r9
80004f52:	76 09       	ld.w	r9,r11[0x0]
80004f54:	99 09       	st.w	r12[0x0],r9
80004f56:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004f5a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004f5e:	e0 1a 00 03 	andl	r10,0x3
80004f62:	f4 0a 11 04 	rsub	r10,r10,4
80004f66:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004f6a:	17 a9       	ld.ub	r9,r11[0x2]
80004f6c:	b0 a9       	st.b	r8[0x2],r9
80004f6e:	17 99       	ld.ub	r9,r11[0x1]
80004f70:	b0 99       	st.b	r8[0x1],r9
80004f72:	17 89       	ld.ub	r9,r11[0x0]
80004f74:	b0 89       	st.b	r8[0x0],r9
80004f76:	5e fc       	retal	r12
80004f78:	f4 0a 11 09 	rsub	r10,r10,9
80004f7c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004f80:	17 f9       	ld.ub	r9,r11[0x7]
80004f82:	b8 f9       	st.b	r12[0x7],r9
80004f84:	17 e9       	ld.ub	r9,r11[0x6]
80004f86:	b8 e9       	st.b	r12[0x6],r9
80004f88:	17 d9       	ld.ub	r9,r11[0x5]
80004f8a:	b8 d9       	st.b	r12[0x5],r9
80004f8c:	17 c9       	ld.ub	r9,r11[0x4]
80004f8e:	b8 c9       	st.b	r12[0x4],r9
80004f90:	17 b9       	ld.ub	r9,r11[0x3]
80004f92:	b8 b9       	st.b	r12[0x3],r9
80004f94:	17 a9       	ld.ub	r9,r11[0x2]
80004f96:	b8 a9       	st.b	r12[0x2],r9
80004f98:	17 99       	ld.ub	r9,r11[0x1]
80004f9a:	b8 99       	st.b	r12[0x1],r9
80004f9c:	17 89       	ld.ub	r9,r11[0x0]
80004f9e:	b8 89       	st.b	r12[0x0],r9
80004fa0:	5e fc       	retal	r12
80004fa2:	eb cd 40 c0 	pushm	r6-r7,lr
80004fa6:	18 99       	mov	r9,r12
80004fa8:	22 0a       	sub	r10,32
80004faa:	b7 07       	ld.d	r6,r11++
80004fac:	b3 26       	st.d	r9++,r6
80004fae:	b7 07       	ld.d	r6,r11++
80004fb0:	b3 26       	st.d	r9++,r6
80004fb2:	b7 07       	ld.d	r6,r11++
80004fb4:	b3 26       	st.d	r9++,r6
80004fb6:	b7 07       	ld.d	r6,r11++
80004fb8:	b3 26       	st.d	r9++,r6
80004fba:	22 0a       	sub	r10,32
80004fbc:	cf 74       	brge	80004faa <memcpy+0x92>
80004fbe:	2f 0a       	sub	r10,-16
80004fc0:	c0 65       	brlt	80004fcc <memcpy+0xb4>
80004fc2:	b7 07       	ld.d	r6,r11++
80004fc4:	b3 26       	st.d	r9++,r6
80004fc6:	b7 07       	ld.d	r6,r11++
80004fc8:	b3 26       	st.d	r9++,r6
80004fca:	21 0a       	sub	r10,16
80004fcc:	5c 3a       	neg	r10
80004fce:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004fd2:	d7 03       	nop
80004fd4:	d7 03       	nop
80004fd6:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004fda:	f3 66 00 0e 	st.b	r9[14],r6
80004fde:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004fe2:	f3 66 00 0d 	st.b	r9[13],r6
80004fe6:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004fea:	f3 66 00 0c 	st.b	r9[12],r6
80004fee:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004ff2:	f3 66 00 0b 	st.b	r9[11],r6
80004ff6:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004ffa:	f3 66 00 0a 	st.b	r9[10],r6
80004ffe:	f7 36 00 09 	ld.ub	r6,r11[9]
80005002:	f3 66 00 09 	st.b	r9[9],r6
80005006:	f7 36 00 08 	ld.ub	r6,r11[8]
8000500a:	f3 66 00 08 	st.b	r9[8],r6
8000500e:	f7 36 00 07 	ld.ub	r6,r11[7]
80005012:	f3 66 00 07 	st.b	r9[7],r6
80005016:	f7 36 00 06 	ld.ub	r6,r11[6]
8000501a:	f3 66 00 06 	st.b	r9[6],r6
8000501e:	f7 36 00 05 	ld.ub	r6,r11[5]
80005022:	f3 66 00 05 	st.b	r9[5],r6
80005026:	f7 36 00 04 	ld.ub	r6,r11[4]
8000502a:	f3 66 00 04 	st.b	r9[4],r6
8000502e:	f7 36 00 03 	ld.ub	r6,r11[3]
80005032:	f3 66 00 03 	st.b	r9[3],r6
80005036:	f7 36 00 02 	ld.ub	r6,r11[2]
8000503a:	f3 66 00 02 	st.b	r9[2],r6
8000503e:	f7 36 00 01 	ld.ub	r6,r11[1]
80005042:	f3 66 00 01 	st.b	r9[1],r6
80005046:	f7 36 00 00 	ld.ub	r6,r11[0]
8000504a:	f3 66 00 00 	st.b	r9[0],r6
8000504e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005052:	20 1a       	sub	r10,1
80005054:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80005058:	f8 0a 0b 09 	st.b	r12[r10],r9
8000505c:	cf b1       	brne	80005052 <memcpy+0x13a>
8000505e:	5e fc       	retal	r12

80005060 <memset>:
80005060:	18 98       	mov	r8,r12
80005062:	c0 38       	rjmp	80005068 <memset+0x8>
80005064:	10 cb       	st.b	r8++,r11
80005066:	20 1a       	sub	r10,1
80005068:	58 0a       	cp.w	r10,0
8000506a:	cf d1       	brne	80005064 <memset+0x4>
8000506c:	5e fc       	retal	r12
8000506e:	d7 03       	nop

80005070 <_realloc_r>:
80005070:	d4 31       	pushm	r0-r7,lr
80005072:	20 1d       	sub	sp,4
80005074:	16 94       	mov	r4,r11
80005076:	18 92       	mov	r2,r12
80005078:	14 9b       	mov	r11,r10
8000507a:	58 04       	cp.w	r4,0
8000507c:	c0 51       	brne	80005086 <_realloc_r+0x16>
8000507e:	fe b0 fd 31 	rcall	80004ae0 <_malloc_r>
80005082:	18 95       	mov	r5,r12
80005084:	c5 39       	rjmp	8000532a <_realloc_r+0x2ba>
80005086:	50 0a       	stdsp	sp[0x0],r10
80005088:	fe b0 f1 d6 	rcall	80003434 <__malloc_lock>
8000508c:	40 0b       	lddsp	r11,sp[0x0]
8000508e:	f6 c8 ff f5 	sub	r8,r11,-11
80005092:	e8 c1 00 08 	sub	r1,r4,8
80005096:	10 96       	mov	r6,r8
80005098:	62 1c       	ld.w	r12,r1[0x4]
8000509a:	e0 16 ff f8 	andl	r6,0xfff8
8000509e:	59 68       	cp.w	r8,22
800050a0:	f9 b6 08 10 	movls	r6,16
800050a4:	16 36       	cp.w	r6,r11
800050a6:	5f 38       	srlo	r8
800050a8:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800050ac:	c0 50       	breq	800050b6 <_realloc_r+0x46>
800050ae:	30 c8       	mov	r8,12
800050b0:	30 05       	mov	r5,0
800050b2:	85 38       	st.w	r2[0xc],r8
800050b4:	c3 b9       	rjmp	8000532a <_realloc_r+0x2ba>
800050b6:	18 90       	mov	r0,r12
800050b8:	e0 10 ff fc 	andl	r0,0xfffc
800050bc:	0c 30       	cp.w	r0,r6
800050be:	e0 84 01 0b 	brge	800052d4 <_realloc_r+0x264>
800050c2:	e0 68 01 20 	mov	r8,288
800050c6:	e2 00 00 09 	add	r9,r1,r0
800050ca:	70 25       	ld.w	r5,r8[0x8]
800050cc:	0a 39       	cp.w	r9,r5
800050ce:	c0 90       	breq	800050e0 <_realloc_r+0x70>
800050d0:	72 1a       	ld.w	r10,r9[0x4]
800050d2:	a1 ca       	cbr	r10,0x0
800050d4:	f2 0a 00 0a 	add	r10,r9,r10
800050d8:	74 1a       	ld.w	r10,r10[0x4]
800050da:	ed ba 00 00 	bld	r10,0x0
800050de:	c2 20       	breq	80005122 <_realloc_r+0xb2>
800050e0:	72 1a       	ld.w	r10,r9[0x4]
800050e2:	e0 1a ff fc 	andl	r10,0xfffc
800050e6:	f4 00 00 03 	add	r3,r10,r0
800050ea:	0a 39       	cp.w	r9,r5
800050ec:	c1 31       	brne	80005112 <_realloc_r+0xa2>
800050ee:	ec c7 ff f0 	sub	r7,r6,-16
800050f2:	0e 33       	cp.w	r3,r7
800050f4:	c1 95       	brlt	80005126 <_realloc_r+0xb6>
800050f6:	e2 06 00 09 	add	r9,r1,r6
800050fa:	0c 13       	sub	r3,r6
800050fc:	a1 a3       	sbr	r3,0x0
800050fe:	93 13       	st.w	r9[0x4],r3
80005100:	91 29       	st.w	r8[0x8],r9
80005102:	04 9c       	mov	r12,r2
80005104:	62 18       	ld.w	r8,r1[0x4]
80005106:	08 95       	mov	r5,r4
80005108:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000510c:	10 46       	or	r6,r8
8000510e:	83 16       	st.w	r1[0x4],r6
80005110:	c0 b9       	rjmp	80005326 <_realloc_r+0x2b6>
80005112:	0c 33       	cp.w	r3,r6
80005114:	c0 95       	brlt	80005126 <_realloc_r+0xb6>
80005116:	72 28       	ld.w	r8,r9[0x8]
80005118:	02 97       	mov	r7,r1
8000511a:	72 39       	ld.w	r9,r9[0xc]
8000511c:	93 28       	st.w	r9[0x8],r8
8000511e:	91 39       	st.w	r8[0xc],r9
80005120:	cd c8       	rjmp	800052d8 <_realloc_r+0x268>
80005122:	30 0a       	mov	r10,0
80005124:	14 99       	mov	r9,r10
80005126:	ed bc 00 00 	bld	r12,0x0
8000512a:	e0 80 00 95 	breq	80005254 <_realloc_r+0x1e4>
8000512e:	62 07       	ld.w	r7,r1[0x0]
80005130:	e2 07 01 07 	sub	r7,r1,r7
80005134:	6e 1c       	ld.w	r12,r7[0x4]
80005136:	e0 1c ff fc 	andl	r12,0xfffc
8000513a:	58 09       	cp.w	r9,0
8000513c:	c5 60       	breq	800051e8 <_realloc_r+0x178>
8000513e:	f8 00 00 03 	add	r3,r12,r0
80005142:	0a 39       	cp.w	r9,r5
80005144:	c4 81       	brne	800051d4 <_realloc_r+0x164>
80005146:	14 03       	add	r3,r10
80005148:	ec c9 ff f0 	sub	r9,r6,-16
8000514c:	12 33       	cp.w	r3,r9
8000514e:	c4 d5       	brlt	800051e8 <_realloc_r+0x178>
80005150:	6e 3a       	ld.w	r10,r7[0xc]
80005152:	6e 29       	ld.w	r9,r7[0x8]
80005154:	95 29       	st.w	r10[0x8],r9
80005156:	93 3a       	st.w	r9[0xc],r10
80005158:	ee c5 ff f8 	sub	r5,r7,-8
8000515c:	e0 ca 00 04 	sub	r10,r0,4
80005160:	e0 4a 00 24 	cp.w	r10,36
80005164:	e0 8b 00 25 	brhi	800051ae <_realloc_r+0x13e>
80005168:	0a 99       	mov	r9,r5
8000516a:	59 3a       	cp.w	r10,19
8000516c:	e0 88 00 1a 	brls	800051a0 <_realloc_r+0x130>
80005170:	09 09       	ld.w	r9,r4++
80005172:	8b 09       	st.w	r5[0x0],r9
80005174:	09 09       	ld.w	r9,r4++
80005176:	8f 39       	st.w	r7[0xc],r9
80005178:	ee c9 ff f0 	sub	r9,r7,-16
8000517c:	59 ba       	cp.w	r10,27
8000517e:	e0 88 00 11 	brls	800051a0 <_realloc_r+0x130>
80005182:	09 0b       	ld.w	r11,r4++
80005184:	93 0b       	st.w	r9[0x0],r11
80005186:	09 09       	ld.w	r9,r4++
80005188:	8f 59       	st.w	r7[0x14],r9
8000518a:	ee c9 ff e8 	sub	r9,r7,-24
8000518e:	e0 4a 00 24 	cp.w	r10,36
80005192:	c0 71       	brne	800051a0 <_realloc_r+0x130>
80005194:	09 0a       	ld.w	r10,r4++
80005196:	93 0a       	st.w	r9[0x0],r10
80005198:	ee c9 ff e0 	sub	r9,r7,-32
8000519c:	09 0a       	ld.w	r10,r4++
8000519e:	8f 7a       	st.w	r7[0x1c],r10
800051a0:	09 0a       	ld.w	r10,r4++
800051a2:	12 aa       	st.w	r9++,r10
800051a4:	68 0a       	ld.w	r10,r4[0x0]
800051a6:	93 0a       	st.w	r9[0x0],r10
800051a8:	68 1a       	ld.w	r10,r4[0x4]
800051aa:	93 1a       	st.w	r9[0x4],r10
800051ac:	c0 78       	rjmp	800051ba <_realloc_r+0x14a>
800051ae:	50 08       	stdsp	sp[0x0],r8
800051b0:	08 9b       	mov	r11,r4
800051b2:	0a 9c       	mov	r12,r5
800051b4:	e0 a0 1e 51 	rcall	80008e56 <memmove>
800051b8:	40 08       	lddsp	r8,sp[0x0]
800051ba:	ee 06 00 09 	add	r9,r7,r6
800051be:	0c 13       	sub	r3,r6
800051c0:	a1 a3       	sbr	r3,0x0
800051c2:	93 13       	st.w	r9[0x4],r3
800051c4:	91 29       	st.w	r8[0x8],r9
800051c6:	04 9c       	mov	r12,r2
800051c8:	6e 18       	ld.w	r8,r7[0x4]
800051ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800051ce:	10 46       	or	r6,r8
800051d0:	8f 16       	st.w	r7[0x4],r6
800051d2:	ca a8       	rjmp	80005326 <_realloc_r+0x2b6>
800051d4:	14 03       	add	r3,r10
800051d6:	0c 33       	cp.w	r3,r6
800051d8:	c0 85       	brlt	800051e8 <_realloc_r+0x178>
800051da:	72 28       	ld.w	r8,r9[0x8]
800051dc:	72 39       	ld.w	r9,r9[0xc]
800051de:	93 28       	st.w	r9[0x8],r8
800051e0:	91 39       	st.w	r8[0xc],r9
800051e2:	6e 28       	ld.w	r8,r7[0x8]
800051e4:	6e 39       	ld.w	r9,r7[0xc]
800051e6:	c0 78       	rjmp	800051f4 <_realloc_r+0x184>
800051e8:	f8 00 00 03 	add	r3,r12,r0
800051ec:	0c 33       	cp.w	r3,r6
800051ee:	c3 35       	brlt	80005254 <_realloc_r+0x1e4>
800051f0:	6e 39       	ld.w	r9,r7[0xc]
800051f2:	6e 28       	ld.w	r8,r7[0x8]
800051f4:	93 28       	st.w	r9[0x8],r8
800051f6:	91 39       	st.w	r8[0xc],r9
800051f8:	e0 ca 00 04 	sub	r10,r0,4
800051fc:	ee cc ff f8 	sub	r12,r7,-8
80005200:	e0 4a 00 24 	cp.w	r10,36
80005204:	e0 8b 00 24 	brhi	8000524c <_realloc_r+0x1dc>
80005208:	59 3a       	cp.w	r10,19
8000520a:	e0 88 00 1a 	brls	8000523e <_realloc_r+0x1ce>
8000520e:	09 08       	ld.w	r8,r4++
80005210:	99 08       	st.w	r12[0x0],r8
80005212:	09 08       	ld.w	r8,r4++
80005214:	8f 38       	st.w	r7[0xc],r8
80005216:	ee cc ff f0 	sub	r12,r7,-16
8000521a:	59 ba       	cp.w	r10,27
8000521c:	e0 88 00 11 	brls	8000523e <_realloc_r+0x1ce>
80005220:	09 08       	ld.w	r8,r4++
80005222:	99 08       	st.w	r12[0x0],r8
80005224:	09 08       	ld.w	r8,r4++
80005226:	8f 58       	st.w	r7[0x14],r8
80005228:	ee cc ff e8 	sub	r12,r7,-24
8000522c:	e0 4a 00 24 	cp.w	r10,36
80005230:	c0 71       	brne	8000523e <_realloc_r+0x1ce>
80005232:	09 08       	ld.w	r8,r4++
80005234:	99 08       	st.w	r12[0x0],r8
80005236:	ee cc ff e0 	sub	r12,r7,-32
8000523a:	09 08       	ld.w	r8,r4++
8000523c:	8f 78       	st.w	r7[0x1c],r8
8000523e:	09 08       	ld.w	r8,r4++
80005240:	18 a8       	st.w	r12++,r8
80005242:	68 08       	ld.w	r8,r4[0x0]
80005244:	99 08       	st.w	r12[0x0],r8
80005246:	68 18       	ld.w	r8,r4[0x4]
80005248:	99 18       	st.w	r12[0x4],r8
8000524a:	c4 78       	rjmp	800052d8 <_realloc_r+0x268>
8000524c:	08 9b       	mov	r11,r4
8000524e:	e0 a0 1e 04 	rcall	80008e56 <memmove>
80005252:	c4 38       	rjmp	800052d8 <_realloc_r+0x268>
80005254:	04 9c       	mov	r12,r2
80005256:	fe b0 fc 45 	rcall	80004ae0 <_malloc_r>
8000525a:	18 95       	mov	r5,r12
8000525c:	c3 a0       	breq	800052d0 <_realloc_r+0x260>
8000525e:	62 18       	ld.w	r8,r1[0x4]
80005260:	f8 c9 00 08 	sub	r9,r12,8
80005264:	a1 c8       	cbr	r8,0x0
80005266:	e2 08 00 08 	add	r8,r1,r8
8000526a:	10 39       	cp.w	r9,r8
8000526c:	c0 71       	brne	8000527a <_realloc_r+0x20a>
8000526e:	72 13       	ld.w	r3,r9[0x4]
80005270:	02 97       	mov	r7,r1
80005272:	e0 13 ff fc 	andl	r3,0xfffc
80005276:	00 03       	add	r3,r0
80005278:	c3 08       	rjmp	800052d8 <_realloc_r+0x268>
8000527a:	e0 ca 00 04 	sub	r10,r0,4
8000527e:	e0 4a 00 24 	cp.w	r10,36
80005282:	e0 8b 00 20 	brhi	800052c2 <_realloc_r+0x252>
80005286:	08 99       	mov	r9,r4
80005288:	18 98       	mov	r8,r12
8000528a:	59 3a       	cp.w	r10,19
8000528c:	e0 88 00 14 	brls	800052b4 <_realloc_r+0x244>
80005290:	13 0b       	ld.w	r11,r9++
80005292:	10 ab       	st.w	r8++,r11
80005294:	13 0b       	ld.w	r11,r9++
80005296:	10 ab       	st.w	r8++,r11
80005298:	59 ba       	cp.w	r10,27
8000529a:	e0 88 00 0d 	brls	800052b4 <_realloc_r+0x244>
8000529e:	13 0b       	ld.w	r11,r9++
800052a0:	10 ab       	st.w	r8++,r11
800052a2:	13 0b       	ld.w	r11,r9++
800052a4:	10 ab       	st.w	r8++,r11
800052a6:	e0 4a 00 24 	cp.w	r10,36
800052aa:	c0 51       	brne	800052b4 <_realloc_r+0x244>
800052ac:	13 0a       	ld.w	r10,r9++
800052ae:	10 aa       	st.w	r8++,r10
800052b0:	13 0a       	ld.w	r10,r9++
800052b2:	10 aa       	st.w	r8++,r10
800052b4:	13 0a       	ld.w	r10,r9++
800052b6:	10 aa       	st.w	r8++,r10
800052b8:	72 0a       	ld.w	r10,r9[0x0]
800052ba:	91 0a       	st.w	r8[0x0],r10
800052bc:	72 19       	ld.w	r9,r9[0x4]
800052be:	91 19       	st.w	r8[0x4],r9
800052c0:	c0 48       	rjmp	800052c8 <_realloc_r+0x258>
800052c2:	08 9b       	mov	r11,r4
800052c4:	e0 a0 1d c9 	rcall	80008e56 <memmove>
800052c8:	08 9b       	mov	r11,r4
800052ca:	04 9c       	mov	r12,r2
800052cc:	e0 a0 1b 22 	rcall	80008910 <_free_r>
800052d0:	04 9c       	mov	r12,r2
800052d2:	c2 a8       	rjmp	80005326 <_realloc_r+0x2b6>
800052d4:	00 93       	mov	r3,r0
800052d6:	02 97       	mov	r7,r1
800052d8:	e6 06 01 09 	sub	r9,r3,r6
800052dc:	6e 18       	ld.w	r8,r7[0x4]
800052de:	58 f9       	cp.w	r9,15
800052e0:	e0 88 00 16 	brls	8000530c <_realloc_r+0x29c>
800052e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800052e8:	ed e8 10 08 	or	r8,r6,r8
800052ec:	8f 18       	st.w	r7[0x4],r8
800052ee:	12 98       	mov	r8,r9
800052f0:	a1 a8       	sbr	r8,0x0
800052f2:	ee 06 00 0b 	add	r11,r7,r6
800052f6:	f6 09 00 09 	add	r9,r11,r9
800052fa:	97 18       	st.w	r11[0x4],r8
800052fc:	72 18       	ld.w	r8,r9[0x4]
800052fe:	a1 a8       	sbr	r8,0x0
80005300:	2f 8b       	sub	r11,-8
80005302:	93 18       	st.w	r9[0x4],r8
80005304:	04 9c       	mov	r12,r2
80005306:	e0 a0 1b 05 	rcall	80008910 <_free_r>
8000530a:	c0 b8       	rjmp	80005320 <_realloc_r+0x2b0>
8000530c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005310:	e7 e8 10 08 	or	r8,r3,r8
80005314:	8f 18       	st.w	r7[0x4],r8
80005316:	ee 03 00 03 	add	r3,r7,r3
8000531a:	66 18       	ld.w	r8,r3[0x4]
8000531c:	a1 a8       	sbr	r8,0x0
8000531e:	87 18       	st.w	r3[0x4],r8
80005320:	04 9c       	mov	r12,r2
80005322:	ee c5 ff f8 	sub	r5,r7,-8
80005326:	fe b0 f0 8d 	rcall	80003440 <__malloc_unlock>
8000532a:	0a 9c       	mov	r12,r5
8000532c:	2f fd       	sub	sp,-4
8000532e:	d8 32       	popm	r0-r7,pc

80005330 <_sbrk_r>:
80005330:	d4 21       	pushm	r4-r7,lr
80005332:	30 08       	mov	r8,0
80005334:	18 97       	mov	r7,r12
80005336:	e0 66 07 d8 	mov	r6,2008
8000533a:	16 9c       	mov	r12,r11
8000533c:	8d 08       	st.w	r6[0x0],r8
8000533e:	c8 fc       	rcall	8000545c <_sbrk>
80005340:	5b fc       	cp.w	r12,-1
80005342:	c0 51       	brne	8000534c <_sbrk_r+0x1c>
80005344:	6c 08       	ld.w	r8,r6[0x0]
80005346:	58 08       	cp.w	r8,0
80005348:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000534c:	d8 22       	popm	r4-r7,pc
8000534e:	d7 03       	nop

80005350 <sprintf>:
80005350:	d4 01       	pushm	lr
80005352:	21 7d       	sub	sp,92
80005354:	e0 68 ff ff 	mov	r8,65535
80005358:	ea 18 7f ff 	orh	r8,0x7fff
8000535c:	50 58       	stdsp	sp[0x14],r8
8000535e:	50 28       	stdsp	sp[0x8],r8
80005360:	e0 68 02 08 	mov	r8,520
80005364:	ba 68       	st.h	sp[0xc],r8
80005366:	3f f8       	mov	r8,-1
80005368:	ba 78       	st.h	sp[0xe],r8
8000536a:	e0 68 01 1c 	mov	r8,284
8000536e:	50 4c       	stdsp	sp[0x10],r12
80005370:	16 9a       	mov	r10,r11
80005372:	50 0c       	stdsp	sp[0x0],r12
80005374:	fa c9 ff a0 	sub	r9,sp,-96
80005378:	70 0c       	ld.w	r12,r8[0x0]
8000537a:	1a 9b       	mov	r11,sp
8000537c:	e0 a0 02 24 	rcall	800057c4 <_vfprintf_r>
80005380:	30 09       	mov	r9,0
80005382:	40 08       	lddsp	r8,sp[0x0]
80005384:	b0 89       	st.b	r8[0x0],r9
80005386:	2e 9d       	sub	sp,-92
80005388:	d8 02       	popm	pc
8000538a:	d7 03       	nop

8000538c <strncpy>:
8000538c:	30 08       	mov	r8,0
8000538e:	10 3a       	cp.w	r10,r8
80005390:	5e 0c       	reteq	r12
80005392:	f6 08 07 09 	ld.ub	r9,r11[r8]
80005396:	f8 08 0b 09 	st.b	r12[r8],r9
8000539a:	2f f8       	sub	r8,-1
8000539c:	58 09       	cp.w	r9,0
8000539e:	cf 81       	brne	8000538e <strncpy+0x2>
800053a0:	10 3a       	cp.w	r10,r8
800053a2:	5e 0c       	reteq	r12
800053a4:	f8 08 0b 09 	st.b	r12[r8],r9
800053a8:	2f f8       	sub	r8,-1
800053aa:	cf bb       	rjmp	800053a0 <strncpy+0x14>

800053ac <_init_argv>:
800053ac:	30 e8       	mov	r8,14
800053ae:	d6 73       	breakpoint
800053b0:	3f fc       	mov	r12,-1
800053b2:	35 8b       	mov	r11,88
800053b4:	5e fc       	retal	r12

800053b6 <_exit>:
800053b6:	30 d8       	mov	r8,13
800053b8:	d6 73       	breakpoint
800053ba:	3f fc       	mov	r12,-1
800053bc:	35 8b       	mov	r11,88
800053be:	c0 08       	rjmp	800053be <_exit+0x8>

800053c0 <_close>:
800053c0:	30 28       	mov	r8,2
800053c2:	d6 73       	breakpoint
800053c4:	3f fc       	mov	r12,-1
800053c6:	35 8b       	mov	r11,88
800053c8:	58 0c       	cp.w	r12,0
800053ca:	5e 4c       	retge	r12
800053cc:	e0 6a 07 d8 	mov	r10,2008
800053d0:	95 0b       	st.w	r10[0x0],r11
800053d2:	5e fc       	retal	r12

800053d4 <_lseek>:
800053d4:	30 58       	mov	r8,5
800053d6:	d6 73       	breakpoint
800053d8:	3f fc       	mov	r12,-1
800053da:	35 8b       	mov	r11,88
800053dc:	58 0c       	cp.w	r12,0
800053de:	5e 4c       	retge	r12
800053e0:	e0 6a 07 d8 	mov	r10,2008
800053e4:	95 0b       	st.w	r10[0x0],r11
800053e6:	5e fc       	retal	r12

800053e8 <isatty>:
800053e8:	30 b8       	mov	r8,11
800053ea:	d6 73       	breakpoint
800053ec:	3f fc       	mov	r12,-1
800053ee:	35 8b       	mov	r11,88
800053f0:	58 0c       	cp.w	r12,0
800053f2:	5e 4c       	retge	r12
800053f4:	e0 6a 07 d8 	mov	r10,2008
800053f8:	95 0b       	st.w	r10[0x0],r11
800053fa:	5e fc       	retal	r12

800053fc <_fstat_host>:
800053fc:	30 98       	mov	r8,9
800053fe:	d6 73       	breakpoint
80005400:	3f fc       	mov	r12,-1
80005402:	35 8b       	mov	r11,88
80005404:	58 0c       	cp.w	r12,0
80005406:	5e 4c       	retge	r12
80005408:	e0 6a 07 d8 	mov	r10,2008
8000540c:	95 0b       	st.w	r10[0x0],r11
8000540e:	5e fc       	retal	r12

80005410 <_fstat>:
80005410:	d4 21       	pushm	r4-r7,lr
80005412:	21 0d       	sub	sp,64
80005414:	16 97       	mov	r7,r11
80005416:	1a 9b       	mov	r11,sp
80005418:	cf 2f       	rcall	800053fc <_fstat_host>
8000541a:	c0 34       	brge	80005420 <_fstat+0x10>
8000541c:	3f fc       	mov	r12,-1
8000541e:	c1 c8       	rjmp	80005456 <_fstat+0x46>
80005420:	40 08       	lddsp	r8,sp[0x0]
80005422:	ae 08       	st.h	r7[0x0],r8
80005424:	40 18       	lddsp	r8,sp[0x4]
80005426:	ae 18       	st.h	r7[0x2],r8
80005428:	40 28       	lddsp	r8,sp[0x8]
8000542a:	8f 18       	st.w	r7[0x4],r8
8000542c:	40 38       	lddsp	r8,sp[0xc]
8000542e:	ae 48       	st.h	r7[0x8],r8
80005430:	40 48       	lddsp	r8,sp[0x10]
80005432:	ae 58       	st.h	r7[0xa],r8
80005434:	40 58       	lddsp	r8,sp[0x14]
80005436:	ae 68       	st.h	r7[0xc],r8
80005438:	40 68       	lddsp	r8,sp[0x18]
8000543a:	ae 78       	st.h	r7[0xe],r8
8000543c:	40 88       	lddsp	r8,sp[0x20]
8000543e:	8f 48       	st.w	r7[0x10],r8
80005440:	40 a8       	lddsp	r8,sp[0x28]
80005442:	8f b8       	st.w	r7[0x2c],r8
80005444:	40 c8       	lddsp	r8,sp[0x30]
80005446:	8f c8       	st.w	r7[0x30],r8
80005448:	40 d8       	lddsp	r8,sp[0x34]
8000544a:	8f 58       	st.w	r7[0x14],r8
8000544c:	40 e8       	lddsp	r8,sp[0x38]
8000544e:	30 0c       	mov	r12,0
80005450:	8f 78       	st.w	r7[0x1c],r8
80005452:	40 f8       	lddsp	r8,sp[0x3c]
80005454:	8f 98       	st.w	r7[0x24],r8
80005456:	2f 0d       	sub	sp,-64
80005458:	d8 22       	popm	r4-r7,pc
8000545a:	d7 03       	nop

8000545c <_sbrk>:
8000545c:	d4 01       	pushm	lr
8000545e:	e0 68 07 d0 	mov	r8,2000
80005462:	70 09       	ld.w	r9,r8[0x0]
80005464:	58 09       	cp.w	r9,0
80005466:	c0 41       	brne	8000546e <_sbrk+0x12>
80005468:	e0 69 07 e0 	mov	r9,2016
8000546c:	91 09       	st.w	r8[0x0],r9
8000546e:	e0 69 07 d0 	mov	r9,2000
80005472:	e0 6a f0 00 	mov	r10,61440
80005476:	72 08       	ld.w	r8,r9[0x0]
80005478:	f0 0c 00 0c 	add	r12,r8,r12
8000547c:	14 3c       	cp.w	r12,r10
8000547e:	e0 8b 00 04 	brhi	80005486 <_sbrk+0x2a>
80005482:	93 0c       	st.w	r9[0x0],r12
80005484:	c0 68       	rjmp	80005490 <_sbrk+0x34>
80005486:	e0 a0 18 cd 	rcall	80008620 <__errno>
8000548a:	30 c8       	mov	r8,12
8000548c:	99 08       	st.w	r12[0x0],r8
8000548e:	3f f8       	mov	r8,-1
80005490:	10 9c       	mov	r12,r8
80005492:	d8 02       	popm	pc

80005494 <get_arg>:
80005494:	d4 31       	pushm	r0-r7,lr
80005496:	20 8d       	sub	sp,32
80005498:	fa c4 ff bc 	sub	r4,sp,-68
8000549c:	50 4b       	stdsp	sp[0x10],r11
8000549e:	68 2e       	ld.w	lr,r4[0x8]
800054a0:	50 58       	stdsp	sp[0x14],r8
800054a2:	12 96       	mov	r6,r9
800054a4:	7c 0b       	ld.w	r11,lr[0x0]
800054a6:	70 05       	ld.w	r5,r8[0x0]
800054a8:	50 6e       	stdsp	sp[0x18],lr
800054aa:	58 0b       	cp.w	r11,0
800054ac:	f4 0b 17 00 	moveq	r11,r10
800054b0:	68 03       	ld.w	r3,r4[0x0]
800054b2:	68 11       	ld.w	r1,r4[0x4]
800054b4:	40 49       	lddsp	r9,sp[0x10]
800054b6:	30 08       	mov	r8,0
800054b8:	c2 89       	rjmp	80005708 <get_arg+0x274>
800054ba:	2f fb       	sub	r11,-1
800054bc:	32 5c       	mov	r12,37
800054be:	17 8a       	ld.ub	r10,r11[0x0]
800054c0:	f8 0a 18 00 	cp.b	r10,r12
800054c4:	5f 1e       	srne	lr
800054c6:	f0 0a 18 00 	cp.b	r10,r8
800054ca:	5f 1c       	srne	r12
800054cc:	fd ec 00 0c 	and	r12,lr,r12
800054d0:	f0 0c 18 00 	cp.b	r12,r8
800054d4:	cf 31       	brne	800054ba <get_arg+0x26>
800054d6:	58 0a       	cp.w	r10,0
800054d8:	e0 80 01 25 	breq	80005722 <get_arg+0x28e>
800054dc:	30 0c       	mov	r12,0
800054de:	3f fa       	mov	r10,-1
800054e0:	18 90       	mov	r0,r12
800054e2:	50 3a       	stdsp	sp[0xc],r10
800054e4:	18 94       	mov	r4,r12
800054e6:	18 92       	mov	r2,r12
800054e8:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800054ec:	16 97       	mov	r7,r11
800054ee:	50 7c       	stdsp	sp[0x1c],r12
800054f0:	fe cc af 30 	sub	r12,pc,-20688
800054f4:	0f 3a       	ld.ub	r10,r7++
800054f6:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800054fa:	40 7c       	lddsp	r12,sp[0x1c]
800054fc:	1c 0c       	add	r12,lr
800054fe:	fe ce b0 02 	sub	lr,pc,-20478
80005502:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80005506:	20 1e       	sub	lr,1
80005508:	50 0e       	stdsp	sp[0x0],lr
8000550a:	fe ce b0 7a 	sub	lr,pc,-20358
8000550e:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80005512:	50 7c       	stdsp	sp[0x1c],r12
80005514:	40 0c       	lddsp	r12,sp[0x0]
80005516:	58 7c       	cp.w	r12,7
80005518:	e0 8b 00 f1 	brhi	800056fa <get_arg+0x266>
8000551c:	fe ce b2 2c 	sub	lr,pc,-19924
80005520:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80005524:	36 8b       	mov	r11,104
80005526:	f6 0a 18 00 	cp.b	r10,r11
8000552a:	e0 80 00 e8 	breq	800056fa <get_arg+0x266>
8000552e:	37 1b       	mov	r11,113
80005530:	f6 0a 18 00 	cp.b	r10,r11
80005534:	c0 70       	breq	80005542 <get_arg+0xae>
80005536:	34 cb       	mov	r11,76
80005538:	f6 0a 18 00 	cp.b	r10,r11
8000553c:	c0 51       	brne	80005546 <get_arg+0xb2>
8000553e:	a3 b4       	sbr	r4,0x3
80005540:	cd d8       	rjmp	800056fa <get_arg+0x266>
80005542:	a5 b4       	sbr	r4,0x5
80005544:	cd b8       	rjmp	800056fa <get_arg+0x266>
80005546:	08 9a       	mov	r10,r4
80005548:	0e 9b       	mov	r11,r7
8000554a:	a5 aa       	sbr	r10,0x4
8000554c:	17 3c       	ld.ub	r12,r11++
8000554e:	a5 b4       	sbr	r4,0x5
80005550:	36 ce       	mov	lr,108
80005552:	fc 0c 18 00 	cp.b	r12,lr
80005556:	e0 80 00 d3 	breq	800056fc <get_arg+0x268>
8000555a:	14 94       	mov	r4,r10
8000555c:	cc f8       	rjmp	800056fa <get_arg+0x266>
8000555e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005562:	36 7c       	mov	r12,103
80005564:	f8 0a 18 00 	cp.b	r10,r12
80005568:	e0 8b 00 27 	brhi	800055b6 <get_arg+0x122>
8000556c:	36 5b       	mov	r11,101
8000556e:	f6 0a 18 00 	cp.b	r10,r11
80005572:	c4 82       	brcc	80005602 <get_arg+0x16e>
80005574:	34 fb       	mov	r11,79
80005576:	f6 0a 18 00 	cp.b	r10,r11
8000557a:	c4 80       	breq	8000560a <get_arg+0x176>
8000557c:	e0 8b 00 0c 	brhi	80005594 <get_arg+0x100>
80005580:	34 5b       	mov	r11,69
80005582:	f6 0a 18 00 	cp.b	r10,r11
80005586:	c3 e0       	breq	80005602 <get_arg+0x16e>
80005588:	34 7b       	mov	r11,71
8000558a:	f6 0a 18 00 	cp.b	r10,r11
8000558e:	c3 a0       	breq	80005602 <get_arg+0x16e>
80005590:	34 4b       	mov	r11,68
80005592:	c0 88       	rjmp	800055a2 <get_arg+0x10e>
80005594:	35 8b       	mov	r11,88
80005596:	f6 0a 18 00 	cp.b	r10,r11
8000559a:	c2 c0       	breq	800055f2 <get_arg+0x15e>
8000559c:	e0 8b 00 07 	brhi	800055aa <get_arg+0x116>
800055a0:	35 5b       	mov	r11,85
800055a2:	f6 0a 18 00 	cp.b	r10,r11
800055a6:	c3 51       	brne	80005610 <get_arg+0x17c>
800055a8:	c3 18       	rjmp	8000560a <get_arg+0x176>
800055aa:	36 3b       	mov	r11,99
800055ac:	f6 0a 18 00 	cp.b	r10,r11
800055b0:	c2 f0       	breq	8000560e <get_arg+0x17a>
800055b2:	36 4b       	mov	r11,100
800055b4:	c0 e8       	rjmp	800055d0 <get_arg+0x13c>
800055b6:	37 0b       	mov	r11,112
800055b8:	f6 0a 18 00 	cp.b	r10,r11
800055bc:	c2 50       	breq	80005606 <get_arg+0x172>
800055be:	e0 8b 00 0d 	brhi	800055d8 <get_arg+0x144>
800055c2:	36 eb       	mov	r11,110
800055c4:	f6 0a 18 00 	cp.b	r10,r11
800055c8:	c1 f0       	breq	80005606 <get_arg+0x172>
800055ca:	e0 8b 00 14 	brhi	800055f2 <get_arg+0x15e>
800055ce:	36 9b       	mov	r11,105
800055d0:	f6 0a 18 00 	cp.b	r10,r11
800055d4:	c1 e1       	brne	80005610 <get_arg+0x17c>
800055d6:	c0 e8       	rjmp	800055f2 <get_arg+0x15e>
800055d8:	37 5b       	mov	r11,117
800055da:	f6 0a 18 00 	cp.b	r10,r11
800055de:	c0 a0       	breq	800055f2 <get_arg+0x15e>
800055e0:	37 8b       	mov	r11,120
800055e2:	f6 0a 18 00 	cp.b	r10,r11
800055e6:	c0 60       	breq	800055f2 <get_arg+0x15e>
800055e8:	37 3b       	mov	r11,115
800055ea:	f6 0a 18 00 	cp.b	r10,r11
800055ee:	c1 11       	brne	80005610 <get_arg+0x17c>
800055f0:	c0 b8       	rjmp	80005606 <get_arg+0x172>
800055f2:	ed b4 00 04 	bld	r4,0x4
800055f6:	c0 a0       	breq	8000560a <get_arg+0x176>
800055f8:	ed b4 00 05 	bld	r4,0x5
800055fc:	c0 91       	brne	8000560e <get_arg+0x17a>
800055fe:	30 20       	mov	r0,2
80005600:	c0 88       	rjmp	80005610 <get_arg+0x17c>
80005602:	30 40       	mov	r0,4
80005604:	c0 68       	rjmp	80005610 <get_arg+0x17c>
80005606:	30 30       	mov	r0,3
80005608:	c0 48       	rjmp	80005610 <get_arg+0x17c>
8000560a:	30 10       	mov	r0,1
8000560c:	c0 28       	rjmp	80005610 <get_arg+0x17c>
8000560e:	30 00       	mov	r0,0
80005610:	40 3b       	lddsp	r11,sp[0xc]
80005612:	5b fb       	cp.w	r11,-1
80005614:	c0 40       	breq	8000561c <get_arg+0x188>
80005616:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000561a:	c7 08       	rjmp	800056fa <get_arg+0x266>
8000561c:	58 60       	cp.w	r0,6
8000561e:	e0 8b 00 6e 	brhi	800056fa <get_arg+0x266>
80005622:	6c 0a       	ld.w	r10,r6[0x0]
80005624:	ea cc ff ff 	sub	r12,r5,-1
80005628:	fe ce b3 18 	sub	lr,pc,-19688
8000562c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80005630:	f4 cb ff f8 	sub	r11,r10,-8
80005634:	8d 0b       	st.w	r6[0x0],r11
80005636:	f4 ea 00 00 	ld.d	r10,r10[0]
8000563a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000563e:	c0 f8       	rjmp	8000565c <get_arg+0x1c8>
80005640:	f4 cb ff fc 	sub	r11,r10,-4
80005644:	8d 0b       	st.w	r6[0x0],r11
80005646:	74 0a       	ld.w	r10,r10[0x0]
80005648:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000564c:	c0 88       	rjmp	8000565c <get_arg+0x1c8>
8000564e:	f4 cb ff f8 	sub	r11,r10,-8
80005652:	8d 0b       	st.w	r6[0x0],r11
80005654:	f4 ea 00 00 	ld.d	r10,r10[0]
80005658:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000565c:	0e 9b       	mov	r11,r7
8000565e:	18 95       	mov	r5,r12
80005660:	c4 e8       	rjmp	800056fc <get_arg+0x268>
80005662:	62 0a       	ld.w	r10,r1[0x0]
80005664:	5b fa       	cp.w	r10,-1
80005666:	c0 b1       	brne	8000567c <get_arg+0x1e8>
80005668:	50 19       	stdsp	sp[0x4],r9
8000566a:	50 28       	stdsp	sp[0x8],r8
8000566c:	e0 6a 00 80 	mov	r10,128
80005670:	30 0b       	mov	r11,0
80005672:	02 9c       	mov	r12,r1
80005674:	fe b0 fc f6 	rcall	80005060 <memset>
80005678:	40 28       	lddsp	r8,sp[0x8]
8000567a:	40 19       	lddsp	r9,sp[0x4]
8000567c:	e4 cc 00 01 	sub	r12,r2,1
80005680:	0e 9b       	mov	r11,r7
80005682:	50 3c       	stdsp	sp[0xc],r12
80005684:	f2 0c 0c 49 	max	r9,r9,r12
80005688:	c3 a8       	rjmp	800056fc <get_arg+0x268>
8000568a:	62 0a       	ld.w	r10,r1[0x0]
8000568c:	5b fa       	cp.w	r10,-1
8000568e:	c0 b1       	brne	800056a4 <get_arg+0x210>
80005690:	50 19       	stdsp	sp[0x4],r9
80005692:	50 28       	stdsp	sp[0x8],r8
80005694:	e0 6a 00 80 	mov	r10,128
80005698:	30 0b       	mov	r11,0
8000569a:	02 9c       	mov	r12,r1
8000569c:	fe b0 fc e2 	rcall	80005060 <memset>
800056a0:	40 28       	lddsp	r8,sp[0x8]
800056a2:	40 19       	lddsp	r9,sp[0x4]
800056a4:	20 12       	sub	r2,1
800056a6:	30 0a       	mov	r10,0
800056a8:	0e 9b       	mov	r11,r7
800056aa:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800056ae:	f2 02 0c 49 	max	r9,r9,r2
800056b2:	c2 58       	rjmp	800056fc <get_arg+0x268>
800056b4:	16 97       	mov	r7,r11
800056b6:	6c 0a       	ld.w	r10,r6[0x0]
800056b8:	f4 cb ff fc 	sub	r11,r10,-4
800056bc:	8d 0b       	st.w	r6[0x0],r11
800056be:	74 0a       	ld.w	r10,r10[0x0]
800056c0:	0e 9b       	mov	r11,r7
800056c2:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800056c6:	2f f5       	sub	r5,-1
800056c8:	c1 a8       	rjmp	800056fc <get_arg+0x268>
800056ca:	f4 c2 00 30 	sub	r2,r10,48
800056ce:	c0 68       	rjmp	800056da <get_arg+0x246>
800056d0:	e4 02 00 22 	add	r2,r2,r2<<0x2
800056d4:	2f f7       	sub	r7,-1
800056d6:	f4 02 00 12 	add	r2,r10,r2<<0x1
800056da:	0f 8a       	ld.ub	r10,r7[0x0]
800056dc:	58 0a       	cp.w	r10,0
800056de:	c0 e0       	breq	800056fa <get_arg+0x266>
800056e0:	23 0a       	sub	r10,48
800056e2:	58 9a       	cp.w	r10,9
800056e4:	fe 98 ff f6 	brls	800056d0 <get_arg+0x23c>
800056e8:	c0 98       	rjmp	800056fa <get_arg+0x266>
800056ea:	2f f7       	sub	r7,-1
800056ec:	0f 8a       	ld.ub	r10,r7[0x0]
800056ee:	58 0a       	cp.w	r10,0
800056f0:	c0 50       	breq	800056fa <get_arg+0x266>
800056f2:	23 0a       	sub	r10,48
800056f4:	58 9a       	cp.w	r10,9
800056f6:	fe 98 ff fa 	brls	800056ea <get_arg+0x256>
800056fa:	0e 9b       	mov	r11,r7
800056fc:	40 7c       	lddsp	r12,sp[0x1c]
800056fe:	30 ba       	mov	r10,11
80005700:	f4 0c 18 00 	cp.b	r12,r10
80005704:	fe 91 fe f2 	brne	800054e8 <get_arg+0x54>
80005708:	40 42       	lddsp	r2,sp[0x10]
8000570a:	17 8c       	ld.ub	r12,r11[0x0]
8000570c:	0a 32       	cp.w	r2,r5
8000570e:	5f 4a       	srge	r10
80005710:	f0 0c 18 00 	cp.b	r12,r8
80005714:	5f 1c       	srne	r12
80005716:	f9 ea 00 0a 	and	r10,r12,r10
8000571a:	f0 0a 18 00 	cp.b	r10,r8
8000571e:	fe 91 fe cf 	brne	800054bc <get_arg+0x28>
80005722:	30 08       	mov	r8,0
80005724:	40 4e       	lddsp	lr,sp[0x10]
80005726:	17 8a       	ld.ub	r10,r11[0x0]
80005728:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000572c:	f0 0a 18 00 	cp.b	r10,r8
80005730:	fc 09 17 10 	movne	r9,lr
80005734:	e6 05 00 38 	add	r8,r3,r5<<0x3
80005738:	06 9e       	mov	lr,r3
8000573a:	c2 a8       	rjmp	8000578e <get_arg+0x2fa>
8000573c:	62 0a       	ld.w	r10,r1[0x0]
8000573e:	58 3a       	cp.w	r10,3
80005740:	c1 e0       	breq	8000577c <get_arg+0x2e8>
80005742:	e0 89 00 07 	brgt	80005750 <get_arg+0x2bc>
80005746:	58 1a       	cp.w	r10,1
80005748:	c1 a0       	breq	8000577c <get_arg+0x2e8>
8000574a:	58 2a       	cp.w	r10,2
8000574c:	c1 81       	brne	8000577c <get_arg+0x2e8>
8000574e:	c0 58       	rjmp	80005758 <get_arg+0x2c4>
80005750:	58 5a       	cp.w	r10,5
80005752:	c0 c0       	breq	8000576a <get_arg+0x2d6>
80005754:	c0 b5       	brlt	8000576a <get_arg+0x2d6>
80005756:	c1 38       	rjmp	8000577c <get_arg+0x2e8>
80005758:	6c 0a       	ld.w	r10,r6[0x0]
8000575a:	f4 cc ff f8 	sub	r12,r10,-8
8000575e:	8d 0c       	st.w	r6[0x0],r12
80005760:	f4 e2 00 00 	ld.d	r2,r10[0]
80005764:	f0 e3 00 00 	st.d	r8[0],r2
80005768:	c1 08       	rjmp	80005788 <get_arg+0x2f4>
8000576a:	6c 0a       	ld.w	r10,r6[0x0]
8000576c:	f4 cc ff f8 	sub	r12,r10,-8
80005770:	8d 0c       	st.w	r6[0x0],r12
80005772:	f4 e2 00 00 	ld.d	r2,r10[0]
80005776:	f0 e3 00 00 	st.d	r8[0],r2
8000577a:	c0 78       	rjmp	80005788 <get_arg+0x2f4>
8000577c:	6c 0a       	ld.w	r10,r6[0x0]
8000577e:	f4 cc ff fc 	sub	r12,r10,-4
80005782:	8d 0c       	st.w	r6[0x0],r12
80005784:	74 0a       	ld.w	r10,r10[0x0]
80005786:	91 0a       	st.w	r8[0x0],r10
80005788:	2f f5       	sub	r5,-1
8000578a:	2f 88       	sub	r8,-8
8000578c:	2f c1       	sub	r1,-4
8000578e:	12 35       	cp.w	r5,r9
80005790:	fe 9a ff d6 	brle	8000573c <get_arg+0x2a8>
80005794:	1c 93       	mov	r3,lr
80005796:	40 52       	lddsp	r2,sp[0x14]
80005798:	40 6e       	lddsp	lr,sp[0x18]
8000579a:	85 05       	st.w	r2[0x0],r5
8000579c:	9d 0b       	st.w	lr[0x0],r11
8000579e:	40 4b       	lddsp	r11,sp[0x10]
800057a0:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800057a4:	2f 8d       	sub	sp,-32
800057a6:	d8 32       	popm	r0-r7,pc

800057a8 <__sprint_r>:
800057a8:	d4 21       	pushm	r4-r7,lr
800057aa:	14 97       	mov	r7,r10
800057ac:	74 28       	ld.w	r8,r10[0x8]
800057ae:	58 08       	cp.w	r8,0
800057b0:	c0 41       	brne	800057b8 <__sprint_r+0x10>
800057b2:	95 18       	st.w	r10[0x4],r8
800057b4:	10 9c       	mov	r12,r8
800057b6:	d8 22       	popm	r4-r7,pc
800057b8:	e0 a0 19 72 	rcall	80008a9c <__sfvwrite_r>
800057bc:	30 08       	mov	r8,0
800057be:	8f 18       	st.w	r7[0x4],r8
800057c0:	8f 28       	st.w	r7[0x8],r8
800057c2:	d8 22       	popm	r4-r7,pc

800057c4 <_vfprintf_r>:
800057c4:	d4 31       	pushm	r0-r7,lr
800057c6:	fa cd 06 bc 	sub	sp,sp,1724
800057ca:	51 09       	stdsp	sp[0x40],r9
800057cc:	16 91       	mov	r1,r11
800057ce:	14 97       	mov	r7,r10
800057d0:	18 95       	mov	r5,r12
800057d2:	e0 a0 1a d5 	rcall	80008d7c <_localeconv_r>
800057d6:	78 0c       	ld.w	r12,r12[0x0]
800057d8:	50 cc       	stdsp	sp[0x30],r12
800057da:	58 05       	cp.w	r5,0
800057dc:	c0 70       	breq	800057ea <_vfprintf_r+0x26>
800057de:	6a 68       	ld.w	r8,r5[0x18]
800057e0:	58 08       	cp.w	r8,0
800057e2:	c0 41       	brne	800057ea <_vfprintf_r+0x26>
800057e4:	0a 9c       	mov	r12,r5
800057e6:	e0 a0 17 fb 	rcall	800087dc <__sinit>
800057ea:	fe c8 b1 1a 	sub	r8,pc,-20198
800057ee:	10 31       	cp.w	r1,r8
800057f0:	c0 31       	brne	800057f6 <_vfprintf_r+0x32>
800057f2:	6a 01       	ld.w	r1,r5[0x0]
800057f4:	c0 c8       	rjmp	8000580c <_vfprintf_r+0x48>
800057f6:	fe c8 b1 06 	sub	r8,pc,-20218
800057fa:	10 31       	cp.w	r1,r8
800057fc:	c0 31       	brne	80005802 <_vfprintf_r+0x3e>
800057fe:	6a 11       	ld.w	r1,r5[0x4]
80005800:	c0 68       	rjmp	8000580c <_vfprintf_r+0x48>
80005802:	fe c8 b0 f2 	sub	r8,pc,-20238
80005806:	10 31       	cp.w	r1,r8
80005808:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000580c:	82 68       	ld.sh	r8,r1[0xc]
8000580e:	ed b8 00 03 	bld	r8,0x3
80005812:	c0 41       	brne	8000581a <_vfprintf_r+0x56>
80005814:	62 48       	ld.w	r8,r1[0x10]
80005816:	58 08       	cp.w	r8,0
80005818:	c0 71       	brne	80005826 <_vfprintf_r+0x62>
8000581a:	02 9b       	mov	r11,r1
8000581c:	0a 9c       	mov	r12,r5
8000581e:	e0 a0 0f 5d 	rcall	800076d8 <__swsetup_r>
80005822:	e0 81 0f 54 	brne	800076ca <_vfprintf_r+0x1f06>
80005826:	82 68       	ld.sh	r8,r1[0xc]
80005828:	10 99       	mov	r9,r8
8000582a:	e2 19 00 1a 	andl	r9,0x1a,COH
8000582e:	58 a9       	cp.w	r9,10
80005830:	c3 c1       	brne	800058a8 <_vfprintf_r+0xe4>
80005832:	82 79       	ld.sh	r9,r1[0xe]
80005834:	30 0a       	mov	r10,0
80005836:	f4 09 19 00 	cp.h	r9,r10
8000583a:	c3 75       	brlt	800058a8 <_vfprintf_r+0xe4>
8000583c:	a1 d8       	cbr	r8,0x1
8000583e:	fb 58 05 d0 	st.h	sp[1488],r8
80005842:	62 88       	ld.w	r8,r1[0x20]
80005844:	fb 48 05 e4 	st.w	sp[1508],r8
80005848:	62 a8       	ld.w	r8,r1[0x28]
8000584a:	fb 48 05 ec 	st.w	sp[1516],r8
8000584e:	fa c8 ff bc 	sub	r8,sp,-68
80005852:	fb 48 05 d4 	st.w	sp[1492],r8
80005856:	fb 48 05 c4 	st.w	sp[1476],r8
8000585a:	e0 68 04 00 	mov	r8,1024
8000585e:	fb 48 05 d8 	st.w	sp[1496],r8
80005862:	fb 48 05 cc 	st.w	sp[1484],r8
80005866:	30 08       	mov	r8,0
80005868:	fb 59 05 d2 	st.h	sp[1490],r9
8000586c:	0e 9a       	mov	r10,r7
8000586e:	41 09       	lddsp	r9,sp[0x40]
80005870:	fa c7 fa 3c 	sub	r7,sp,-1476
80005874:	fb 48 05 dc 	st.w	sp[1500],r8
80005878:	0a 9c       	mov	r12,r5
8000587a:	0e 9b       	mov	r11,r7
8000587c:	ca 4f       	rcall	800057c4 <_vfprintf_r>
8000587e:	50 bc       	stdsp	sp[0x2c],r12
80005880:	c0 95       	brlt	80005892 <_vfprintf_r+0xce>
80005882:	0e 9b       	mov	r11,r7
80005884:	0a 9c       	mov	r12,r5
80005886:	e0 a0 16 d3 	rcall	8000862c <_fflush_r>
8000588a:	40 be       	lddsp	lr,sp[0x2c]
8000588c:	f9 be 01 ff 	movne	lr,-1
80005890:	50 be       	stdsp	sp[0x2c],lr
80005892:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80005896:	ed b8 00 06 	bld	r8,0x6
8000589a:	e0 81 0f 1a 	brne	800076ce <_vfprintf_r+0x1f0a>
8000589e:	82 68       	ld.sh	r8,r1[0xc]
800058a0:	a7 a8       	sbr	r8,0x6
800058a2:	a2 68       	st.h	r1[0xc],r8
800058a4:	e0 8f 0f 15 	bral	800076ce <_vfprintf_r+0x1f0a>
800058a8:	30 08       	mov	r8,0
800058aa:	fb 48 06 b4 	st.w	sp[1716],r8
800058ae:	fb 48 06 90 	st.w	sp[1680],r8
800058b2:	fb 48 06 8c 	st.w	sp[1676],r8
800058b6:	fb 48 06 b0 	st.w	sp[1712],r8
800058ba:	30 08       	mov	r8,0
800058bc:	30 09       	mov	r9,0
800058be:	50 a7       	stdsp	sp[0x28],r7
800058c0:	50 78       	stdsp	sp[0x1c],r8
800058c2:	fa c3 f9 e0 	sub	r3,sp,-1568
800058c6:	3f f8       	mov	r8,-1
800058c8:	50 59       	stdsp	sp[0x14],r9
800058ca:	fb 43 06 88 	st.w	sp[1672],r3
800058ce:	fb 48 05 44 	st.w	sp[1348],r8
800058d2:	12 9c       	mov	r12,r9
800058d4:	50 69       	stdsp	sp[0x18],r9
800058d6:	50 d9       	stdsp	sp[0x34],r9
800058d8:	50 e9       	stdsp	sp[0x38],r9
800058da:	50 b9       	stdsp	sp[0x2c],r9
800058dc:	12 97       	mov	r7,r9
800058de:	0a 94       	mov	r4,r5
800058e0:	40 a2       	lddsp	r2,sp[0x28]
800058e2:	32 5a       	mov	r10,37
800058e4:	30 08       	mov	r8,0
800058e6:	c0 28       	rjmp	800058ea <_vfprintf_r+0x126>
800058e8:	2f f2       	sub	r2,-1
800058ea:	05 89       	ld.ub	r9,r2[0x0]
800058ec:	f0 09 18 00 	cp.b	r9,r8
800058f0:	5f 1b       	srne	r11
800058f2:	f4 09 18 00 	cp.b	r9,r10
800058f6:	5f 19       	srne	r9
800058f8:	f3 eb 00 0b 	and	r11,r9,r11
800058fc:	f0 0b 18 00 	cp.b	r11,r8
80005900:	cf 41       	brne	800058e8 <_vfprintf_r+0x124>
80005902:	40 ab       	lddsp	r11,sp[0x28]
80005904:	e4 0b 01 06 	sub	r6,r2,r11
80005908:	c1 e0       	breq	80005944 <_vfprintf_r+0x180>
8000590a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000590e:	0c 08       	add	r8,r6
80005910:	87 0b       	st.w	r3[0x0],r11
80005912:	fb 48 06 90 	st.w	sp[1680],r8
80005916:	87 16       	st.w	r3[0x4],r6
80005918:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000591c:	2f f8       	sub	r8,-1
8000591e:	fb 48 06 8c 	st.w	sp[1676],r8
80005922:	58 78       	cp.w	r8,7
80005924:	e0 89 00 04 	brgt	8000592c <_vfprintf_r+0x168>
80005928:	2f 83       	sub	r3,-8
8000592a:	c0 a8       	rjmp	8000593e <_vfprintf_r+0x17a>
8000592c:	fa ca f9 78 	sub	r10,sp,-1672
80005930:	02 9b       	mov	r11,r1
80005932:	08 9c       	mov	r12,r4
80005934:	c3 af       	rcall	800057a8 <__sprint_r>
80005936:	e0 81 0e c6 	brne	800076c2 <_vfprintf_r+0x1efe>
8000593a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000593e:	40 ba       	lddsp	r10,sp[0x2c]
80005940:	0c 0a       	add	r10,r6
80005942:	50 ba       	stdsp	sp[0x2c],r10
80005944:	05 89       	ld.ub	r9,r2[0x0]
80005946:	30 08       	mov	r8,0
80005948:	f0 09 18 00 	cp.b	r9,r8
8000594c:	e0 80 0e aa 	breq	800076a0 <_vfprintf_r+0x1edc>
80005950:	30 09       	mov	r9,0
80005952:	fb 68 06 bb 	st.b	sp[1723],r8
80005956:	0e 96       	mov	r6,r7
80005958:	e4 c8 ff ff 	sub	r8,r2,-1
8000595c:	3f fe       	mov	lr,-1
8000595e:	50 93       	stdsp	sp[0x24],r3
80005960:	50 41       	stdsp	sp[0x10],r1
80005962:	0e 93       	mov	r3,r7
80005964:	04 91       	mov	r1,r2
80005966:	50 89       	stdsp	sp[0x20],r9
80005968:	50 a8       	stdsp	sp[0x28],r8
8000596a:	50 2e       	stdsp	sp[0x8],lr
8000596c:	50 39       	stdsp	sp[0xc],r9
8000596e:	12 95       	mov	r5,r9
80005970:	12 90       	mov	r0,r9
80005972:	10 97       	mov	r7,r8
80005974:	08 92       	mov	r2,r4
80005976:	c0 78       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005978:	3f fc       	mov	r12,-1
8000597a:	08 97       	mov	r7,r4
8000597c:	50 2c       	stdsp	sp[0x8],r12
8000597e:	c0 38       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005980:	30 0b       	mov	r11,0
80005982:	50 3b       	stdsp	sp[0xc],r11
80005984:	0f 38       	ld.ub	r8,r7++
80005986:	c0 28       	rjmp	8000598a <_vfprintf_r+0x1c6>
80005988:	12 90       	mov	r0,r9
8000598a:	f0 c9 00 20 	sub	r9,r8,32
8000598e:	e0 49 00 58 	cp.w	r9,88
80005992:	e0 8b 0a 30 	brhi	80006df2 <_vfprintf_r+0x162e>
80005996:	fe ca b6 6a 	sub	r10,pc,-18838
8000599a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000599e:	50 a7       	stdsp	sp[0x28],r7
800059a0:	50 80       	stdsp	sp[0x20],r0
800059a2:	0c 97       	mov	r7,r6
800059a4:	04 94       	mov	r4,r2
800059a6:	06 96       	mov	r6,r3
800059a8:	02 92       	mov	r2,r1
800059aa:	fe c9 b4 42 	sub	r9,pc,-19390
800059ae:	40 93       	lddsp	r3,sp[0x24]
800059b0:	10 90       	mov	r0,r8
800059b2:	40 41       	lddsp	r1,sp[0x10]
800059b4:	50 d9       	stdsp	sp[0x34],r9
800059b6:	e0 8f 08 8e 	bral	80006ad2 <_vfprintf_r+0x130e>
800059ba:	30 08       	mov	r8,0
800059bc:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800059c0:	f0 09 18 00 	cp.b	r9,r8
800059c4:	ce 01       	brne	80005984 <_vfprintf_r+0x1c0>
800059c6:	32 08       	mov	r8,32
800059c8:	c6 e8       	rjmp	80005aa4 <_vfprintf_r+0x2e0>
800059ca:	a1 a5       	sbr	r5,0x0
800059cc:	cd cb       	rjmp	80005984 <_vfprintf_r+0x1c0>
800059ce:	0f 89       	ld.ub	r9,r7[0x0]
800059d0:	f2 c8 00 30 	sub	r8,r9,48
800059d4:	58 98       	cp.w	r8,9
800059d6:	e0 8b 00 1d 	brhi	80005a10 <_vfprintf_r+0x24c>
800059da:	ee c8 ff ff 	sub	r8,r7,-1
800059de:	30 0b       	mov	r11,0
800059e0:	23 09       	sub	r9,48
800059e2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800059e6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800059ea:	11 39       	ld.ub	r9,r8++
800059ec:	f2 ca 00 30 	sub	r10,r9,48
800059f0:	58 9a       	cp.w	r10,9
800059f2:	fe 98 ff f7 	brls	800059e0 <_vfprintf_r+0x21c>
800059f6:	e0 49 00 24 	cp.w	r9,36
800059fa:	cc 31       	brne	80005980 <_vfprintf_r+0x1bc>
800059fc:	e0 4b 00 20 	cp.w	r11,32
80005a00:	e0 89 0e 60 	brgt	800076c0 <_vfprintf_r+0x1efc>
80005a04:	20 1b       	sub	r11,1
80005a06:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005a0a:	12 3b       	cp.w	r11,r9
80005a0c:	c0 95       	brlt	80005a1e <_vfprintf_r+0x25a>
80005a0e:	c1 08       	rjmp	80005a2e <_vfprintf_r+0x26a>
80005a10:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005a14:	ec ca ff ff 	sub	r10,r6,-1
80005a18:	12 36       	cp.w	r6,r9
80005a1a:	c1 f5       	brlt	80005a58 <_vfprintf_r+0x294>
80005a1c:	c2 68       	rjmp	80005a68 <_vfprintf_r+0x2a4>
80005a1e:	fa ce f9 44 	sub	lr,sp,-1724
80005a22:	10 97       	mov	r7,r8
80005a24:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80005a28:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80005a2c:	c3 58       	rjmp	80005a96 <_vfprintf_r+0x2d2>
80005a2e:	10 97       	mov	r7,r8
80005a30:	fa c8 f9 50 	sub	r8,sp,-1712
80005a34:	1a d8       	st.w	--sp,r8
80005a36:	fa c8 fa b8 	sub	r8,sp,-1352
80005a3a:	1a d8       	st.w	--sp,r8
80005a3c:	fa c8 fb b4 	sub	r8,sp,-1100
80005a40:	02 9a       	mov	r10,r1
80005a42:	1a d8       	st.w	--sp,r8
80005a44:	04 9c       	mov	r12,r2
80005a46:	fa c8 f9 40 	sub	r8,sp,-1728
80005a4a:	fa c9 ff b4 	sub	r9,sp,-76
80005a4e:	fe b0 fd 23 	rcall	80005494 <get_arg>
80005a52:	2f dd       	sub	sp,-12
80005a54:	78 00       	ld.w	r0,r12[0x0]
80005a56:	c2 08       	rjmp	80005a96 <_vfprintf_r+0x2d2>
80005a58:	fa cc f9 44 	sub	r12,sp,-1724
80005a5c:	14 96       	mov	r6,r10
80005a5e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005a62:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80005a66:	c1 88       	rjmp	80005a96 <_vfprintf_r+0x2d2>
80005a68:	41 08       	lddsp	r8,sp[0x40]
80005a6a:	59 f9       	cp.w	r9,31
80005a6c:	e0 89 00 11 	brgt	80005a8e <_vfprintf_r+0x2ca>
80005a70:	f0 cb ff fc 	sub	r11,r8,-4
80005a74:	51 0b       	stdsp	sp[0x40],r11
80005a76:	70 00       	ld.w	r0,r8[0x0]
80005a78:	fa cb f9 44 	sub	r11,sp,-1724
80005a7c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005a80:	f1 40 fd 88 	st.w	r8[-632],r0
80005a84:	2f f9       	sub	r9,-1
80005a86:	14 96       	mov	r6,r10
80005a88:	fb 49 06 b4 	st.w	sp[1716],r9
80005a8c:	c0 58       	rjmp	80005a96 <_vfprintf_r+0x2d2>
80005a8e:	70 00       	ld.w	r0,r8[0x0]
80005a90:	14 96       	mov	r6,r10
80005a92:	2f c8       	sub	r8,-4
80005a94:	51 08       	stdsp	sp[0x40],r8
80005a96:	58 00       	cp.w	r0,0
80005a98:	fe 94 ff 76 	brge	80005984 <_vfprintf_r+0x1c0>
80005a9c:	5c 30       	neg	r0
80005a9e:	a3 a5       	sbr	r5,0x2
80005aa0:	c7 2b       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005aa2:	32 b8       	mov	r8,43
80005aa4:	fb 68 06 bb 	st.b	sp[1723],r8
80005aa8:	c6 eb       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005aaa:	0f 38       	ld.ub	r8,r7++
80005aac:	e0 48 00 2a 	cp.w	r8,42
80005ab0:	c0 30       	breq	80005ab6 <_vfprintf_r+0x2f2>
80005ab2:	30 09       	mov	r9,0
80005ab4:	c7 98       	rjmp	80005ba6 <_vfprintf_r+0x3e2>
80005ab6:	0f 88       	ld.ub	r8,r7[0x0]
80005ab8:	f0 c9 00 30 	sub	r9,r8,48
80005abc:	58 99       	cp.w	r9,9
80005abe:	e0 8b 00 1f 	brhi	80005afc <_vfprintf_r+0x338>
80005ac2:	ee c4 ff ff 	sub	r4,r7,-1
80005ac6:	30 0b       	mov	r11,0
80005ac8:	23 08       	sub	r8,48
80005aca:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005ace:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005ad2:	09 38       	ld.ub	r8,r4++
80005ad4:	f0 c9 00 30 	sub	r9,r8,48
80005ad8:	58 99       	cp.w	r9,9
80005ada:	fe 98 ff f7 	brls	80005ac8 <_vfprintf_r+0x304>
80005ade:	e0 48 00 24 	cp.w	r8,36
80005ae2:	fe 91 ff 4f 	brne	80005980 <_vfprintf_r+0x1bc>
80005ae6:	e0 4b 00 20 	cp.w	r11,32
80005aea:	e0 89 0d eb 	brgt	800076c0 <_vfprintf_r+0x1efc>
80005aee:	20 1b       	sub	r11,1
80005af0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005af4:	10 3b       	cp.w	r11,r8
80005af6:	c0 a5       	brlt	80005b0a <_vfprintf_r+0x346>
80005af8:	c1 18       	rjmp	80005b1a <_vfprintf_r+0x356>
80005afa:	d7 03       	nop
80005afc:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005b00:	ec c9 ff ff 	sub	r9,r6,-1
80005b04:	14 36       	cp.w	r6,r10
80005b06:	c1 f5       	brlt	80005b44 <_vfprintf_r+0x380>
80005b08:	c2 88       	rjmp	80005b58 <_vfprintf_r+0x394>
80005b0a:	fa ca f9 44 	sub	r10,sp,-1724
80005b0e:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80005b12:	f6 fb fd 88 	ld.w	r11,r11[-632]
80005b16:	50 2b       	stdsp	sp[0x8],r11
80005b18:	c3 c8       	rjmp	80005b90 <_vfprintf_r+0x3cc>
80005b1a:	fa c8 f9 50 	sub	r8,sp,-1712
80005b1e:	1a d8       	st.w	--sp,r8
80005b20:	fa c8 fa b8 	sub	r8,sp,-1352
80005b24:	1a d8       	st.w	--sp,r8
80005b26:	fa c8 fb b4 	sub	r8,sp,-1100
80005b2a:	02 9a       	mov	r10,r1
80005b2c:	1a d8       	st.w	--sp,r8
80005b2e:	04 9c       	mov	r12,r2
80005b30:	fa c8 f9 40 	sub	r8,sp,-1728
80005b34:	fa c9 ff b4 	sub	r9,sp,-76
80005b38:	fe b0 fc ae 	rcall	80005494 <get_arg>
80005b3c:	2f dd       	sub	sp,-12
80005b3e:	78 0c       	ld.w	r12,r12[0x0]
80005b40:	50 2c       	stdsp	sp[0x8],r12
80005b42:	c2 78       	rjmp	80005b90 <_vfprintf_r+0x3cc>
80005b44:	12 96       	mov	r6,r9
80005b46:	0e 94       	mov	r4,r7
80005b48:	fa c9 f9 44 	sub	r9,sp,-1724
80005b4c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005b50:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80005b54:	50 28       	stdsp	sp[0x8],r8
80005b56:	c1 d8       	rjmp	80005b90 <_vfprintf_r+0x3cc>
80005b58:	41 08       	lddsp	r8,sp[0x40]
80005b5a:	59 fa       	cp.w	r10,31
80005b5c:	e0 89 00 14 	brgt	80005b84 <_vfprintf_r+0x3c0>
80005b60:	f0 cb ff fc 	sub	r11,r8,-4
80005b64:	70 08       	ld.w	r8,r8[0x0]
80005b66:	51 0b       	stdsp	sp[0x40],r11
80005b68:	50 28       	stdsp	sp[0x8],r8
80005b6a:	fa c6 f9 44 	sub	r6,sp,-1724
80005b6e:	40 2e       	lddsp	lr,sp[0x8]
80005b70:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005b74:	f1 4e fd 88 	st.w	r8[-632],lr
80005b78:	2f fa       	sub	r10,-1
80005b7a:	0e 94       	mov	r4,r7
80005b7c:	fb 4a 06 b4 	st.w	sp[1716],r10
80005b80:	12 96       	mov	r6,r9
80005b82:	c0 78       	rjmp	80005b90 <_vfprintf_r+0x3cc>
80005b84:	70 0c       	ld.w	r12,r8[0x0]
80005b86:	0e 94       	mov	r4,r7
80005b88:	2f c8       	sub	r8,-4
80005b8a:	50 2c       	stdsp	sp[0x8],r12
80005b8c:	12 96       	mov	r6,r9
80005b8e:	51 08       	stdsp	sp[0x40],r8
80005b90:	40 2b       	lddsp	r11,sp[0x8]
80005b92:	58 0b       	cp.w	r11,0
80005b94:	fe 95 fe f2 	brlt	80005978 <_vfprintf_r+0x1b4>
80005b98:	08 97       	mov	r7,r4
80005b9a:	cf 5a       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005b9c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005ba0:	0f 38       	ld.ub	r8,r7++
80005ba2:	f4 09 00 19 	add	r9,r10,r9<<0x1
80005ba6:	f0 ca 00 30 	sub	r10,r8,48
80005baa:	58 9a       	cp.w	r10,9
80005bac:	fe 98 ff f8 	brls	80005b9c <_vfprintf_r+0x3d8>
80005bb0:	3f fa       	mov	r10,-1
80005bb2:	f2 0a 0c 49 	max	r9,r9,r10
80005bb6:	50 29       	stdsp	sp[0x8],r9
80005bb8:	ce 9a       	rjmp	8000598a <_vfprintf_r+0x1c6>
80005bba:	a7 b5       	sbr	r5,0x7
80005bbc:	ce 4a       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005bbe:	30 09       	mov	r9,0
80005bc0:	23 08       	sub	r8,48
80005bc2:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005bc6:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005bca:	0f 38       	ld.ub	r8,r7++
80005bcc:	f0 ca 00 30 	sub	r10,r8,48
80005bd0:	58 9a       	cp.w	r10,9
80005bd2:	fe 98 ff f7 	brls	80005bc0 <_vfprintf_r+0x3fc>
80005bd6:	e0 48 00 24 	cp.w	r8,36
80005bda:	fe 91 fe d7 	brne	80005988 <_vfprintf_r+0x1c4>
80005bde:	e0 49 00 20 	cp.w	r9,32
80005be2:	e0 89 0d 6f 	brgt	800076c0 <_vfprintf_r+0x1efc>
80005be6:	f2 c3 00 01 	sub	r3,r9,1
80005bea:	30 19       	mov	r9,1
80005bec:	50 39       	stdsp	sp[0xc],r9
80005bee:	cc ba       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005bf0:	a3 b5       	sbr	r5,0x3
80005bf2:	cc 9a       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005bf4:	a7 a5       	sbr	r5,0x6
80005bf6:	cc 7a       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005bf8:	0a 98       	mov	r8,r5
80005bfa:	a5 b5       	sbr	r5,0x5
80005bfc:	a5 a8       	sbr	r8,0x4
80005bfe:	0f 89       	ld.ub	r9,r7[0x0]
80005c00:	36 ce       	mov	lr,108
80005c02:	fc 09 18 00 	cp.b	r9,lr
80005c06:	f7 b7 00 ff 	subeq	r7,-1
80005c0a:	f0 05 17 10 	movne	r5,r8
80005c0e:	cb ba       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005c10:	a5 b5       	sbr	r5,0x5
80005c12:	cb 9a       	rjmp	80005984 <_vfprintf_r+0x1c0>
80005c14:	50 a7       	stdsp	sp[0x28],r7
80005c16:	50 80       	stdsp	sp[0x20],r0
80005c18:	0c 97       	mov	r7,r6
80005c1a:	10 90       	mov	r0,r8
80005c1c:	06 96       	mov	r6,r3
80005c1e:	04 94       	mov	r4,r2
80005c20:	40 93       	lddsp	r3,sp[0x24]
80005c22:	02 92       	mov	r2,r1
80005c24:	0e 99       	mov	r9,r7
80005c26:	40 41       	lddsp	r1,sp[0x10]
80005c28:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c2c:	40 3c       	lddsp	r12,sp[0xc]
80005c2e:	58 0c       	cp.w	r12,0
80005c30:	c1 d0       	breq	80005c6a <_vfprintf_r+0x4a6>
80005c32:	10 36       	cp.w	r6,r8
80005c34:	c0 64       	brge	80005c40 <_vfprintf_r+0x47c>
80005c36:	fa cb f9 44 	sub	r11,sp,-1724
80005c3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c3e:	c1 d8       	rjmp	80005c78 <_vfprintf_r+0x4b4>
80005c40:	fa c8 f9 50 	sub	r8,sp,-1712
80005c44:	1a d8       	st.w	--sp,r8
80005c46:	fa c8 fa b8 	sub	r8,sp,-1352
80005c4a:	1a d8       	st.w	--sp,r8
80005c4c:	fa c8 fb b4 	sub	r8,sp,-1100
80005c50:	1a d8       	st.w	--sp,r8
80005c52:	fa c8 f9 40 	sub	r8,sp,-1728
80005c56:	fa c9 ff b4 	sub	r9,sp,-76
80005c5a:	04 9a       	mov	r10,r2
80005c5c:	0c 9b       	mov	r11,r6
80005c5e:	08 9c       	mov	r12,r4
80005c60:	fe b0 fc 1a 	rcall	80005494 <get_arg>
80005c64:	2f dd       	sub	sp,-12
80005c66:	19 b8       	ld.ub	r8,r12[0x3]
80005c68:	c2 28       	rjmp	80005cac <_vfprintf_r+0x4e8>
80005c6a:	2f f7       	sub	r7,-1
80005c6c:	10 39       	cp.w	r9,r8
80005c6e:	c0 84       	brge	80005c7e <_vfprintf_r+0x4ba>
80005c70:	fa ca f9 44 	sub	r10,sp,-1724
80005c74:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005c78:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005c7c:	c1 88       	rjmp	80005cac <_vfprintf_r+0x4e8>
80005c7e:	41 09       	lddsp	r9,sp[0x40]
80005c80:	59 f8       	cp.w	r8,31
80005c82:	e0 89 00 12 	brgt	80005ca6 <_vfprintf_r+0x4e2>
80005c86:	f2 ca ff fc 	sub	r10,r9,-4
80005c8a:	51 0a       	stdsp	sp[0x40],r10
80005c8c:	72 09       	ld.w	r9,r9[0x0]
80005c8e:	fa c6 f9 44 	sub	r6,sp,-1724
80005c92:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005c96:	2f f8       	sub	r8,-1
80005c98:	f5 49 fd 88 	st.w	r10[-632],r9
80005c9c:	fb 48 06 b4 	st.w	sp[1716],r8
80005ca0:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005ca4:	c0 48       	rjmp	80005cac <_vfprintf_r+0x4e8>
80005ca6:	13 b8       	ld.ub	r8,r9[0x3]
80005ca8:	2f c9       	sub	r9,-4
80005caa:	51 09       	stdsp	sp[0x40],r9
80005cac:	fb 68 06 60 	st.b	sp[1632],r8
80005cb0:	30 0e       	mov	lr,0
80005cb2:	30 08       	mov	r8,0
80005cb4:	30 12       	mov	r2,1
80005cb6:	fb 68 06 bb 	st.b	sp[1723],r8
80005cba:	50 2e       	stdsp	sp[0x8],lr
80005cbc:	e0 8f 08 ad 	bral	80006e16 <_vfprintf_r+0x1652>
80005cc0:	50 a7       	stdsp	sp[0x28],r7
80005cc2:	50 80       	stdsp	sp[0x20],r0
80005cc4:	0c 97       	mov	r7,r6
80005cc6:	04 94       	mov	r4,r2
80005cc8:	06 96       	mov	r6,r3
80005cca:	02 92       	mov	r2,r1
80005ccc:	40 93       	lddsp	r3,sp[0x24]
80005cce:	10 90       	mov	r0,r8
80005cd0:	40 41       	lddsp	r1,sp[0x10]
80005cd2:	a5 a5       	sbr	r5,0x4
80005cd4:	c0 a8       	rjmp	80005ce8 <_vfprintf_r+0x524>
80005cd6:	50 a7       	stdsp	sp[0x28],r7
80005cd8:	50 80       	stdsp	sp[0x20],r0
80005cda:	0c 97       	mov	r7,r6
80005cdc:	04 94       	mov	r4,r2
80005cde:	06 96       	mov	r6,r3
80005ce0:	02 92       	mov	r2,r1
80005ce2:	40 93       	lddsp	r3,sp[0x24]
80005ce4:	10 90       	mov	r0,r8
80005ce6:	40 41       	lddsp	r1,sp[0x10]
80005ce8:	ed b5 00 05 	bld	r5,0x5
80005cec:	c5 11       	brne	80005d8e <_vfprintf_r+0x5ca>
80005cee:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005cf2:	40 3c       	lddsp	r12,sp[0xc]
80005cf4:	58 0c       	cp.w	r12,0
80005cf6:	c1 e0       	breq	80005d32 <_vfprintf_r+0x56e>
80005cf8:	10 36       	cp.w	r6,r8
80005cfa:	c0 64       	brge	80005d06 <_vfprintf_r+0x542>
80005cfc:	fa cb f9 44 	sub	r11,sp,-1724
80005d00:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005d04:	c2 08       	rjmp	80005d44 <_vfprintf_r+0x580>
80005d06:	fa c8 f9 50 	sub	r8,sp,-1712
80005d0a:	1a d8       	st.w	--sp,r8
80005d0c:	fa c8 fa b8 	sub	r8,sp,-1352
80005d10:	0c 9b       	mov	r11,r6
80005d12:	1a d8       	st.w	--sp,r8
80005d14:	fa c8 fb b4 	sub	r8,sp,-1100
80005d18:	1a d8       	st.w	--sp,r8
80005d1a:	fa c9 ff b4 	sub	r9,sp,-76
80005d1e:	fa c8 f9 40 	sub	r8,sp,-1728
80005d22:	04 9a       	mov	r10,r2
80005d24:	08 9c       	mov	r12,r4
80005d26:	fe b0 fb b7 	rcall	80005494 <get_arg>
80005d2a:	2f dd       	sub	sp,-12
80005d2c:	78 1b       	ld.w	r11,r12[0x4]
80005d2e:	78 09       	ld.w	r9,r12[0x0]
80005d30:	c2 b8       	rjmp	80005d86 <_vfprintf_r+0x5c2>
80005d32:	ee ca ff ff 	sub	r10,r7,-1
80005d36:	10 37       	cp.w	r7,r8
80005d38:	c0 b4       	brge	80005d4e <_vfprintf_r+0x58a>
80005d3a:	fa c9 f9 44 	sub	r9,sp,-1724
80005d3e:	14 97       	mov	r7,r10
80005d40:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005d44:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005d48:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005d4c:	c1 d8       	rjmp	80005d86 <_vfprintf_r+0x5c2>
80005d4e:	41 09       	lddsp	r9,sp[0x40]
80005d50:	59 f8       	cp.w	r8,31
80005d52:	e0 89 00 14 	brgt	80005d7a <_vfprintf_r+0x5b6>
80005d56:	f2 cb ff f8 	sub	r11,r9,-8
80005d5a:	51 0b       	stdsp	sp[0x40],r11
80005d5c:	fa c6 f9 44 	sub	r6,sp,-1724
80005d60:	72 1b       	ld.w	r11,r9[0x4]
80005d62:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80005d66:	72 09       	ld.w	r9,r9[0x0]
80005d68:	f9 4b fd 8c 	st.w	r12[-628],r11
80005d6c:	f9 49 fd 88 	st.w	r12[-632],r9
80005d70:	2f f8       	sub	r8,-1
80005d72:	14 97       	mov	r7,r10
80005d74:	fb 48 06 b4 	st.w	sp[1716],r8
80005d78:	c0 78       	rjmp	80005d86 <_vfprintf_r+0x5c2>
80005d7a:	f2 c8 ff f8 	sub	r8,r9,-8
80005d7e:	72 1b       	ld.w	r11,r9[0x4]
80005d80:	14 97       	mov	r7,r10
80005d82:	51 08       	stdsp	sp[0x40],r8
80005d84:	72 09       	ld.w	r9,r9[0x0]
80005d86:	16 98       	mov	r8,r11
80005d88:	fa e9 00 00 	st.d	sp[0],r8
80005d8c:	ca e8       	rjmp	80005ee8 <_vfprintf_r+0x724>
80005d8e:	ed b5 00 04 	bld	r5,0x4
80005d92:	c1 71       	brne	80005dc0 <_vfprintf_r+0x5fc>
80005d94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005d98:	40 3e       	lddsp	lr,sp[0xc]
80005d9a:	58 0e       	cp.w	lr,0
80005d9c:	c0 80       	breq	80005dac <_vfprintf_r+0x5e8>
80005d9e:	10 36       	cp.w	r6,r8
80005da0:	c6 94       	brge	80005e72 <_vfprintf_r+0x6ae>
80005da2:	fa cc f9 44 	sub	r12,sp,-1724
80005da6:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005daa:	c8 28       	rjmp	80005eae <_vfprintf_r+0x6ea>
80005dac:	ee ca ff ff 	sub	r10,r7,-1
80005db0:	10 37       	cp.w	r7,r8
80005db2:	e0 84 00 81 	brge	80005eb4 <_vfprintf_r+0x6f0>
80005db6:	fa cb f9 44 	sub	r11,sp,-1724
80005dba:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005dbe:	c7 78       	rjmp	80005eac <_vfprintf_r+0x6e8>
80005dc0:	ed b5 00 06 	bld	r5,0x6
80005dc4:	c4 b1       	brne	80005e5a <_vfprintf_r+0x696>
80005dc6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005dca:	40 3c       	lddsp	r12,sp[0xc]
80005dcc:	58 0c       	cp.w	r12,0
80005dce:	c1 d0       	breq	80005e08 <_vfprintf_r+0x644>
80005dd0:	10 36       	cp.w	r6,r8
80005dd2:	c0 64       	brge	80005dde <_vfprintf_r+0x61a>
80005dd4:	fa cb f9 44 	sub	r11,sp,-1724
80005dd8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005ddc:	c1 f8       	rjmp	80005e1a <_vfprintf_r+0x656>
80005dde:	fa c8 f9 50 	sub	r8,sp,-1712
80005de2:	1a d8       	st.w	--sp,r8
80005de4:	fa c8 fa b8 	sub	r8,sp,-1352
80005de8:	1a d8       	st.w	--sp,r8
80005dea:	fa c8 fb b4 	sub	r8,sp,-1100
80005dee:	1a d8       	st.w	--sp,r8
80005df0:	fa c8 f9 40 	sub	r8,sp,-1728
80005df4:	fa c9 ff b4 	sub	r9,sp,-76
80005df8:	04 9a       	mov	r10,r2
80005dfa:	0c 9b       	mov	r11,r6
80005dfc:	08 9c       	mov	r12,r4
80005dfe:	fe b0 fb 4b 	rcall	80005494 <get_arg>
80005e02:	2f dd       	sub	sp,-12
80005e04:	98 18       	ld.sh	r8,r12[0x2]
80005e06:	c2 68       	rjmp	80005e52 <_vfprintf_r+0x68e>
80005e08:	ee ca ff ff 	sub	r10,r7,-1
80005e0c:	10 37       	cp.w	r7,r8
80005e0e:	c0 94       	brge	80005e20 <_vfprintf_r+0x65c>
80005e10:	fa c9 f9 44 	sub	r9,sp,-1724
80005e14:	14 97       	mov	r7,r10
80005e16:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005e1a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005e1e:	c1 a8       	rjmp	80005e52 <_vfprintf_r+0x68e>
80005e20:	41 09       	lddsp	r9,sp[0x40]
80005e22:	59 f8       	cp.w	r8,31
80005e24:	e0 89 00 13 	brgt	80005e4a <_vfprintf_r+0x686>
80005e28:	f2 cb ff fc 	sub	r11,r9,-4
80005e2c:	51 0b       	stdsp	sp[0x40],r11
80005e2e:	72 09       	ld.w	r9,r9[0x0]
80005e30:	fa c6 f9 44 	sub	r6,sp,-1724
80005e34:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005e38:	2f f8       	sub	r8,-1
80005e3a:	f7 49 fd 88 	st.w	r11[-632],r9
80005e3e:	fb 48 06 b4 	st.w	sp[1716],r8
80005e42:	14 97       	mov	r7,r10
80005e44:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005e48:	c0 58       	rjmp	80005e52 <_vfprintf_r+0x68e>
80005e4a:	92 18       	ld.sh	r8,r9[0x2]
80005e4c:	14 97       	mov	r7,r10
80005e4e:	2f c9       	sub	r9,-4
80005e50:	51 09       	stdsp	sp[0x40],r9
80005e52:	50 18       	stdsp	sp[0x4],r8
80005e54:	bf 58       	asr	r8,0x1f
80005e56:	50 08       	stdsp	sp[0x0],r8
80005e58:	c4 88       	rjmp	80005ee8 <_vfprintf_r+0x724>
80005e5a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e5e:	40 3c       	lddsp	r12,sp[0xc]
80005e60:	58 0c       	cp.w	r12,0
80005e62:	c1 d0       	breq	80005e9c <_vfprintf_r+0x6d8>
80005e64:	10 36       	cp.w	r6,r8
80005e66:	c0 64       	brge	80005e72 <_vfprintf_r+0x6ae>
80005e68:	fa cb f9 44 	sub	r11,sp,-1724
80005e6c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e70:	c1 f8       	rjmp	80005eae <_vfprintf_r+0x6ea>
80005e72:	fa c8 f9 50 	sub	r8,sp,-1712
80005e76:	1a d8       	st.w	--sp,r8
80005e78:	fa c8 fa b8 	sub	r8,sp,-1352
80005e7c:	0c 9b       	mov	r11,r6
80005e7e:	1a d8       	st.w	--sp,r8
80005e80:	fa c8 fb b4 	sub	r8,sp,-1100
80005e84:	04 9a       	mov	r10,r2
80005e86:	1a d8       	st.w	--sp,r8
80005e88:	08 9c       	mov	r12,r4
80005e8a:	fa c8 f9 40 	sub	r8,sp,-1728
80005e8e:	fa c9 ff b4 	sub	r9,sp,-76
80005e92:	fe b0 fb 01 	rcall	80005494 <get_arg>
80005e96:	2f dd       	sub	sp,-12
80005e98:	78 0b       	ld.w	r11,r12[0x0]
80005e9a:	c2 48       	rjmp	80005ee2 <_vfprintf_r+0x71e>
80005e9c:	ee ca ff ff 	sub	r10,r7,-1
80005ea0:	10 37       	cp.w	r7,r8
80005ea2:	c0 94       	brge	80005eb4 <_vfprintf_r+0x6f0>
80005ea4:	fa c9 f9 44 	sub	r9,sp,-1724
80005ea8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005eac:	14 97       	mov	r7,r10
80005eae:	ec fb fd 88 	ld.w	r11,r6[-632]
80005eb2:	c1 88       	rjmp	80005ee2 <_vfprintf_r+0x71e>
80005eb4:	41 09       	lddsp	r9,sp[0x40]
80005eb6:	59 f8       	cp.w	r8,31
80005eb8:	e0 89 00 11 	brgt	80005eda <_vfprintf_r+0x716>
80005ebc:	f2 cb ff fc 	sub	r11,r9,-4
80005ec0:	51 0b       	stdsp	sp[0x40],r11
80005ec2:	fa c6 f9 44 	sub	r6,sp,-1724
80005ec6:	72 0b       	ld.w	r11,r9[0x0]
80005ec8:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005ecc:	f3 4b fd 88 	st.w	r9[-632],r11
80005ed0:	2f f8       	sub	r8,-1
80005ed2:	14 97       	mov	r7,r10
80005ed4:	fb 48 06 b4 	st.w	sp[1716],r8
80005ed8:	c0 58       	rjmp	80005ee2 <_vfprintf_r+0x71e>
80005eda:	72 0b       	ld.w	r11,r9[0x0]
80005edc:	14 97       	mov	r7,r10
80005ede:	2f c9       	sub	r9,-4
80005ee0:	51 09       	stdsp	sp[0x40],r9
80005ee2:	50 1b       	stdsp	sp[0x4],r11
80005ee4:	bf 5b       	asr	r11,0x1f
80005ee6:	50 0b       	stdsp	sp[0x0],r11
80005ee8:	fa ea 00 00 	ld.d	r10,sp[0]
80005eec:	58 0a       	cp.w	r10,0
80005eee:	5c 2b       	cpc	r11
80005ef0:	c0 e4       	brge	80005f0c <_vfprintf_r+0x748>
80005ef2:	30 08       	mov	r8,0
80005ef4:	fa ea 00 00 	ld.d	r10,sp[0]
80005ef8:	30 09       	mov	r9,0
80005efa:	f0 0a 01 0a 	sub	r10,r8,r10
80005efe:	f2 0b 01 4b 	sbc	r11,r9,r11
80005f02:	32 d8       	mov	r8,45
80005f04:	fa eb 00 00 	st.d	sp[0],r10
80005f08:	fb 68 06 bb 	st.b	sp[1723],r8
80005f0c:	30 18       	mov	r8,1
80005f0e:	e0 8f 06 fa 	bral	80006d02 <_vfprintf_r+0x153e>
80005f12:	50 a7       	stdsp	sp[0x28],r7
80005f14:	50 80       	stdsp	sp[0x20],r0
80005f16:	0c 97       	mov	r7,r6
80005f18:	04 94       	mov	r4,r2
80005f1a:	06 96       	mov	r6,r3
80005f1c:	02 92       	mov	r2,r1
80005f1e:	40 93       	lddsp	r3,sp[0x24]
80005f20:	10 90       	mov	r0,r8
80005f22:	40 41       	lddsp	r1,sp[0x10]
80005f24:	0e 99       	mov	r9,r7
80005f26:	ed b5 00 03 	bld	r5,0x3
80005f2a:	c4 11       	brne	80005fac <_vfprintf_r+0x7e8>
80005f2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f30:	40 3a       	lddsp	r10,sp[0xc]
80005f32:	58 0a       	cp.w	r10,0
80005f34:	c1 90       	breq	80005f66 <_vfprintf_r+0x7a2>
80005f36:	10 36       	cp.w	r6,r8
80005f38:	c6 45       	brlt	80006000 <_vfprintf_r+0x83c>
80005f3a:	fa c8 f9 50 	sub	r8,sp,-1712
80005f3e:	1a d8       	st.w	--sp,r8
80005f40:	fa c8 fa b8 	sub	r8,sp,-1352
80005f44:	1a d8       	st.w	--sp,r8
80005f46:	fa c8 fb b4 	sub	r8,sp,-1100
80005f4a:	0c 9b       	mov	r11,r6
80005f4c:	1a d8       	st.w	--sp,r8
80005f4e:	04 9a       	mov	r10,r2
80005f50:	fa c8 f9 40 	sub	r8,sp,-1728
80005f54:	fa c9 ff b4 	sub	r9,sp,-76
80005f58:	08 9c       	mov	r12,r4
80005f5a:	fe b0 fa 9d 	rcall	80005494 <get_arg>
80005f5e:	2f dd       	sub	sp,-12
80005f60:	78 16       	ld.w	r6,r12[0x4]
80005f62:	50 76       	stdsp	sp[0x1c],r6
80005f64:	c4 88       	rjmp	80005ff4 <_vfprintf_r+0x830>
80005f66:	2f f7       	sub	r7,-1
80005f68:	10 39       	cp.w	r9,r8
80005f6a:	c0 c4       	brge	80005f82 <_vfprintf_r+0x7be>
80005f6c:	fa ce f9 44 	sub	lr,sp,-1724
80005f70:	fc 06 00 36 	add	r6,lr,r6<<0x3
80005f74:	ec fc fd 8c 	ld.w	r12,r6[-628]
80005f78:	50 7c       	stdsp	sp[0x1c],r12
80005f7a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005f7e:	50 56       	stdsp	sp[0x14],r6
80005f80:	c6 68       	rjmp	8000604c <_vfprintf_r+0x888>
80005f82:	41 09       	lddsp	r9,sp[0x40]
80005f84:	59 f8       	cp.w	r8,31
80005f86:	e0 89 00 10 	brgt	80005fa6 <_vfprintf_r+0x7e2>
80005f8a:	f2 ca ff f8 	sub	r10,r9,-8
80005f8e:	72 1b       	ld.w	r11,r9[0x4]
80005f90:	51 0a       	stdsp	sp[0x40],r10
80005f92:	72 09       	ld.w	r9,r9[0x0]
80005f94:	fa ca f9 44 	sub	r10,sp,-1724
80005f98:	50 7b       	stdsp	sp[0x1c],r11
80005f9a:	50 59       	stdsp	sp[0x14],r9
80005f9c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005fa0:	40 5b       	lddsp	r11,sp[0x14]
80005fa2:	40 7a       	lddsp	r10,sp[0x1c]
80005fa4:	c4 78       	rjmp	80006032 <_vfprintf_r+0x86e>
80005fa6:	72 18       	ld.w	r8,r9[0x4]
80005fa8:	50 78       	stdsp	sp[0x1c],r8
80005faa:	c4 c8       	rjmp	80006042 <_vfprintf_r+0x87e>
80005fac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fb0:	40 3e       	lddsp	lr,sp[0xc]
80005fb2:	58 0e       	cp.w	lr,0
80005fb4:	c2 30       	breq	80005ffa <_vfprintf_r+0x836>
80005fb6:	10 36       	cp.w	r6,r8
80005fb8:	c0 94       	brge	80005fca <_vfprintf_r+0x806>
80005fba:	fa cc f9 44 	sub	r12,sp,-1724
80005fbe:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005fc2:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005fc6:	50 7b       	stdsp	sp[0x1c],r11
80005fc8:	cd 9b       	rjmp	80005f7a <_vfprintf_r+0x7b6>
80005fca:	fa c8 f9 50 	sub	r8,sp,-1712
80005fce:	1a d8       	st.w	--sp,r8
80005fd0:	fa c8 fa b8 	sub	r8,sp,-1352
80005fd4:	04 9a       	mov	r10,r2
80005fd6:	1a d8       	st.w	--sp,r8
80005fd8:	fa c8 fb b4 	sub	r8,sp,-1100
80005fdc:	0c 9b       	mov	r11,r6
80005fde:	1a d8       	st.w	--sp,r8
80005fe0:	08 9c       	mov	r12,r4
80005fe2:	fa c8 f9 40 	sub	r8,sp,-1728
80005fe6:	fa c9 ff b4 	sub	r9,sp,-76
80005fea:	fe b0 fa 55 	rcall	80005494 <get_arg>
80005fee:	2f dd       	sub	sp,-12
80005ff0:	78 1a       	ld.w	r10,r12[0x4]
80005ff2:	50 7a       	stdsp	sp[0x1c],r10
80005ff4:	78 0c       	ld.w	r12,r12[0x0]
80005ff6:	50 5c       	stdsp	sp[0x14],r12
80005ff8:	c2 a8       	rjmp	8000604c <_vfprintf_r+0x888>
80005ffa:	2f f7       	sub	r7,-1
80005ffc:	10 39       	cp.w	r9,r8
80005ffe:	c0 94       	brge	80006010 <_vfprintf_r+0x84c>
80006000:	fa c9 f9 44 	sub	r9,sp,-1724
80006004:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006008:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000600c:	50 78       	stdsp	sp[0x1c],r8
8000600e:	cb 6b       	rjmp	80005f7a <_vfprintf_r+0x7b6>
80006010:	41 09       	lddsp	r9,sp[0x40]
80006012:	59 f8       	cp.w	r8,31
80006014:	e0 89 00 15 	brgt	8000603e <_vfprintf_r+0x87a>
80006018:	f2 ca ff f8 	sub	r10,r9,-8
8000601c:	72 16       	ld.w	r6,r9[0x4]
8000601e:	72 09       	ld.w	r9,r9[0x0]
80006020:	51 0a       	stdsp	sp[0x40],r10
80006022:	50 59       	stdsp	sp[0x14],r9
80006024:	fa ce f9 44 	sub	lr,sp,-1724
80006028:	50 76       	stdsp	sp[0x1c],r6
8000602a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000602e:	40 5b       	lddsp	r11,sp[0x14]
80006030:	0c 9a       	mov	r10,r6
80006032:	f2 eb fd 88 	st.d	r9[-632],r10
80006036:	2f f8       	sub	r8,-1
80006038:	fb 48 06 b4 	st.w	sp[1716],r8
8000603c:	c0 88       	rjmp	8000604c <_vfprintf_r+0x888>
8000603e:	72 1c       	ld.w	r12,r9[0x4]
80006040:	50 7c       	stdsp	sp[0x1c],r12
80006042:	f2 c8 ff f8 	sub	r8,r9,-8
80006046:	51 08       	stdsp	sp[0x40],r8
80006048:	72 09       	ld.w	r9,r9[0x0]
8000604a:	50 59       	stdsp	sp[0x14],r9
8000604c:	40 5b       	lddsp	r11,sp[0x14]
8000604e:	40 7a       	lddsp	r10,sp[0x1c]
80006050:	e0 a0 1a 0c 	rcall	80009468 <__isinfd>
80006054:	18 96       	mov	r6,r12
80006056:	c1 70       	breq	80006084 <_vfprintf_r+0x8c0>
80006058:	30 08       	mov	r8,0
8000605a:	30 09       	mov	r9,0
8000605c:	40 5b       	lddsp	r11,sp[0x14]
8000605e:	40 7a       	lddsp	r10,sp[0x1c]
80006060:	fe b0 f3 57 	rcall	8000470e <__avr32_f64_cmp_lt>
80006064:	c0 40       	breq	8000606c <_vfprintf_r+0x8a8>
80006066:	32 d8       	mov	r8,45
80006068:	fb 68 06 bb 	st.b	sp[1723],r8
8000606c:	fe c8 ba f0 	sub	r8,pc,-17680
80006070:	fe c6 ba f0 	sub	r6,pc,-17680
80006074:	a7 d5       	cbr	r5,0x7
80006076:	e0 40 00 47 	cp.w	r0,71
8000607a:	f0 06 17 a0 	movle	r6,r8
8000607e:	30 32       	mov	r2,3
80006080:	e0 8f 06 ce 	bral	80006e1c <_vfprintf_r+0x1658>
80006084:	40 5b       	lddsp	r11,sp[0x14]
80006086:	40 7a       	lddsp	r10,sp[0x1c]
80006088:	e0 a0 1a 05 	rcall	80009492 <__isnand>
8000608c:	c0 e0       	breq	800060a8 <_vfprintf_r+0x8e4>
8000608e:	50 26       	stdsp	sp[0x8],r6
80006090:	fe c8 bb 0c 	sub	r8,pc,-17652
80006094:	fe c6 bb 0c 	sub	r6,pc,-17652
80006098:	a7 d5       	cbr	r5,0x7
8000609a:	e0 40 00 47 	cp.w	r0,71
8000609e:	f0 06 17 a0 	movle	r6,r8
800060a2:	30 32       	mov	r2,3
800060a4:	e0 8f 06 c2 	bral	80006e28 <_vfprintf_r+0x1664>
800060a8:	40 2a       	lddsp	r10,sp[0x8]
800060aa:	5b fa       	cp.w	r10,-1
800060ac:	c0 41       	brne	800060b4 <_vfprintf_r+0x8f0>
800060ae:	30 69       	mov	r9,6
800060b0:	50 29       	stdsp	sp[0x8],r9
800060b2:	c1 18       	rjmp	800060d4 <_vfprintf_r+0x910>
800060b4:	e0 40 00 47 	cp.w	r0,71
800060b8:	5f 09       	sreq	r9
800060ba:	e0 40 00 67 	cp.w	r0,103
800060be:	5f 08       	sreq	r8
800060c0:	f3 e8 10 08 	or	r8,r9,r8
800060c4:	f8 08 18 00 	cp.b	r8,r12
800060c8:	c0 60       	breq	800060d4 <_vfprintf_r+0x910>
800060ca:	40 28       	lddsp	r8,sp[0x8]
800060cc:	58 08       	cp.w	r8,0
800060ce:	f9 b8 00 01 	moveq	r8,1
800060d2:	50 28       	stdsp	sp[0x8],r8
800060d4:	40 78       	lddsp	r8,sp[0x1c]
800060d6:	40 59       	lddsp	r9,sp[0x14]
800060d8:	fa e9 06 94 	st.d	sp[1684],r8
800060dc:	a9 a5       	sbr	r5,0x8
800060de:	fa f8 06 94 	ld.w	r8,sp[1684]
800060e2:	58 08       	cp.w	r8,0
800060e4:	c0 65       	brlt	800060f0 <_vfprintf_r+0x92c>
800060e6:	40 5e       	lddsp	lr,sp[0x14]
800060e8:	30 0c       	mov	r12,0
800060ea:	50 6e       	stdsp	sp[0x18],lr
800060ec:	50 9c       	stdsp	sp[0x24],r12
800060ee:	c0 78       	rjmp	800060fc <_vfprintf_r+0x938>
800060f0:	40 5b       	lddsp	r11,sp[0x14]
800060f2:	32 da       	mov	r10,45
800060f4:	ee 1b 80 00 	eorh	r11,0x8000
800060f8:	50 9a       	stdsp	sp[0x24],r10
800060fa:	50 6b       	stdsp	sp[0x18],r11
800060fc:	e0 40 00 46 	cp.w	r0,70
80006100:	5f 09       	sreq	r9
80006102:	e0 40 00 66 	cp.w	r0,102
80006106:	5f 08       	sreq	r8
80006108:	f3 e8 10 08 	or	r8,r9,r8
8000610c:	50 48       	stdsp	sp[0x10],r8
8000610e:	c0 40       	breq	80006116 <_vfprintf_r+0x952>
80006110:	40 22       	lddsp	r2,sp[0x8]
80006112:	30 39       	mov	r9,3
80006114:	c1 08       	rjmp	80006134 <_vfprintf_r+0x970>
80006116:	e0 40 00 45 	cp.w	r0,69
8000611a:	5f 09       	sreq	r9
8000611c:	e0 40 00 65 	cp.w	r0,101
80006120:	5f 08       	sreq	r8
80006122:	40 22       	lddsp	r2,sp[0x8]
80006124:	10 49       	or	r9,r8
80006126:	2f f2       	sub	r2,-1
80006128:	40 46       	lddsp	r6,sp[0x10]
8000612a:	ec 09 18 00 	cp.b	r9,r6
8000612e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80006132:	30 29       	mov	r9,2
80006134:	fa c8 f9 5c 	sub	r8,sp,-1700
80006138:	1a d8       	st.w	--sp,r8
8000613a:	fa c8 f9 54 	sub	r8,sp,-1708
8000613e:	1a d8       	st.w	--sp,r8
80006140:	fa c8 f9 4c 	sub	r8,sp,-1716
80006144:	08 9c       	mov	r12,r4
80006146:	1a d8       	st.w	--sp,r8
80006148:	04 98       	mov	r8,r2
8000614a:	40 9b       	lddsp	r11,sp[0x24]
8000614c:	40 aa       	lddsp	r10,sp[0x28]
8000614e:	e0 a0 0c 7b 	rcall	80007a44 <_dtoa_r>
80006152:	e0 40 00 47 	cp.w	r0,71
80006156:	5f 19       	srne	r9
80006158:	e0 40 00 67 	cp.w	r0,103
8000615c:	5f 18       	srne	r8
8000615e:	18 96       	mov	r6,r12
80006160:	2f dd       	sub	sp,-12
80006162:	f3 e8 00 08 	and	r8,r9,r8
80006166:	c0 41       	brne	8000616e <_vfprintf_r+0x9aa>
80006168:	ed b5 00 00 	bld	r5,0x0
8000616c:	c3 01       	brne	800061cc <_vfprintf_r+0xa08>
8000616e:	ec 02 00 0e 	add	lr,r6,r2
80006172:	50 3e       	stdsp	sp[0xc],lr
80006174:	40 4c       	lddsp	r12,sp[0x10]
80006176:	58 0c       	cp.w	r12,0
80006178:	c1 50       	breq	800061a2 <_vfprintf_r+0x9de>
8000617a:	0d 89       	ld.ub	r9,r6[0x0]
8000617c:	33 08       	mov	r8,48
8000617e:	f0 09 18 00 	cp.b	r9,r8
80006182:	c0 b1       	brne	80006198 <_vfprintf_r+0x9d4>
80006184:	30 08       	mov	r8,0
80006186:	30 09       	mov	r9,0
80006188:	40 6b       	lddsp	r11,sp[0x18]
8000618a:	40 7a       	lddsp	r10,sp[0x1c]
8000618c:	e0 a0 1a c4 	rcall	80009714 <__avr32_f64_cmp_eq>
80006190:	fb b2 00 01 	rsubeq	r2,1
80006194:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006198:	40 3b       	lddsp	r11,sp[0xc]
8000619a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000619e:	10 0b       	add	r11,r8
800061a0:	50 3b       	stdsp	sp[0xc],r11
800061a2:	40 6b       	lddsp	r11,sp[0x18]
800061a4:	30 08       	mov	r8,0
800061a6:	30 09       	mov	r9,0
800061a8:	40 7a       	lddsp	r10,sp[0x1c]
800061aa:	e0 a0 1a b5 	rcall	80009714 <__avr32_f64_cmp_eq>
800061ae:	c0 90       	breq	800061c0 <_vfprintf_r+0x9fc>
800061b0:	40 3a       	lddsp	r10,sp[0xc]
800061b2:	fb 4a 06 a4 	st.w	sp[1700],r10
800061b6:	c0 58       	rjmp	800061c0 <_vfprintf_r+0x9fc>
800061b8:	10 c9       	st.b	r8++,r9
800061ba:	fb 48 06 a4 	st.w	sp[1700],r8
800061be:	c0 28       	rjmp	800061c2 <_vfprintf_r+0x9fe>
800061c0:	33 09       	mov	r9,48
800061c2:	fa f8 06 a4 	ld.w	r8,sp[1700]
800061c6:	40 3e       	lddsp	lr,sp[0xc]
800061c8:	1c 38       	cp.w	r8,lr
800061ca:	cf 73       	brcs	800061b8 <_vfprintf_r+0x9f4>
800061cc:	e0 40 00 47 	cp.w	r0,71
800061d0:	5f 09       	sreq	r9
800061d2:	e0 40 00 67 	cp.w	r0,103
800061d6:	5f 08       	sreq	r8
800061d8:	f3 e8 10 08 	or	r8,r9,r8
800061dc:	fa f9 06 a4 	ld.w	r9,sp[1700]
800061e0:	0c 19       	sub	r9,r6
800061e2:	50 69       	stdsp	sp[0x18],r9
800061e4:	58 08       	cp.w	r8,0
800061e6:	c0 b0       	breq	800061fc <_vfprintf_r+0xa38>
800061e8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800061ec:	5b d8       	cp.w	r8,-3
800061ee:	c0 55       	brlt	800061f8 <_vfprintf_r+0xa34>
800061f0:	40 2c       	lddsp	r12,sp[0x8]
800061f2:	18 38       	cp.w	r8,r12
800061f4:	e0 8a 00 6a 	brle	800062c8 <_vfprintf_r+0xb04>
800061f8:	20 20       	sub	r0,2
800061fa:	c0 58       	rjmp	80006204 <_vfprintf_r+0xa40>
800061fc:	e0 40 00 65 	cp.w	r0,101
80006200:	e0 89 00 46 	brgt	8000628c <_vfprintf_r+0xac8>
80006204:	fa fb 06 ac 	ld.w	r11,sp[1708]
80006208:	fb 60 06 9c 	st.b	sp[1692],r0
8000620c:	20 1b       	sub	r11,1
8000620e:	fb 4b 06 ac 	st.w	sp[1708],r11
80006212:	c0 47       	brpl	8000621a <_vfprintf_r+0xa56>
80006214:	5c 3b       	neg	r11
80006216:	32 d8       	mov	r8,45
80006218:	c0 28       	rjmp	8000621c <_vfprintf_r+0xa58>
8000621a:	32 b8       	mov	r8,43
8000621c:	fb 68 06 9d 	st.b	sp[1693],r8
80006220:	58 9b       	cp.w	r11,9
80006222:	e0 8a 00 1d 	brle	8000625c <_vfprintf_r+0xa98>
80006226:	fa c9 fa 35 	sub	r9,sp,-1483
8000622a:	30 aa       	mov	r10,10
8000622c:	12 98       	mov	r8,r9
8000622e:	0e 9c       	mov	r12,r7
80006230:	0c 92       	mov	r2,r6
80006232:	f6 0a 0c 06 	divs	r6,r11,r10
80006236:	0e 9b       	mov	r11,r7
80006238:	2d 0b       	sub	r11,-48
8000623a:	10 fb       	st.b	--r8,r11
8000623c:	0c 9b       	mov	r11,r6
8000623e:	58 96       	cp.w	r6,9
80006240:	fe 99 ff f9 	brgt	80006232 <_vfprintf_r+0xa6e>
80006244:	2d 0b       	sub	r11,-48
80006246:	18 97       	mov	r7,r12
80006248:	04 96       	mov	r6,r2
8000624a:	10 fb       	st.b	--r8,r11
8000624c:	fa ca f9 62 	sub	r10,sp,-1694
80006250:	c0 38       	rjmp	80006256 <_vfprintf_r+0xa92>
80006252:	11 3b       	ld.ub	r11,r8++
80006254:	14 cb       	st.b	r10++,r11
80006256:	12 38       	cp.w	r8,r9
80006258:	cf d3       	brcs	80006252 <_vfprintf_r+0xa8e>
8000625a:	c0 98       	rjmp	8000626c <_vfprintf_r+0xaa8>
8000625c:	2d 0b       	sub	r11,-48
8000625e:	33 08       	mov	r8,48
80006260:	fb 6b 06 9f 	st.b	sp[1695],r11
80006264:	fb 68 06 9e 	st.b	sp[1694],r8
80006268:	fa ca f9 60 	sub	r10,sp,-1696
8000626c:	fa c8 f9 64 	sub	r8,sp,-1692
80006270:	f4 08 01 08 	sub	r8,r10,r8
80006274:	50 e8       	stdsp	sp[0x38],r8
80006276:	10 92       	mov	r2,r8
80006278:	40 6b       	lddsp	r11,sp[0x18]
8000627a:	16 02       	add	r2,r11
8000627c:	58 1b       	cp.w	r11,1
8000627e:	e0 89 00 05 	brgt	80006288 <_vfprintf_r+0xac4>
80006282:	ed b5 00 00 	bld	r5,0x0
80006286:	c3 51       	brne	800062f0 <_vfprintf_r+0xb2c>
80006288:	2f f2       	sub	r2,-1
8000628a:	c3 38       	rjmp	800062f0 <_vfprintf_r+0xb2c>
8000628c:	e0 40 00 66 	cp.w	r0,102
80006290:	c1 c1       	brne	800062c8 <_vfprintf_r+0xb04>
80006292:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006296:	58 02       	cp.w	r2,0
80006298:	e0 8a 00 0c 	brle	800062b0 <_vfprintf_r+0xaec>
8000629c:	40 2a       	lddsp	r10,sp[0x8]
8000629e:	58 0a       	cp.w	r10,0
800062a0:	c0 41       	brne	800062a8 <_vfprintf_r+0xae4>
800062a2:	ed b5 00 00 	bld	r5,0x0
800062a6:	c2 51       	brne	800062f0 <_vfprintf_r+0xb2c>
800062a8:	2f f2       	sub	r2,-1
800062aa:	40 29       	lddsp	r9,sp[0x8]
800062ac:	12 02       	add	r2,r9
800062ae:	c0 b8       	rjmp	800062c4 <_vfprintf_r+0xb00>
800062b0:	40 28       	lddsp	r8,sp[0x8]
800062b2:	58 08       	cp.w	r8,0
800062b4:	c0 61       	brne	800062c0 <_vfprintf_r+0xafc>
800062b6:	ed b5 00 00 	bld	r5,0x0
800062ba:	c0 30       	breq	800062c0 <_vfprintf_r+0xafc>
800062bc:	30 12       	mov	r2,1
800062be:	c1 98       	rjmp	800062f0 <_vfprintf_r+0xb2c>
800062c0:	40 22       	lddsp	r2,sp[0x8]
800062c2:	2f e2       	sub	r2,-2
800062c4:	36 60       	mov	r0,102
800062c6:	c1 58       	rjmp	800062f0 <_vfprintf_r+0xb2c>
800062c8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800062cc:	40 6e       	lddsp	lr,sp[0x18]
800062ce:	1c 32       	cp.w	r2,lr
800062d0:	c0 65       	brlt	800062dc <_vfprintf_r+0xb18>
800062d2:	ed b5 00 00 	bld	r5,0x0
800062d6:	f7 b2 00 ff 	subeq	r2,-1
800062da:	c0 a8       	rjmp	800062ee <_vfprintf_r+0xb2a>
800062dc:	e4 08 11 02 	rsub	r8,r2,2
800062e0:	40 6c       	lddsp	r12,sp[0x18]
800062e2:	58 02       	cp.w	r2,0
800062e4:	f0 02 17 a0 	movle	r2,r8
800062e8:	f9 b2 09 01 	movgt	r2,1
800062ec:	18 02       	add	r2,r12
800062ee:	36 70       	mov	r0,103
800062f0:	40 9b       	lddsp	r11,sp[0x24]
800062f2:	58 0b       	cp.w	r11,0
800062f4:	e0 80 05 94 	breq	80006e1c <_vfprintf_r+0x1658>
800062f8:	32 d8       	mov	r8,45
800062fa:	fb 68 06 bb 	st.b	sp[1723],r8
800062fe:	e0 8f 05 93 	bral	80006e24 <_vfprintf_r+0x1660>
80006302:	50 a7       	stdsp	sp[0x28],r7
80006304:	04 94       	mov	r4,r2
80006306:	0c 97       	mov	r7,r6
80006308:	02 92       	mov	r2,r1
8000630a:	06 96       	mov	r6,r3
8000630c:	40 41       	lddsp	r1,sp[0x10]
8000630e:	40 93       	lddsp	r3,sp[0x24]
80006310:	0e 99       	mov	r9,r7
80006312:	ed b5 00 05 	bld	r5,0x5
80006316:	c4 81       	brne	800063a6 <_vfprintf_r+0xbe2>
80006318:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000631c:	40 3e       	lddsp	lr,sp[0xc]
8000631e:	58 0e       	cp.w	lr,0
80006320:	c1 d0       	breq	8000635a <_vfprintf_r+0xb96>
80006322:	10 36       	cp.w	r6,r8
80006324:	c0 64       	brge	80006330 <_vfprintf_r+0xb6c>
80006326:	fa cc f9 44 	sub	r12,sp,-1724
8000632a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000632e:	c1 d8       	rjmp	80006368 <_vfprintf_r+0xba4>
80006330:	fa c8 f9 50 	sub	r8,sp,-1712
80006334:	1a d8       	st.w	--sp,r8
80006336:	fa c8 fa b8 	sub	r8,sp,-1352
8000633a:	04 9a       	mov	r10,r2
8000633c:	1a d8       	st.w	--sp,r8
8000633e:	fa c8 fb b4 	sub	r8,sp,-1100
80006342:	0c 9b       	mov	r11,r6
80006344:	1a d8       	st.w	--sp,r8
80006346:	08 9c       	mov	r12,r4
80006348:	fa c8 f9 40 	sub	r8,sp,-1728
8000634c:	fa c9 ff b4 	sub	r9,sp,-76
80006350:	fe b0 f8 a2 	rcall	80005494 <get_arg>
80006354:	2f dd       	sub	sp,-12
80006356:	78 0a       	ld.w	r10,r12[0x0]
80006358:	c2 08       	rjmp	80006398 <_vfprintf_r+0xbd4>
8000635a:	2f f7       	sub	r7,-1
8000635c:	10 39       	cp.w	r9,r8
8000635e:	c0 84       	brge	8000636e <_vfprintf_r+0xbaa>
80006360:	fa cb f9 44 	sub	r11,sp,-1724
80006364:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006368:	ec fa fd 88 	ld.w	r10,r6[-632]
8000636c:	c1 68       	rjmp	80006398 <_vfprintf_r+0xbd4>
8000636e:	41 09       	lddsp	r9,sp[0x40]
80006370:	59 f8       	cp.w	r8,31
80006372:	e0 89 00 10 	brgt	80006392 <_vfprintf_r+0xbce>
80006376:	f2 ca ff fc 	sub	r10,r9,-4
8000637a:	51 0a       	stdsp	sp[0x40],r10
8000637c:	fa c6 f9 44 	sub	r6,sp,-1724
80006380:	72 0a       	ld.w	r10,r9[0x0]
80006382:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006386:	f3 4a fd 88 	st.w	r9[-632],r10
8000638a:	2f f8       	sub	r8,-1
8000638c:	fb 48 06 b4 	st.w	sp[1716],r8
80006390:	c0 48       	rjmp	80006398 <_vfprintf_r+0xbd4>
80006392:	72 0a       	ld.w	r10,r9[0x0]
80006394:	2f c9       	sub	r9,-4
80006396:	51 09       	stdsp	sp[0x40],r9
80006398:	40 be       	lddsp	lr,sp[0x2c]
8000639a:	1c 98       	mov	r8,lr
8000639c:	95 1e       	st.w	r10[0x4],lr
8000639e:	bf 58       	asr	r8,0x1f
800063a0:	95 08       	st.w	r10[0x0],r8
800063a2:	fe 9f fa 9f 	bral	800058e0 <_vfprintf_r+0x11c>
800063a6:	ed b5 00 04 	bld	r5,0x4
800063aa:	c4 80       	breq	8000643a <_vfprintf_r+0xc76>
800063ac:	e2 15 00 40 	andl	r5,0x40,COH
800063b0:	c4 50       	breq	8000643a <_vfprintf_r+0xc76>
800063b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800063b6:	40 3c       	lddsp	r12,sp[0xc]
800063b8:	58 0c       	cp.w	r12,0
800063ba:	c1 d0       	breq	800063f4 <_vfprintf_r+0xc30>
800063bc:	10 36       	cp.w	r6,r8
800063be:	c0 64       	brge	800063ca <_vfprintf_r+0xc06>
800063c0:	fa cb f9 44 	sub	r11,sp,-1724
800063c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800063c8:	c1 d8       	rjmp	80006402 <_vfprintf_r+0xc3e>
800063ca:	fa c8 f9 50 	sub	r8,sp,-1712
800063ce:	1a d8       	st.w	--sp,r8
800063d0:	fa c8 fa b8 	sub	r8,sp,-1352
800063d4:	04 9a       	mov	r10,r2
800063d6:	1a d8       	st.w	--sp,r8
800063d8:	fa c8 fb b4 	sub	r8,sp,-1100
800063dc:	0c 9b       	mov	r11,r6
800063de:	1a d8       	st.w	--sp,r8
800063e0:	08 9c       	mov	r12,r4
800063e2:	fa c8 f9 40 	sub	r8,sp,-1728
800063e6:	fa c9 ff b4 	sub	r9,sp,-76
800063ea:	fe b0 f8 55 	rcall	80005494 <get_arg>
800063ee:	2f dd       	sub	sp,-12
800063f0:	78 0a       	ld.w	r10,r12[0x0]
800063f2:	c2 08       	rjmp	80006432 <_vfprintf_r+0xc6e>
800063f4:	2f f7       	sub	r7,-1
800063f6:	10 39       	cp.w	r9,r8
800063f8:	c0 84       	brge	80006408 <_vfprintf_r+0xc44>
800063fa:	fa ca f9 44 	sub	r10,sp,-1724
800063fe:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006402:	ec fa fd 88 	ld.w	r10,r6[-632]
80006406:	c1 68       	rjmp	80006432 <_vfprintf_r+0xc6e>
80006408:	41 09       	lddsp	r9,sp[0x40]
8000640a:	59 f8       	cp.w	r8,31
8000640c:	e0 89 00 10 	brgt	8000642c <_vfprintf_r+0xc68>
80006410:	f2 ca ff fc 	sub	r10,r9,-4
80006414:	51 0a       	stdsp	sp[0x40],r10
80006416:	fa c6 f9 44 	sub	r6,sp,-1724
8000641a:	72 0a       	ld.w	r10,r9[0x0]
8000641c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006420:	f3 4a fd 88 	st.w	r9[-632],r10
80006424:	2f f8       	sub	r8,-1
80006426:	fb 48 06 b4 	st.w	sp[1716],r8
8000642a:	c0 48       	rjmp	80006432 <_vfprintf_r+0xc6e>
8000642c:	72 0a       	ld.w	r10,r9[0x0]
8000642e:	2f c9       	sub	r9,-4
80006430:	51 09       	stdsp	sp[0x40],r9
80006432:	40 be       	lddsp	lr,sp[0x2c]
80006434:	b4 0e       	st.h	r10[0x0],lr
80006436:	fe 9f fa 55 	bral	800058e0 <_vfprintf_r+0x11c>
8000643a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000643e:	40 3c       	lddsp	r12,sp[0xc]
80006440:	58 0c       	cp.w	r12,0
80006442:	c1 d0       	breq	8000647c <_vfprintf_r+0xcb8>
80006444:	10 36       	cp.w	r6,r8
80006446:	c0 64       	brge	80006452 <_vfprintf_r+0xc8e>
80006448:	fa cb f9 44 	sub	r11,sp,-1724
8000644c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006450:	c1 d8       	rjmp	8000648a <_vfprintf_r+0xcc6>
80006452:	fa c8 f9 50 	sub	r8,sp,-1712
80006456:	1a d8       	st.w	--sp,r8
80006458:	fa c8 fa b8 	sub	r8,sp,-1352
8000645c:	04 9a       	mov	r10,r2
8000645e:	1a d8       	st.w	--sp,r8
80006460:	fa c8 fb b4 	sub	r8,sp,-1100
80006464:	0c 9b       	mov	r11,r6
80006466:	1a d8       	st.w	--sp,r8
80006468:	08 9c       	mov	r12,r4
8000646a:	fa c8 f9 40 	sub	r8,sp,-1728
8000646e:	fa c9 ff b4 	sub	r9,sp,-76
80006472:	fe b0 f8 11 	rcall	80005494 <get_arg>
80006476:	2f dd       	sub	sp,-12
80006478:	78 0a       	ld.w	r10,r12[0x0]
8000647a:	c2 08       	rjmp	800064ba <_vfprintf_r+0xcf6>
8000647c:	2f f7       	sub	r7,-1
8000647e:	10 39       	cp.w	r9,r8
80006480:	c0 84       	brge	80006490 <_vfprintf_r+0xccc>
80006482:	fa ca f9 44 	sub	r10,sp,-1724
80006486:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000648a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000648e:	c1 68       	rjmp	800064ba <_vfprintf_r+0xcf6>
80006490:	41 09       	lddsp	r9,sp[0x40]
80006492:	59 f8       	cp.w	r8,31
80006494:	e0 89 00 10 	brgt	800064b4 <_vfprintf_r+0xcf0>
80006498:	f2 ca ff fc 	sub	r10,r9,-4
8000649c:	51 0a       	stdsp	sp[0x40],r10
8000649e:	fa c6 f9 44 	sub	r6,sp,-1724
800064a2:	72 0a       	ld.w	r10,r9[0x0]
800064a4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800064a8:	f3 4a fd 88 	st.w	r9[-632],r10
800064ac:	2f f8       	sub	r8,-1
800064ae:	fb 48 06 b4 	st.w	sp[1716],r8
800064b2:	c0 48       	rjmp	800064ba <_vfprintf_r+0xcf6>
800064b4:	72 0a       	ld.w	r10,r9[0x0]
800064b6:	2f c9       	sub	r9,-4
800064b8:	51 09       	stdsp	sp[0x40],r9
800064ba:	40 be       	lddsp	lr,sp[0x2c]
800064bc:	95 0e       	st.w	r10[0x0],lr
800064be:	fe 9f fa 11 	bral	800058e0 <_vfprintf_r+0x11c>
800064c2:	50 a7       	stdsp	sp[0x28],r7
800064c4:	50 80       	stdsp	sp[0x20],r0
800064c6:	0c 97       	mov	r7,r6
800064c8:	04 94       	mov	r4,r2
800064ca:	06 96       	mov	r6,r3
800064cc:	02 92       	mov	r2,r1
800064ce:	40 93       	lddsp	r3,sp[0x24]
800064d0:	10 90       	mov	r0,r8
800064d2:	40 41       	lddsp	r1,sp[0x10]
800064d4:	a5 a5       	sbr	r5,0x4
800064d6:	c0 a8       	rjmp	800064ea <_vfprintf_r+0xd26>
800064d8:	50 a7       	stdsp	sp[0x28],r7
800064da:	50 80       	stdsp	sp[0x20],r0
800064dc:	0c 97       	mov	r7,r6
800064de:	04 94       	mov	r4,r2
800064e0:	06 96       	mov	r6,r3
800064e2:	02 92       	mov	r2,r1
800064e4:	40 93       	lddsp	r3,sp[0x24]
800064e6:	10 90       	mov	r0,r8
800064e8:	40 41       	lddsp	r1,sp[0x10]
800064ea:	ed b5 00 05 	bld	r5,0x5
800064ee:	c5 d1       	brne	800065a8 <_vfprintf_r+0xde4>
800064f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800064f4:	40 3c       	lddsp	r12,sp[0xc]
800064f6:	58 0c       	cp.w	r12,0
800064f8:	c2 60       	breq	80006544 <_vfprintf_r+0xd80>
800064fa:	10 36       	cp.w	r6,r8
800064fc:	c0 a4       	brge	80006510 <_vfprintf_r+0xd4c>
800064fe:	fa cb f9 44 	sub	r11,sp,-1724
80006502:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006506:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000650a:	fa e9 00 00 	st.d	sp[0],r8
8000650e:	c1 88       	rjmp	8000653e <_vfprintf_r+0xd7a>
80006510:	fa c8 f9 50 	sub	r8,sp,-1712
80006514:	1a d8       	st.w	--sp,r8
80006516:	fa c8 fa b8 	sub	r8,sp,-1352
8000651a:	04 9a       	mov	r10,r2
8000651c:	1a d8       	st.w	--sp,r8
8000651e:	0c 9b       	mov	r11,r6
80006520:	fa c8 fb b4 	sub	r8,sp,-1100
80006524:	08 9c       	mov	r12,r4
80006526:	1a d8       	st.w	--sp,r8
80006528:	fa c8 f9 40 	sub	r8,sp,-1728
8000652c:	fa c9 ff b4 	sub	r9,sp,-76
80006530:	fe b0 f7 b2 	rcall	80005494 <get_arg>
80006534:	2f dd       	sub	sp,-12
80006536:	f8 ea 00 00 	ld.d	r10,r12[0]
8000653a:	fa eb 00 00 	st.d	sp[0],r10
8000653e:	30 08       	mov	r8,0
80006540:	e0 8f 03 de 	bral	80006cfc <_vfprintf_r+0x1538>
80006544:	ee ca ff ff 	sub	r10,r7,-1
80006548:	10 37       	cp.w	r7,r8
8000654a:	c0 b4       	brge	80006560 <_vfprintf_r+0xd9c>
8000654c:	fa c9 f9 44 	sub	r9,sp,-1724
80006550:	14 97       	mov	r7,r10
80006552:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006556:	ec ea fd 88 	ld.d	r10,r6[-632]
8000655a:	fa eb 00 00 	st.d	sp[0],r10
8000655e:	c1 88       	rjmp	8000658e <_vfprintf_r+0xdca>
80006560:	41 09       	lddsp	r9,sp[0x40]
80006562:	59 f8       	cp.w	r8,31
80006564:	e0 89 00 18 	brgt	80006594 <_vfprintf_r+0xdd0>
80006568:	f2 e6 00 00 	ld.d	r6,r9[0]
8000656c:	f2 cb ff f8 	sub	r11,r9,-8
80006570:	fa e7 00 00 	st.d	sp[0],r6
80006574:	51 0b       	stdsp	sp[0x40],r11
80006576:	fa c6 f9 44 	sub	r6,sp,-1724
8000657a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000657e:	fa e6 00 00 	ld.d	r6,sp[0]
80006582:	f2 e7 fd 88 	st.d	r9[-632],r6
80006586:	2f f8       	sub	r8,-1
80006588:	14 97       	mov	r7,r10
8000658a:	fb 48 06 b4 	st.w	sp[1716],r8
8000658e:	40 38       	lddsp	r8,sp[0xc]
80006590:	e0 8f 03 b6 	bral	80006cfc <_vfprintf_r+0x1538>
80006594:	f2 e6 00 00 	ld.d	r6,r9[0]
80006598:	40 38       	lddsp	r8,sp[0xc]
8000659a:	fa e7 00 00 	st.d	sp[0],r6
8000659e:	2f 89       	sub	r9,-8
800065a0:	14 97       	mov	r7,r10
800065a2:	51 09       	stdsp	sp[0x40],r9
800065a4:	e0 8f 03 ac 	bral	80006cfc <_vfprintf_r+0x1538>
800065a8:	ed b5 00 04 	bld	r5,0x4
800065ac:	c1 61       	brne	800065d8 <_vfprintf_r+0xe14>
800065ae:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065b2:	40 3e       	lddsp	lr,sp[0xc]
800065b4:	58 0e       	cp.w	lr,0
800065b6:	c0 80       	breq	800065c6 <_vfprintf_r+0xe02>
800065b8:	10 36       	cp.w	r6,r8
800065ba:	c6 74       	brge	80006688 <_vfprintf_r+0xec4>
800065bc:	fa cc f9 44 	sub	r12,sp,-1724
800065c0:	f8 06 00 36 	add	r6,r12,r6<<0x3
800065c4:	c8 08       	rjmp	800066c4 <_vfprintf_r+0xf00>
800065c6:	ee ca ff ff 	sub	r10,r7,-1
800065ca:	10 37       	cp.w	r7,r8
800065cc:	c7 f4       	brge	800066ca <_vfprintf_r+0xf06>
800065ce:	fa cb f9 44 	sub	r11,sp,-1724
800065d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065d6:	c7 68       	rjmp	800066c2 <_vfprintf_r+0xefe>
800065d8:	ed b5 00 06 	bld	r5,0x6
800065dc:	c4 a1       	brne	80006670 <_vfprintf_r+0xeac>
800065de:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065e2:	40 3c       	lddsp	r12,sp[0xc]
800065e4:	58 0c       	cp.w	r12,0
800065e6:	c1 d0       	breq	80006620 <_vfprintf_r+0xe5c>
800065e8:	10 36       	cp.w	r6,r8
800065ea:	c0 64       	brge	800065f6 <_vfprintf_r+0xe32>
800065ec:	fa cb f9 44 	sub	r11,sp,-1724
800065f0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065f4:	c1 f8       	rjmp	80006632 <_vfprintf_r+0xe6e>
800065f6:	fa c8 f9 50 	sub	r8,sp,-1712
800065fa:	1a d8       	st.w	--sp,r8
800065fc:	fa c8 fa b8 	sub	r8,sp,-1352
80006600:	1a d8       	st.w	--sp,r8
80006602:	fa c8 fb b4 	sub	r8,sp,-1100
80006606:	1a d8       	st.w	--sp,r8
80006608:	fa c8 f9 40 	sub	r8,sp,-1728
8000660c:	fa c9 ff b4 	sub	r9,sp,-76
80006610:	04 9a       	mov	r10,r2
80006612:	0c 9b       	mov	r11,r6
80006614:	08 9c       	mov	r12,r4
80006616:	fe b0 f7 3f 	rcall	80005494 <get_arg>
8000661a:	2f dd       	sub	sp,-12
8000661c:	98 18       	ld.sh	r8,r12[0x2]
8000661e:	c2 68       	rjmp	8000666a <_vfprintf_r+0xea6>
80006620:	ee ca ff ff 	sub	r10,r7,-1
80006624:	10 37       	cp.w	r7,r8
80006626:	c0 94       	brge	80006638 <_vfprintf_r+0xe74>
80006628:	fa c9 f9 44 	sub	r9,sp,-1724
8000662c:	14 97       	mov	r7,r10
8000662e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006632:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006636:	c1 a8       	rjmp	8000666a <_vfprintf_r+0xea6>
80006638:	41 09       	lddsp	r9,sp[0x40]
8000663a:	59 f8       	cp.w	r8,31
8000663c:	e0 89 00 13 	brgt	80006662 <_vfprintf_r+0xe9e>
80006640:	f2 cb ff fc 	sub	r11,r9,-4
80006644:	51 0b       	stdsp	sp[0x40],r11
80006646:	72 09       	ld.w	r9,r9[0x0]
80006648:	fa c6 f9 44 	sub	r6,sp,-1724
8000664c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006650:	2f f8       	sub	r8,-1
80006652:	f7 49 fd 88 	st.w	r11[-632],r9
80006656:	fb 48 06 b4 	st.w	sp[1716],r8
8000665a:	14 97       	mov	r7,r10
8000665c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006660:	c0 58       	rjmp	8000666a <_vfprintf_r+0xea6>
80006662:	92 18       	ld.sh	r8,r9[0x2]
80006664:	14 97       	mov	r7,r10
80006666:	2f c9       	sub	r9,-4
80006668:	51 09       	stdsp	sp[0x40],r9
8000666a:	5c 78       	castu.h	r8
8000666c:	50 18       	stdsp	sp[0x4],r8
8000666e:	c4 68       	rjmp	800066fa <_vfprintf_r+0xf36>
80006670:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006674:	40 3c       	lddsp	r12,sp[0xc]
80006676:	58 0c       	cp.w	r12,0
80006678:	c1 d0       	breq	800066b2 <_vfprintf_r+0xeee>
8000667a:	10 36       	cp.w	r6,r8
8000667c:	c0 64       	brge	80006688 <_vfprintf_r+0xec4>
8000667e:	fa cb f9 44 	sub	r11,sp,-1724
80006682:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006686:	c1 f8       	rjmp	800066c4 <_vfprintf_r+0xf00>
80006688:	fa c8 f9 50 	sub	r8,sp,-1712
8000668c:	1a d8       	st.w	--sp,r8
8000668e:	fa c8 fa b8 	sub	r8,sp,-1352
80006692:	0c 9b       	mov	r11,r6
80006694:	1a d8       	st.w	--sp,r8
80006696:	fa c8 fb b4 	sub	r8,sp,-1100
8000669a:	04 9a       	mov	r10,r2
8000669c:	1a d8       	st.w	--sp,r8
8000669e:	08 9c       	mov	r12,r4
800066a0:	fa c8 f9 40 	sub	r8,sp,-1728
800066a4:	fa c9 ff b4 	sub	r9,sp,-76
800066a8:	fe b0 f6 f6 	rcall	80005494 <get_arg>
800066ac:	2f dd       	sub	sp,-12
800066ae:	78 0b       	ld.w	r11,r12[0x0]
800066b0:	c2 48       	rjmp	800066f8 <_vfprintf_r+0xf34>
800066b2:	ee ca ff ff 	sub	r10,r7,-1
800066b6:	10 37       	cp.w	r7,r8
800066b8:	c0 94       	brge	800066ca <_vfprintf_r+0xf06>
800066ba:	fa c9 f9 44 	sub	r9,sp,-1724
800066be:	f2 06 00 36 	add	r6,r9,r6<<0x3
800066c2:	14 97       	mov	r7,r10
800066c4:	ec fb fd 88 	ld.w	r11,r6[-632]
800066c8:	c1 88       	rjmp	800066f8 <_vfprintf_r+0xf34>
800066ca:	41 09       	lddsp	r9,sp[0x40]
800066cc:	59 f8       	cp.w	r8,31
800066ce:	e0 89 00 11 	brgt	800066f0 <_vfprintf_r+0xf2c>
800066d2:	f2 cb ff fc 	sub	r11,r9,-4
800066d6:	51 0b       	stdsp	sp[0x40],r11
800066d8:	fa c6 f9 44 	sub	r6,sp,-1724
800066dc:	72 0b       	ld.w	r11,r9[0x0]
800066de:	ec 08 00 39 	add	r9,r6,r8<<0x3
800066e2:	f3 4b fd 88 	st.w	r9[-632],r11
800066e6:	2f f8       	sub	r8,-1
800066e8:	14 97       	mov	r7,r10
800066ea:	fb 48 06 b4 	st.w	sp[1716],r8
800066ee:	c0 58       	rjmp	800066f8 <_vfprintf_r+0xf34>
800066f0:	72 0b       	ld.w	r11,r9[0x0]
800066f2:	14 97       	mov	r7,r10
800066f4:	2f c9       	sub	r9,-4
800066f6:	51 09       	stdsp	sp[0x40],r9
800066f8:	50 1b       	stdsp	sp[0x4],r11
800066fa:	30 0e       	mov	lr,0
800066fc:	50 0e       	stdsp	sp[0x0],lr
800066fe:	1c 98       	mov	r8,lr
80006700:	e0 8f 02 fe 	bral	80006cfc <_vfprintf_r+0x1538>
80006704:	50 a7       	stdsp	sp[0x28],r7
80006706:	50 80       	stdsp	sp[0x20],r0
80006708:	0c 97       	mov	r7,r6
8000670a:	04 94       	mov	r4,r2
8000670c:	06 96       	mov	r6,r3
8000670e:	02 92       	mov	r2,r1
80006710:	40 93       	lddsp	r3,sp[0x24]
80006712:	40 41       	lddsp	r1,sp[0x10]
80006714:	0e 99       	mov	r9,r7
80006716:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000671a:	40 3c       	lddsp	r12,sp[0xc]
8000671c:	58 0c       	cp.w	r12,0
8000671e:	c1 d0       	breq	80006758 <_vfprintf_r+0xf94>
80006720:	10 36       	cp.w	r6,r8
80006722:	c0 64       	brge	8000672e <_vfprintf_r+0xf6a>
80006724:	fa cb f9 44 	sub	r11,sp,-1724
80006728:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000672c:	c1 d8       	rjmp	80006766 <_vfprintf_r+0xfa2>
8000672e:	fa c8 f9 50 	sub	r8,sp,-1712
80006732:	1a d8       	st.w	--sp,r8
80006734:	fa c8 fa b8 	sub	r8,sp,-1352
80006738:	1a d8       	st.w	--sp,r8
8000673a:	fa c8 fb b4 	sub	r8,sp,-1100
8000673e:	1a d8       	st.w	--sp,r8
80006740:	fa c9 ff b4 	sub	r9,sp,-76
80006744:	fa c8 f9 40 	sub	r8,sp,-1728
80006748:	04 9a       	mov	r10,r2
8000674a:	0c 9b       	mov	r11,r6
8000674c:	08 9c       	mov	r12,r4
8000674e:	fe b0 f6 a3 	rcall	80005494 <get_arg>
80006752:	2f dd       	sub	sp,-12
80006754:	78 09       	ld.w	r9,r12[0x0]
80006756:	c2 18       	rjmp	80006798 <_vfprintf_r+0xfd4>
80006758:	2f f7       	sub	r7,-1
8000675a:	10 39       	cp.w	r9,r8
8000675c:	c0 84       	brge	8000676c <_vfprintf_r+0xfa8>
8000675e:	fa ca f9 44 	sub	r10,sp,-1724
80006762:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006766:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000676a:	c1 78       	rjmp	80006798 <_vfprintf_r+0xfd4>
8000676c:	41 09       	lddsp	r9,sp[0x40]
8000676e:	59 f8       	cp.w	r8,31
80006770:	e0 89 00 10 	brgt	80006790 <_vfprintf_r+0xfcc>
80006774:	f2 ca ff fc 	sub	r10,r9,-4
80006778:	51 0a       	stdsp	sp[0x40],r10
8000677a:	fa c6 f9 44 	sub	r6,sp,-1724
8000677e:	72 09       	ld.w	r9,r9[0x0]
80006780:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006784:	f5 49 fd 88 	st.w	r10[-632],r9
80006788:	2f f8       	sub	r8,-1
8000678a:	fb 48 06 b4 	st.w	sp[1716],r8
8000678e:	c0 58       	rjmp	80006798 <_vfprintf_r+0xfd4>
80006790:	f2 c8 ff fc 	sub	r8,r9,-4
80006794:	51 08       	stdsp	sp[0x40],r8
80006796:	72 09       	ld.w	r9,r9[0x0]
80006798:	33 08       	mov	r8,48
8000679a:	fb 68 06 b8 	st.b	sp[1720],r8
8000679e:	37 88       	mov	r8,120
800067a0:	30 0e       	mov	lr,0
800067a2:	fb 68 06 b9 	st.b	sp[1721],r8
800067a6:	fe cc c2 1a 	sub	r12,pc,-15846
800067aa:	50 19       	stdsp	sp[0x4],r9
800067ac:	a1 b5       	sbr	r5,0x1
800067ae:	50 0e       	stdsp	sp[0x0],lr
800067b0:	50 dc       	stdsp	sp[0x34],r12
800067b2:	30 28       	mov	r8,2
800067b4:	37 80       	mov	r0,120
800067b6:	e0 8f 02 a3 	bral	80006cfc <_vfprintf_r+0x1538>
800067ba:	50 a7       	stdsp	sp[0x28],r7
800067bc:	50 80       	stdsp	sp[0x20],r0
800067be:	10 90       	mov	r0,r8
800067c0:	30 08       	mov	r8,0
800067c2:	fb 68 06 bb 	st.b	sp[1723],r8
800067c6:	0c 97       	mov	r7,r6
800067c8:	04 94       	mov	r4,r2
800067ca:	06 96       	mov	r6,r3
800067cc:	02 92       	mov	r2,r1
800067ce:	40 93       	lddsp	r3,sp[0x24]
800067d0:	40 41       	lddsp	r1,sp[0x10]
800067d2:	0e 99       	mov	r9,r7
800067d4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067d8:	40 3b       	lddsp	r11,sp[0xc]
800067da:	58 0b       	cp.w	r11,0
800067dc:	c1 d0       	breq	80006816 <_vfprintf_r+0x1052>
800067de:	10 36       	cp.w	r6,r8
800067e0:	c0 64       	brge	800067ec <_vfprintf_r+0x1028>
800067e2:	fa ca f9 44 	sub	r10,sp,-1724
800067e6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800067ea:	c1 d8       	rjmp	80006824 <_vfprintf_r+0x1060>
800067ec:	fa c8 f9 50 	sub	r8,sp,-1712
800067f0:	1a d8       	st.w	--sp,r8
800067f2:	fa c8 fa b8 	sub	r8,sp,-1352
800067f6:	1a d8       	st.w	--sp,r8
800067f8:	fa c8 fb b4 	sub	r8,sp,-1100
800067fc:	0c 9b       	mov	r11,r6
800067fe:	1a d8       	st.w	--sp,r8
80006800:	04 9a       	mov	r10,r2
80006802:	fa c8 f9 40 	sub	r8,sp,-1728
80006806:	fa c9 ff b4 	sub	r9,sp,-76
8000680a:	08 9c       	mov	r12,r4
8000680c:	fe b0 f6 44 	rcall	80005494 <get_arg>
80006810:	2f dd       	sub	sp,-12
80006812:	78 06       	ld.w	r6,r12[0x0]
80006814:	c2 08       	rjmp	80006854 <_vfprintf_r+0x1090>
80006816:	2f f7       	sub	r7,-1
80006818:	10 39       	cp.w	r9,r8
8000681a:	c0 84       	brge	8000682a <_vfprintf_r+0x1066>
8000681c:	fa c9 f9 44 	sub	r9,sp,-1724
80006820:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006824:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006828:	c1 68       	rjmp	80006854 <_vfprintf_r+0x1090>
8000682a:	41 09       	lddsp	r9,sp[0x40]
8000682c:	59 f8       	cp.w	r8,31
8000682e:	e0 89 00 10 	brgt	8000684e <_vfprintf_r+0x108a>
80006832:	f2 ca ff fc 	sub	r10,r9,-4
80006836:	51 0a       	stdsp	sp[0x40],r10
80006838:	72 06       	ld.w	r6,r9[0x0]
8000683a:	fa ce f9 44 	sub	lr,sp,-1724
8000683e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006842:	f3 46 fd 88 	st.w	r9[-632],r6
80006846:	2f f8       	sub	r8,-1
80006848:	fb 48 06 b4 	st.w	sp[1716],r8
8000684c:	c0 48       	rjmp	80006854 <_vfprintf_r+0x1090>
8000684e:	72 06       	ld.w	r6,r9[0x0]
80006850:	2f c9       	sub	r9,-4
80006852:	51 09       	stdsp	sp[0x40],r9
80006854:	40 2c       	lddsp	r12,sp[0x8]
80006856:	58 0c       	cp.w	r12,0
80006858:	c1 05       	brlt	80006878 <_vfprintf_r+0x10b4>
8000685a:	18 9a       	mov	r10,r12
8000685c:	30 0b       	mov	r11,0
8000685e:	0c 9c       	mov	r12,r6
80006860:	e0 a0 12 f0 	rcall	80008e40 <memchr>
80006864:	e0 80 02 df 	breq	80006e22 <_vfprintf_r+0x165e>
80006868:	f8 06 01 02 	sub	r2,r12,r6
8000686c:	40 2b       	lddsp	r11,sp[0x8]
8000686e:	16 32       	cp.w	r2,r11
80006870:	e0 89 02 d9 	brgt	80006e22 <_vfprintf_r+0x165e>
80006874:	e0 8f 02 d4 	bral	80006e1c <_vfprintf_r+0x1658>
80006878:	30 0a       	mov	r10,0
8000687a:	0c 9c       	mov	r12,r6
8000687c:	50 2a       	stdsp	sp[0x8],r10
8000687e:	e0 a0 16 51 	rcall	80009520 <strlen>
80006882:	18 92       	mov	r2,r12
80006884:	e0 8f 02 d2 	bral	80006e28 <_vfprintf_r+0x1664>
80006888:	50 a7       	stdsp	sp[0x28],r7
8000688a:	50 80       	stdsp	sp[0x20],r0
8000688c:	0c 97       	mov	r7,r6
8000688e:	04 94       	mov	r4,r2
80006890:	06 96       	mov	r6,r3
80006892:	02 92       	mov	r2,r1
80006894:	40 93       	lddsp	r3,sp[0x24]
80006896:	10 90       	mov	r0,r8
80006898:	40 41       	lddsp	r1,sp[0x10]
8000689a:	a5 a5       	sbr	r5,0x4
8000689c:	c0 a8       	rjmp	800068b0 <_vfprintf_r+0x10ec>
8000689e:	50 a7       	stdsp	sp[0x28],r7
800068a0:	50 80       	stdsp	sp[0x20],r0
800068a2:	0c 97       	mov	r7,r6
800068a4:	04 94       	mov	r4,r2
800068a6:	06 96       	mov	r6,r3
800068a8:	02 92       	mov	r2,r1
800068aa:	40 93       	lddsp	r3,sp[0x24]
800068ac:	10 90       	mov	r0,r8
800068ae:	40 41       	lddsp	r1,sp[0x10]
800068b0:	ed b5 00 05 	bld	r5,0x5
800068b4:	c5 61       	brne	80006960 <_vfprintf_r+0x119c>
800068b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800068ba:	40 39       	lddsp	r9,sp[0xc]
800068bc:	58 09       	cp.w	r9,0
800068be:	c2 10       	breq	80006900 <_vfprintf_r+0x113c>
800068c0:	10 36       	cp.w	r6,r8
800068c2:	c0 74       	brge	800068d0 <_vfprintf_r+0x110c>
800068c4:	fa c8 f9 44 	sub	r8,sp,-1724
800068c8:	f0 06 00 36 	add	r6,r8,r6<<0x3
800068cc:	c2 38       	rjmp	80006912 <_vfprintf_r+0x114e>
800068ce:	d7 03       	nop
800068d0:	fa c8 f9 50 	sub	r8,sp,-1712
800068d4:	1a d8       	st.w	--sp,r8
800068d6:	fa c8 fa b8 	sub	r8,sp,-1352
800068da:	1a d8       	st.w	--sp,r8
800068dc:	fa c8 fb b4 	sub	r8,sp,-1100
800068e0:	1a d8       	st.w	--sp,r8
800068e2:	fa c8 f9 40 	sub	r8,sp,-1728
800068e6:	fa c9 ff b4 	sub	r9,sp,-76
800068ea:	04 9a       	mov	r10,r2
800068ec:	0c 9b       	mov	r11,r6
800068ee:	08 9c       	mov	r12,r4
800068f0:	fe b0 f5 d2 	rcall	80005494 <get_arg>
800068f4:	2f dd       	sub	sp,-12
800068f6:	f8 e8 00 00 	ld.d	r8,r12[0]
800068fa:	fa e9 00 00 	st.d	sp[0],r8
800068fe:	c2 e8       	rjmp	8000695a <_vfprintf_r+0x1196>
80006900:	ee ca ff ff 	sub	r10,r7,-1
80006904:	10 37       	cp.w	r7,r8
80006906:	c0 b4       	brge	8000691c <_vfprintf_r+0x1158>
80006908:	fa c8 f9 44 	sub	r8,sp,-1724
8000690c:	14 97       	mov	r7,r10
8000690e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006912:	ec ea fd 88 	ld.d	r10,r6[-632]
80006916:	fa eb 00 00 	st.d	sp[0],r10
8000691a:	c2 08       	rjmp	8000695a <_vfprintf_r+0x1196>
8000691c:	41 09       	lddsp	r9,sp[0x40]
8000691e:	59 f8       	cp.w	r8,31
80006920:	e0 89 00 16 	brgt	8000694c <_vfprintf_r+0x1188>
80006924:	f2 e6 00 00 	ld.d	r6,r9[0]
80006928:	f2 cb ff f8 	sub	r11,r9,-8
8000692c:	fa e7 00 00 	st.d	sp[0],r6
80006930:	51 0b       	stdsp	sp[0x40],r11
80006932:	fa c6 f9 44 	sub	r6,sp,-1724
80006936:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000693a:	fa e6 00 00 	ld.d	r6,sp[0]
8000693e:	f2 e7 fd 88 	st.d	r9[-632],r6
80006942:	2f f8       	sub	r8,-1
80006944:	14 97       	mov	r7,r10
80006946:	fb 48 06 b4 	st.w	sp[1716],r8
8000694a:	c0 88       	rjmp	8000695a <_vfprintf_r+0x1196>
8000694c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006950:	2f 89       	sub	r9,-8
80006952:	fa e7 00 00 	st.d	sp[0],r6
80006956:	51 09       	stdsp	sp[0x40],r9
80006958:	14 97       	mov	r7,r10
8000695a:	30 18       	mov	r8,1
8000695c:	e0 8f 01 d0 	bral	80006cfc <_vfprintf_r+0x1538>
80006960:	ed b5 00 04 	bld	r5,0x4
80006964:	c1 61       	brne	80006990 <_vfprintf_r+0x11cc>
80006966:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000696a:	40 3e       	lddsp	lr,sp[0xc]
8000696c:	58 0e       	cp.w	lr,0
8000696e:	c0 80       	breq	8000697e <_vfprintf_r+0x11ba>
80006970:	10 36       	cp.w	r6,r8
80006972:	c6 74       	brge	80006a40 <_vfprintf_r+0x127c>
80006974:	fa cc f9 44 	sub	r12,sp,-1724
80006978:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000697c:	c8 08       	rjmp	80006a7c <_vfprintf_r+0x12b8>
8000697e:	ee ca ff ff 	sub	r10,r7,-1
80006982:	10 37       	cp.w	r7,r8
80006984:	c7 f4       	brge	80006a82 <_vfprintf_r+0x12be>
80006986:	fa cb f9 44 	sub	r11,sp,-1724
8000698a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000698e:	c7 68       	rjmp	80006a7a <_vfprintf_r+0x12b6>
80006990:	ed b5 00 06 	bld	r5,0x6
80006994:	c4 a1       	brne	80006a28 <_vfprintf_r+0x1264>
80006996:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000699a:	40 3c       	lddsp	r12,sp[0xc]
8000699c:	58 0c       	cp.w	r12,0
8000699e:	c1 d0       	breq	800069d8 <_vfprintf_r+0x1214>
800069a0:	10 36       	cp.w	r6,r8
800069a2:	c0 64       	brge	800069ae <_vfprintf_r+0x11ea>
800069a4:	fa cb f9 44 	sub	r11,sp,-1724
800069a8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800069ac:	c1 f8       	rjmp	800069ea <_vfprintf_r+0x1226>
800069ae:	fa c8 f9 50 	sub	r8,sp,-1712
800069b2:	1a d8       	st.w	--sp,r8
800069b4:	fa c8 fa b8 	sub	r8,sp,-1352
800069b8:	1a d8       	st.w	--sp,r8
800069ba:	fa c8 fb b4 	sub	r8,sp,-1100
800069be:	1a d8       	st.w	--sp,r8
800069c0:	fa c8 f9 40 	sub	r8,sp,-1728
800069c4:	fa c9 ff b4 	sub	r9,sp,-76
800069c8:	04 9a       	mov	r10,r2
800069ca:	0c 9b       	mov	r11,r6
800069cc:	08 9c       	mov	r12,r4
800069ce:	fe b0 f5 63 	rcall	80005494 <get_arg>
800069d2:	2f dd       	sub	sp,-12
800069d4:	98 18       	ld.sh	r8,r12[0x2]
800069d6:	c2 68       	rjmp	80006a22 <_vfprintf_r+0x125e>
800069d8:	ee ca ff ff 	sub	r10,r7,-1
800069dc:	10 37       	cp.w	r7,r8
800069de:	c0 94       	brge	800069f0 <_vfprintf_r+0x122c>
800069e0:	fa c9 f9 44 	sub	r9,sp,-1724
800069e4:	14 97       	mov	r7,r10
800069e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800069ea:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800069ee:	c1 a8       	rjmp	80006a22 <_vfprintf_r+0x125e>
800069f0:	41 09       	lddsp	r9,sp[0x40]
800069f2:	59 f8       	cp.w	r8,31
800069f4:	e0 89 00 13 	brgt	80006a1a <_vfprintf_r+0x1256>
800069f8:	f2 cb ff fc 	sub	r11,r9,-4
800069fc:	51 0b       	stdsp	sp[0x40],r11
800069fe:	72 09       	ld.w	r9,r9[0x0]
80006a00:	fa c6 f9 44 	sub	r6,sp,-1724
80006a04:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006a08:	2f f8       	sub	r8,-1
80006a0a:	f7 49 fd 88 	st.w	r11[-632],r9
80006a0e:	fb 48 06 b4 	st.w	sp[1716],r8
80006a12:	14 97       	mov	r7,r10
80006a14:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006a18:	c0 58       	rjmp	80006a22 <_vfprintf_r+0x125e>
80006a1a:	92 18       	ld.sh	r8,r9[0x2]
80006a1c:	14 97       	mov	r7,r10
80006a1e:	2f c9       	sub	r9,-4
80006a20:	51 09       	stdsp	sp[0x40],r9
80006a22:	5c 78       	castu.h	r8
80006a24:	50 18       	stdsp	sp[0x4],r8
80006a26:	c4 68       	rjmp	80006ab2 <_vfprintf_r+0x12ee>
80006a28:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a2c:	40 3c       	lddsp	r12,sp[0xc]
80006a2e:	58 0c       	cp.w	r12,0
80006a30:	c1 d0       	breq	80006a6a <_vfprintf_r+0x12a6>
80006a32:	10 36       	cp.w	r6,r8
80006a34:	c0 64       	brge	80006a40 <_vfprintf_r+0x127c>
80006a36:	fa cb f9 44 	sub	r11,sp,-1724
80006a3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006a3e:	c1 f8       	rjmp	80006a7c <_vfprintf_r+0x12b8>
80006a40:	fa c8 f9 50 	sub	r8,sp,-1712
80006a44:	1a d8       	st.w	--sp,r8
80006a46:	fa c8 fa b8 	sub	r8,sp,-1352
80006a4a:	0c 9b       	mov	r11,r6
80006a4c:	1a d8       	st.w	--sp,r8
80006a4e:	fa c8 fb b4 	sub	r8,sp,-1100
80006a52:	04 9a       	mov	r10,r2
80006a54:	1a d8       	st.w	--sp,r8
80006a56:	08 9c       	mov	r12,r4
80006a58:	fa c8 f9 40 	sub	r8,sp,-1728
80006a5c:	fa c9 ff b4 	sub	r9,sp,-76
80006a60:	fe b0 f5 1a 	rcall	80005494 <get_arg>
80006a64:	2f dd       	sub	sp,-12
80006a66:	78 0b       	ld.w	r11,r12[0x0]
80006a68:	c2 48       	rjmp	80006ab0 <_vfprintf_r+0x12ec>
80006a6a:	ee ca ff ff 	sub	r10,r7,-1
80006a6e:	10 37       	cp.w	r7,r8
80006a70:	c0 94       	brge	80006a82 <_vfprintf_r+0x12be>
80006a72:	fa c9 f9 44 	sub	r9,sp,-1724
80006a76:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006a7a:	14 97       	mov	r7,r10
80006a7c:	ec fb fd 88 	ld.w	r11,r6[-632]
80006a80:	c1 88       	rjmp	80006ab0 <_vfprintf_r+0x12ec>
80006a82:	41 09       	lddsp	r9,sp[0x40]
80006a84:	59 f8       	cp.w	r8,31
80006a86:	e0 89 00 11 	brgt	80006aa8 <_vfprintf_r+0x12e4>
80006a8a:	f2 cb ff fc 	sub	r11,r9,-4
80006a8e:	51 0b       	stdsp	sp[0x40],r11
80006a90:	fa c6 f9 44 	sub	r6,sp,-1724
80006a94:	72 0b       	ld.w	r11,r9[0x0]
80006a96:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006a9a:	f3 4b fd 88 	st.w	r9[-632],r11
80006a9e:	2f f8       	sub	r8,-1
80006aa0:	14 97       	mov	r7,r10
80006aa2:	fb 48 06 b4 	st.w	sp[1716],r8
80006aa6:	c0 58       	rjmp	80006ab0 <_vfprintf_r+0x12ec>
80006aa8:	72 0b       	ld.w	r11,r9[0x0]
80006aaa:	14 97       	mov	r7,r10
80006aac:	2f c9       	sub	r9,-4
80006aae:	51 09       	stdsp	sp[0x40],r9
80006ab0:	50 1b       	stdsp	sp[0x4],r11
80006ab2:	30 0e       	mov	lr,0
80006ab4:	30 18       	mov	r8,1
80006ab6:	50 0e       	stdsp	sp[0x0],lr
80006ab8:	c2 29       	rjmp	80006cfc <_vfprintf_r+0x1538>
80006aba:	50 a7       	stdsp	sp[0x28],r7
80006abc:	50 80       	stdsp	sp[0x20],r0
80006abe:	0c 97       	mov	r7,r6
80006ac0:	04 94       	mov	r4,r2
80006ac2:	06 96       	mov	r6,r3
80006ac4:	02 92       	mov	r2,r1
80006ac6:	fe cc c5 3a 	sub	r12,pc,-15046
80006aca:	40 93       	lddsp	r3,sp[0x24]
80006acc:	10 90       	mov	r0,r8
80006ace:	40 41       	lddsp	r1,sp[0x10]
80006ad0:	50 dc       	stdsp	sp[0x34],r12
80006ad2:	ed b5 00 05 	bld	r5,0x5
80006ad6:	c5 51       	brne	80006b80 <_vfprintf_r+0x13bc>
80006ad8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006adc:	40 3b       	lddsp	r11,sp[0xc]
80006ade:	58 0b       	cp.w	r11,0
80006ae0:	c2 20       	breq	80006b24 <_vfprintf_r+0x1360>
80006ae2:	10 36       	cp.w	r6,r8
80006ae4:	c0 a4       	brge	80006af8 <_vfprintf_r+0x1334>
80006ae6:	fa ca f9 44 	sub	r10,sp,-1724
80006aea:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006aee:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006af2:	fa e9 00 00 	st.d	sp[0],r8
80006af6:	cf 28       	rjmp	80006cda <_vfprintf_r+0x1516>
80006af8:	fa c8 f9 50 	sub	r8,sp,-1712
80006afc:	1a d8       	st.w	--sp,r8
80006afe:	fa c8 fa b8 	sub	r8,sp,-1352
80006b02:	04 9a       	mov	r10,r2
80006b04:	1a d8       	st.w	--sp,r8
80006b06:	0c 9b       	mov	r11,r6
80006b08:	fa c8 fb b4 	sub	r8,sp,-1100
80006b0c:	08 9c       	mov	r12,r4
80006b0e:	1a d8       	st.w	--sp,r8
80006b10:	fa c8 f9 40 	sub	r8,sp,-1728
80006b14:	fa c9 ff b4 	sub	r9,sp,-76
80006b18:	fe b0 f4 be 	rcall	80005494 <get_arg>
80006b1c:	2f dd       	sub	sp,-12
80006b1e:	f8 ea 00 00 	ld.d	r10,r12[0]
80006b22:	c0 c8       	rjmp	80006b3a <_vfprintf_r+0x1376>
80006b24:	ee ca ff ff 	sub	r10,r7,-1
80006b28:	10 37       	cp.w	r7,r8
80006b2a:	c0 b4       	brge	80006b40 <_vfprintf_r+0x137c>
80006b2c:	fa c9 f9 44 	sub	r9,sp,-1724
80006b30:	14 97       	mov	r7,r10
80006b32:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006b36:	ec ea fd 88 	ld.d	r10,r6[-632]
80006b3a:	fa eb 00 00 	st.d	sp[0],r10
80006b3e:	cc e8       	rjmp	80006cda <_vfprintf_r+0x1516>
80006b40:	41 09       	lddsp	r9,sp[0x40]
80006b42:	59 f8       	cp.w	r8,31
80006b44:	e0 89 00 16 	brgt	80006b70 <_vfprintf_r+0x13ac>
80006b48:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b4c:	f2 cb ff f8 	sub	r11,r9,-8
80006b50:	fa e7 00 00 	st.d	sp[0],r6
80006b54:	51 0b       	stdsp	sp[0x40],r11
80006b56:	fa c6 f9 44 	sub	r6,sp,-1724
80006b5a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b5e:	fa e6 00 00 	ld.d	r6,sp[0]
80006b62:	f2 e7 fd 88 	st.d	r9[-632],r6
80006b66:	2f f8       	sub	r8,-1
80006b68:	14 97       	mov	r7,r10
80006b6a:	fb 48 06 b4 	st.w	sp[1716],r8
80006b6e:	cb 68       	rjmp	80006cda <_vfprintf_r+0x1516>
80006b70:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b74:	2f 89       	sub	r9,-8
80006b76:	fa e7 00 00 	st.d	sp[0],r6
80006b7a:	51 09       	stdsp	sp[0x40],r9
80006b7c:	14 97       	mov	r7,r10
80006b7e:	ca e8       	rjmp	80006cda <_vfprintf_r+0x1516>
80006b80:	ed b5 00 04 	bld	r5,0x4
80006b84:	c1 71       	brne	80006bb2 <_vfprintf_r+0x13ee>
80006b86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b8a:	40 3e       	lddsp	lr,sp[0xc]
80006b8c:	58 0e       	cp.w	lr,0
80006b8e:	c0 80       	breq	80006b9e <_vfprintf_r+0x13da>
80006b90:	10 36       	cp.w	r6,r8
80006b92:	c6 94       	brge	80006c64 <_vfprintf_r+0x14a0>
80006b94:	fa cc f9 44 	sub	r12,sp,-1724
80006b98:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006b9c:	c8 28       	rjmp	80006ca0 <_vfprintf_r+0x14dc>
80006b9e:	ee ca ff ff 	sub	r10,r7,-1
80006ba2:	10 37       	cp.w	r7,r8
80006ba4:	e0 84 00 81 	brge	80006ca6 <_vfprintf_r+0x14e2>
80006ba8:	fa cb f9 44 	sub	r11,sp,-1724
80006bac:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bb0:	c7 78       	rjmp	80006c9e <_vfprintf_r+0x14da>
80006bb2:	ed b5 00 06 	bld	r5,0x6
80006bb6:	c4 b1       	brne	80006c4c <_vfprintf_r+0x1488>
80006bb8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006bbc:	40 3c       	lddsp	r12,sp[0xc]
80006bbe:	58 0c       	cp.w	r12,0
80006bc0:	c1 d0       	breq	80006bfa <_vfprintf_r+0x1436>
80006bc2:	10 36       	cp.w	r6,r8
80006bc4:	c0 64       	brge	80006bd0 <_vfprintf_r+0x140c>
80006bc6:	fa cb f9 44 	sub	r11,sp,-1724
80006bca:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bce:	c1 f8       	rjmp	80006c0c <_vfprintf_r+0x1448>
80006bd0:	fa c8 f9 50 	sub	r8,sp,-1712
80006bd4:	1a d8       	st.w	--sp,r8
80006bd6:	fa c8 fa b8 	sub	r8,sp,-1352
80006bda:	1a d8       	st.w	--sp,r8
80006bdc:	fa c8 fb b4 	sub	r8,sp,-1100
80006be0:	1a d8       	st.w	--sp,r8
80006be2:	fa c8 f9 40 	sub	r8,sp,-1728
80006be6:	fa c9 ff b4 	sub	r9,sp,-76
80006bea:	04 9a       	mov	r10,r2
80006bec:	0c 9b       	mov	r11,r6
80006bee:	08 9c       	mov	r12,r4
80006bf0:	fe b0 f4 52 	rcall	80005494 <get_arg>
80006bf4:	2f dd       	sub	sp,-12
80006bf6:	98 18       	ld.sh	r8,r12[0x2]
80006bf8:	c2 78       	rjmp	80006c46 <_vfprintf_r+0x1482>
80006bfa:	ee ca ff ff 	sub	r10,r7,-1
80006bfe:	10 37       	cp.w	r7,r8
80006c00:	c0 a4       	brge	80006c14 <_vfprintf_r+0x1450>
80006c02:	fa c9 f9 44 	sub	r9,sp,-1724
80006c06:	14 97       	mov	r7,r10
80006c08:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006c0c:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006c10:	c1 b8       	rjmp	80006c46 <_vfprintf_r+0x1482>
80006c12:	d7 03       	nop
80006c14:	41 09       	lddsp	r9,sp[0x40]
80006c16:	59 f8       	cp.w	r8,31
80006c18:	e0 89 00 13 	brgt	80006c3e <_vfprintf_r+0x147a>
80006c1c:	f2 cb ff fc 	sub	r11,r9,-4
80006c20:	51 0b       	stdsp	sp[0x40],r11
80006c22:	72 09       	ld.w	r9,r9[0x0]
80006c24:	fa c6 f9 44 	sub	r6,sp,-1724
80006c28:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006c2c:	2f f8       	sub	r8,-1
80006c2e:	f7 49 fd 88 	st.w	r11[-632],r9
80006c32:	fb 48 06 b4 	st.w	sp[1716],r8
80006c36:	14 97       	mov	r7,r10
80006c38:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006c3c:	c0 58       	rjmp	80006c46 <_vfprintf_r+0x1482>
80006c3e:	92 18       	ld.sh	r8,r9[0x2]
80006c40:	14 97       	mov	r7,r10
80006c42:	2f c9       	sub	r9,-4
80006c44:	51 09       	stdsp	sp[0x40],r9
80006c46:	5c 78       	castu.h	r8
80006c48:	50 18       	stdsp	sp[0x4],r8
80006c4a:	c4 68       	rjmp	80006cd6 <_vfprintf_r+0x1512>
80006c4c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c50:	40 3c       	lddsp	r12,sp[0xc]
80006c52:	58 0c       	cp.w	r12,0
80006c54:	c1 d0       	breq	80006c8e <_vfprintf_r+0x14ca>
80006c56:	10 36       	cp.w	r6,r8
80006c58:	c0 64       	brge	80006c64 <_vfprintf_r+0x14a0>
80006c5a:	fa cb f9 44 	sub	r11,sp,-1724
80006c5e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006c62:	c1 f8       	rjmp	80006ca0 <_vfprintf_r+0x14dc>
80006c64:	fa c8 f9 50 	sub	r8,sp,-1712
80006c68:	1a d8       	st.w	--sp,r8
80006c6a:	fa c8 fa b8 	sub	r8,sp,-1352
80006c6e:	0c 9b       	mov	r11,r6
80006c70:	1a d8       	st.w	--sp,r8
80006c72:	fa c8 fb b4 	sub	r8,sp,-1100
80006c76:	04 9a       	mov	r10,r2
80006c78:	1a d8       	st.w	--sp,r8
80006c7a:	08 9c       	mov	r12,r4
80006c7c:	fa c8 f9 40 	sub	r8,sp,-1728
80006c80:	fa c9 ff b4 	sub	r9,sp,-76
80006c84:	fe b0 f4 08 	rcall	80005494 <get_arg>
80006c88:	2f dd       	sub	sp,-12
80006c8a:	78 0b       	ld.w	r11,r12[0x0]
80006c8c:	c2 48       	rjmp	80006cd4 <_vfprintf_r+0x1510>
80006c8e:	ee ca ff ff 	sub	r10,r7,-1
80006c92:	10 37       	cp.w	r7,r8
80006c94:	c0 94       	brge	80006ca6 <_vfprintf_r+0x14e2>
80006c96:	fa c9 f9 44 	sub	r9,sp,-1724
80006c9a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006c9e:	14 97       	mov	r7,r10
80006ca0:	ec fb fd 88 	ld.w	r11,r6[-632]
80006ca4:	c1 88       	rjmp	80006cd4 <_vfprintf_r+0x1510>
80006ca6:	41 09       	lddsp	r9,sp[0x40]
80006ca8:	59 f8       	cp.w	r8,31
80006caa:	e0 89 00 11 	brgt	80006ccc <_vfprintf_r+0x1508>
80006cae:	f2 cb ff fc 	sub	r11,r9,-4
80006cb2:	51 0b       	stdsp	sp[0x40],r11
80006cb4:	fa c6 f9 44 	sub	r6,sp,-1724
80006cb8:	72 0b       	ld.w	r11,r9[0x0]
80006cba:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006cbe:	f3 4b fd 88 	st.w	r9[-632],r11
80006cc2:	2f f8       	sub	r8,-1
80006cc4:	14 97       	mov	r7,r10
80006cc6:	fb 48 06 b4 	st.w	sp[1716],r8
80006cca:	c0 58       	rjmp	80006cd4 <_vfprintf_r+0x1510>
80006ccc:	72 0b       	ld.w	r11,r9[0x0]
80006cce:	14 97       	mov	r7,r10
80006cd0:	2f c9       	sub	r9,-4
80006cd2:	51 09       	stdsp	sp[0x40],r9
80006cd4:	50 1b       	stdsp	sp[0x4],r11
80006cd6:	30 0e       	mov	lr,0
80006cd8:	50 0e       	stdsp	sp[0x0],lr
80006cda:	40 08       	lddsp	r8,sp[0x0]
80006cdc:	40 1c       	lddsp	r12,sp[0x4]
80006cde:	18 48       	or	r8,r12
80006ce0:	5f 19       	srne	r9
80006ce2:	0a 98       	mov	r8,r5
80006ce4:	eb e9 00 09 	and	r9,r5,r9
80006ce8:	a1 b8       	sbr	r8,0x1
80006cea:	58 09       	cp.w	r9,0
80006cec:	c0 70       	breq	80006cfa <_vfprintf_r+0x1536>
80006cee:	10 95       	mov	r5,r8
80006cf0:	fb 60 06 b9 	st.b	sp[1721],r0
80006cf4:	33 08       	mov	r8,48
80006cf6:	fb 68 06 b8 	st.b	sp[1720],r8
80006cfa:	30 28       	mov	r8,2
80006cfc:	30 09       	mov	r9,0
80006cfe:	fb 69 06 bb 	st.b	sp[1723],r9
80006d02:	0a 99       	mov	r9,r5
80006d04:	a7 d9       	cbr	r9,0x7
80006d06:	40 2b       	lddsp	r11,sp[0x8]
80006d08:	40 16       	lddsp	r6,sp[0x4]
80006d0a:	58 0b       	cp.w	r11,0
80006d0c:	5f 1a       	srne	r10
80006d0e:	f2 05 17 40 	movge	r5,r9
80006d12:	fa c2 f9 78 	sub	r2,sp,-1672
80006d16:	40 09       	lddsp	r9,sp[0x0]
80006d18:	0c 49       	or	r9,r6
80006d1a:	5f 19       	srne	r9
80006d1c:	f5 e9 10 09 	or	r9,r10,r9
80006d20:	c5 c0       	breq	80006dd8 <_vfprintf_r+0x1614>
80006d22:	30 19       	mov	r9,1
80006d24:	f2 08 18 00 	cp.b	r8,r9
80006d28:	c0 60       	breq	80006d34 <_vfprintf_r+0x1570>
80006d2a:	30 29       	mov	r9,2
80006d2c:	f2 08 18 00 	cp.b	r8,r9
80006d30:	c0 41       	brne	80006d38 <_vfprintf_r+0x1574>
80006d32:	c3 c8       	rjmp	80006daa <_vfprintf_r+0x15e6>
80006d34:	04 96       	mov	r6,r2
80006d36:	c3 08       	rjmp	80006d96 <_vfprintf_r+0x15d2>
80006d38:	04 96       	mov	r6,r2
80006d3a:	fa e8 00 00 	ld.d	r8,sp[0]
80006d3e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006d42:	2d 0a       	sub	r10,-48
80006d44:	0c fa       	st.b	--r6,r10
80006d46:	f0 0b 16 03 	lsr	r11,r8,0x3
80006d4a:	f2 0c 16 03 	lsr	r12,r9,0x3
80006d4e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006d52:	18 99       	mov	r9,r12
80006d54:	16 98       	mov	r8,r11
80006d56:	58 08       	cp.w	r8,0
80006d58:	5c 29       	cpc	r9
80006d5a:	cf 21       	brne	80006d3e <_vfprintf_r+0x157a>
80006d5c:	fa e9 00 00 	st.d	sp[0],r8
80006d60:	ed b5 00 00 	bld	r5,0x0
80006d64:	c4 51       	brne	80006dee <_vfprintf_r+0x162a>
80006d66:	33 09       	mov	r9,48
80006d68:	f2 0a 18 00 	cp.b	r10,r9
80006d6c:	c4 10       	breq	80006dee <_vfprintf_r+0x162a>
80006d6e:	0c f9       	st.b	--r6,r9
80006d70:	c3 f8       	rjmp	80006dee <_vfprintf_r+0x162a>
80006d72:	fa ea 00 00 	ld.d	r10,sp[0]
80006d76:	30 a8       	mov	r8,10
80006d78:	30 09       	mov	r9,0
80006d7a:	e0 a0 16 46 	rcall	80009a06 <__avr32_umod64>
80006d7e:	30 a8       	mov	r8,10
80006d80:	2d 0a       	sub	r10,-48
80006d82:	30 09       	mov	r9,0
80006d84:	ac 8a       	st.b	r6[0x0],r10
80006d86:	fa ea 00 00 	ld.d	r10,sp[0]
80006d8a:	e0 a0 15 0c 	rcall	800097a2 <__avr32_udiv64>
80006d8e:	16 99       	mov	r9,r11
80006d90:	14 98       	mov	r8,r10
80006d92:	fa e9 00 00 	st.d	sp[0],r8
80006d96:	20 16       	sub	r6,1
80006d98:	fa ea 00 00 	ld.d	r10,sp[0]
80006d9c:	58 9a       	cp.w	r10,9
80006d9e:	5c 2b       	cpc	r11
80006da0:	fe 9b ff e9 	brhi	80006d72 <_vfprintf_r+0x15ae>
80006da4:	1b f8       	ld.ub	r8,sp[0x7]
80006da6:	2d 08       	sub	r8,-48
80006da8:	c2 08       	rjmp	80006de8 <_vfprintf_r+0x1624>
80006daa:	04 96       	mov	r6,r2
80006dac:	fa e8 00 00 	ld.d	r8,sp[0]
80006db0:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006db4:	40 de       	lddsp	lr,sp[0x34]
80006db6:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006dba:	0c fa       	st.b	--r6,r10
80006dbc:	f2 0b 16 04 	lsr	r11,r9,0x4
80006dc0:	f0 0a 16 04 	lsr	r10,r8,0x4
80006dc4:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006dc8:	16 99       	mov	r9,r11
80006dca:	14 98       	mov	r8,r10
80006dcc:	58 08       	cp.w	r8,0
80006dce:	5c 29       	cpc	r9
80006dd0:	cf 01       	brne	80006db0 <_vfprintf_r+0x15ec>
80006dd2:	fa e9 00 00 	st.d	sp[0],r8
80006dd6:	c0 c8       	rjmp	80006dee <_vfprintf_r+0x162a>
80006dd8:	58 08       	cp.w	r8,0
80006dda:	c0 91       	brne	80006dec <_vfprintf_r+0x1628>
80006ddc:	ed b5 00 00 	bld	r5,0x0
80006de0:	c0 61       	brne	80006dec <_vfprintf_r+0x1628>
80006de2:	fa c6 f9 79 	sub	r6,sp,-1671
80006de6:	33 08       	mov	r8,48
80006de8:	ac 88       	st.b	r6[0x0],r8
80006dea:	c0 28       	rjmp	80006dee <_vfprintf_r+0x162a>
80006dec:	04 96       	mov	r6,r2
80006dee:	0c 12       	sub	r2,r6
80006df0:	c1 c8       	rjmp	80006e28 <_vfprintf_r+0x1664>
80006df2:	50 a7       	stdsp	sp[0x28],r7
80006df4:	50 80       	stdsp	sp[0x20],r0
80006df6:	40 93       	lddsp	r3,sp[0x24]
80006df8:	0c 97       	mov	r7,r6
80006dfa:	10 90       	mov	r0,r8
80006dfc:	04 94       	mov	r4,r2
80006dfe:	40 41       	lddsp	r1,sp[0x10]
80006e00:	58 08       	cp.w	r8,0
80006e02:	e0 80 04 4f 	breq	800076a0 <_vfprintf_r+0x1edc>
80006e06:	fb 68 06 60 	st.b	sp[1632],r8
80006e0a:	30 0c       	mov	r12,0
80006e0c:	30 08       	mov	r8,0
80006e0e:	30 12       	mov	r2,1
80006e10:	fb 68 06 bb 	st.b	sp[1723],r8
80006e14:	50 2c       	stdsp	sp[0x8],r12
80006e16:	fa c6 f9 a0 	sub	r6,sp,-1632
80006e1a:	c0 78       	rjmp	80006e28 <_vfprintf_r+0x1664>
80006e1c:	30 0b       	mov	r11,0
80006e1e:	50 2b       	stdsp	sp[0x8],r11
80006e20:	c0 48       	rjmp	80006e28 <_vfprintf_r+0x1664>
80006e22:	40 22       	lddsp	r2,sp[0x8]
80006e24:	30 0a       	mov	r10,0
80006e26:	50 2a       	stdsp	sp[0x8],r10
80006e28:	40 29       	lddsp	r9,sp[0x8]
80006e2a:	e4 09 0c 49 	max	r9,r2,r9
80006e2e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006e32:	50 39       	stdsp	sp[0xc],r9
80006e34:	0a 9e       	mov	lr,r5
80006e36:	30 09       	mov	r9,0
80006e38:	e2 1e 00 02 	andl	lr,0x2,COH
80006e3c:	f2 08 18 00 	cp.b	r8,r9
80006e40:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80006e44:	f7 b8 01 ff 	subne	r8,-1
80006e48:	fb f8 1a 03 	st.wne	sp[0xc],r8
80006e4c:	0a 9b       	mov	r11,r5
80006e4e:	58 0e       	cp.w	lr,0
80006e50:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80006e54:	f7 bc 01 fe 	subne	r12,-2
80006e58:	fb fc 1a 03 	st.wne	sp[0xc],r12
80006e5c:	e2 1b 00 84 	andl	r11,0x84,COH
80006e60:	50 fe       	stdsp	sp[0x3c],lr
80006e62:	50 9b       	stdsp	sp[0x24],r11
80006e64:	c4 71       	brne	80006ef2 <_vfprintf_r+0x172e>
80006e66:	40 8a       	lddsp	r10,sp[0x20]
80006e68:	40 39       	lddsp	r9,sp[0xc]
80006e6a:	12 1a       	sub	r10,r9
80006e6c:	50 4a       	stdsp	sp[0x10],r10
80006e6e:	58 0a       	cp.w	r10,0
80006e70:	e0 89 00 20 	brgt	80006eb0 <_vfprintf_r+0x16ec>
80006e74:	c3 f8       	rjmp	80006ef2 <_vfprintf_r+0x172e>
80006e76:	2f 09       	sub	r9,-16
80006e78:	2f f8       	sub	r8,-1
80006e7a:	fe ce c8 da 	sub	lr,pc,-14118
80006e7e:	31 0c       	mov	r12,16
80006e80:	fb 49 06 90 	st.w	sp[1680],r9
80006e84:	87 0e       	st.w	r3[0x0],lr
80006e86:	87 1c       	st.w	r3[0x4],r12
80006e88:	fb 48 06 8c 	st.w	sp[1676],r8
80006e8c:	58 78       	cp.w	r8,7
80006e8e:	e0 89 00 04 	brgt	80006e96 <_vfprintf_r+0x16d2>
80006e92:	2f 83       	sub	r3,-8
80006e94:	c0 b8       	rjmp	80006eaa <_vfprintf_r+0x16e6>
80006e96:	fa ca f9 78 	sub	r10,sp,-1672
80006e9a:	02 9b       	mov	r11,r1
80006e9c:	08 9c       	mov	r12,r4
80006e9e:	fe b0 f4 85 	rcall	800057a8 <__sprint_r>
80006ea2:	e0 81 04 10 	brne	800076c2 <_vfprintf_r+0x1efe>
80006ea6:	fa c3 f9 e0 	sub	r3,sp,-1568
80006eaa:	40 4b       	lddsp	r11,sp[0x10]
80006eac:	21 0b       	sub	r11,16
80006eae:	50 4b       	stdsp	sp[0x10],r11
80006eb0:	fa f9 06 90 	ld.w	r9,sp[1680]
80006eb4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006eb8:	fe ca c9 18 	sub	r10,pc,-14056
80006ebc:	40 4e       	lddsp	lr,sp[0x10]
80006ebe:	59 0e       	cp.w	lr,16
80006ec0:	fe 99 ff db 	brgt	80006e76 <_vfprintf_r+0x16b2>
80006ec4:	1c 09       	add	r9,lr
80006ec6:	2f f8       	sub	r8,-1
80006ec8:	87 0a       	st.w	r3[0x0],r10
80006eca:	fb 49 06 90 	st.w	sp[1680],r9
80006ece:	87 1e       	st.w	r3[0x4],lr
80006ed0:	fb 48 06 8c 	st.w	sp[1676],r8
80006ed4:	58 78       	cp.w	r8,7
80006ed6:	e0 89 00 04 	brgt	80006ede <_vfprintf_r+0x171a>
80006eda:	2f 83       	sub	r3,-8
80006edc:	c0 b8       	rjmp	80006ef2 <_vfprintf_r+0x172e>
80006ede:	fa ca f9 78 	sub	r10,sp,-1672
80006ee2:	02 9b       	mov	r11,r1
80006ee4:	08 9c       	mov	r12,r4
80006ee6:	fe b0 f4 61 	rcall	800057a8 <__sprint_r>
80006eea:	e0 81 03 ec 	brne	800076c2 <_vfprintf_r+0x1efe>
80006eee:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ef2:	30 09       	mov	r9,0
80006ef4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006ef8:	f2 08 18 00 	cp.b	r8,r9
80006efc:	c1 f0       	breq	80006f3a <_vfprintf_r+0x1776>
80006efe:	fa f8 06 90 	ld.w	r8,sp[1680]
80006f02:	fa c9 f9 45 	sub	r9,sp,-1723
80006f06:	2f f8       	sub	r8,-1
80006f08:	87 09       	st.w	r3[0x0],r9
80006f0a:	fb 48 06 90 	st.w	sp[1680],r8
80006f0e:	30 19       	mov	r9,1
80006f10:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f14:	87 19       	st.w	r3[0x4],r9
80006f16:	2f f8       	sub	r8,-1
80006f18:	fb 48 06 8c 	st.w	sp[1676],r8
80006f1c:	58 78       	cp.w	r8,7
80006f1e:	e0 89 00 04 	brgt	80006f26 <_vfprintf_r+0x1762>
80006f22:	2f 83       	sub	r3,-8
80006f24:	c0 b8       	rjmp	80006f3a <_vfprintf_r+0x1776>
80006f26:	fa ca f9 78 	sub	r10,sp,-1672
80006f2a:	02 9b       	mov	r11,r1
80006f2c:	08 9c       	mov	r12,r4
80006f2e:	fe b0 f4 3d 	rcall	800057a8 <__sprint_r>
80006f32:	e0 81 03 c8 	brne	800076c2 <_vfprintf_r+0x1efe>
80006f36:	fa c3 f9 e0 	sub	r3,sp,-1568
80006f3a:	40 fc       	lddsp	r12,sp[0x3c]
80006f3c:	58 0c       	cp.w	r12,0
80006f3e:	c1 f0       	breq	80006f7c <_vfprintf_r+0x17b8>
80006f40:	fa f8 06 90 	ld.w	r8,sp[1680]
80006f44:	fa c9 f9 48 	sub	r9,sp,-1720
80006f48:	2f e8       	sub	r8,-2
80006f4a:	87 09       	st.w	r3[0x0],r9
80006f4c:	fb 48 06 90 	st.w	sp[1680],r8
80006f50:	30 29       	mov	r9,2
80006f52:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006f56:	87 19       	st.w	r3[0x4],r9
80006f58:	2f f8       	sub	r8,-1
80006f5a:	fb 48 06 8c 	st.w	sp[1676],r8
80006f5e:	58 78       	cp.w	r8,7
80006f60:	e0 89 00 04 	brgt	80006f68 <_vfprintf_r+0x17a4>
80006f64:	2f 83       	sub	r3,-8
80006f66:	c0 b8       	rjmp	80006f7c <_vfprintf_r+0x17b8>
80006f68:	fa ca f9 78 	sub	r10,sp,-1672
80006f6c:	02 9b       	mov	r11,r1
80006f6e:	08 9c       	mov	r12,r4
80006f70:	fe b0 f4 1c 	rcall	800057a8 <__sprint_r>
80006f74:	e0 81 03 a7 	brne	800076c2 <_vfprintf_r+0x1efe>
80006f78:	fa c3 f9 e0 	sub	r3,sp,-1568
80006f7c:	40 9b       	lddsp	r11,sp[0x24]
80006f7e:	e0 4b 00 80 	cp.w	r11,128
80006f82:	c4 71       	brne	80007010 <_vfprintf_r+0x184c>
80006f84:	40 8a       	lddsp	r10,sp[0x20]
80006f86:	40 39       	lddsp	r9,sp[0xc]
80006f88:	12 1a       	sub	r10,r9
80006f8a:	50 4a       	stdsp	sp[0x10],r10
80006f8c:	58 0a       	cp.w	r10,0
80006f8e:	e0 89 00 20 	brgt	80006fce <_vfprintf_r+0x180a>
80006f92:	c3 f8       	rjmp	80007010 <_vfprintf_r+0x184c>
80006f94:	2f 09       	sub	r9,-16
80006f96:	2f f8       	sub	r8,-1
80006f98:	fe ce c9 e8 	sub	lr,pc,-13848
80006f9c:	31 0c       	mov	r12,16
80006f9e:	fb 49 06 90 	st.w	sp[1680],r9
80006fa2:	87 0e       	st.w	r3[0x0],lr
80006fa4:	87 1c       	st.w	r3[0x4],r12
80006fa6:	fb 48 06 8c 	st.w	sp[1676],r8
80006faa:	58 78       	cp.w	r8,7
80006fac:	e0 89 00 04 	brgt	80006fb4 <_vfprintf_r+0x17f0>
80006fb0:	2f 83       	sub	r3,-8
80006fb2:	c0 b8       	rjmp	80006fc8 <_vfprintf_r+0x1804>
80006fb4:	fa ca f9 78 	sub	r10,sp,-1672
80006fb8:	02 9b       	mov	r11,r1
80006fba:	08 9c       	mov	r12,r4
80006fbc:	fe b0 f3 f6 	rcall	800057a8 <__sprint_r>
80006fc0:	e0 81 03 81 	brne	800076c2 <_vfprintf_r+0x1efe>
80006fc4:	fa c3 f9 e0 	sub	r3,sp,-1568
80006fc8:	40 4b       	lddsp	r11,sp[0x10]
80006fca:	21 0b       	sub	r11,16
80006fcc:	50 4b       	stdsp	sp[0x10],r11
80006fce:	fa f9 06 90 	ld.w	r9,sp[1680]
80006fd2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006fd6:	fe ca ca 26 	sub	r10,pc,-13786
80006fda:	40 4e       	lddsp	lr,sp[0x10]
80006fdc:	59 0e       	cp.w	lr,16
80006fde:	fe 99 ff db 	brgt	80006f94 <_vfprintf_r+0x17d0>
80006fe2:	1c 09       	add	r9,lr
80006fe4:	2f f8       	sub	r8,-1
80006fe6:	87 0a       	st.w	r3[0x0],r10
80006fe8:	fb 49 06 90 	st.w	sp[1680],r9
80006fec:	87 1e       	st.w	r3[0x4],lr
80006fee:	fb 48 06 8c 	st.w	sp[1676],r8
80006ff2:	58 78       	cp.w	r8,7
80006ff4:	e0 89 00 04 	brgt	80006ffc <_vfprintf_r+0x1838>
80006ff8:	2f 83       	sub	r3,-8
80006ffa:	c0 b8       	rjmp	80007010 <_vfprintf_r+0x184c>
80006ffc:	fa ca f9 78 	sub	r10,sp,-1672
80007000:	02 9b       	mov	r11,r1
80007002:	08 9c       	mov	r12,r4
80007004:	fe b0 f3 d2 	rcall	800057a8 <__sprint_r>
80007008:	e0 81 03 5d 	brne	800076c2 <_vfprintf_r+0x1efe>
8000700c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007010:	40 2c       	lddsp	r12,sp[0x8]
80007012:	04 1c       	sub	r12,r2
80007014:	50 2c       	stdsp	sp[0x8],r12
80007016:	58 0c       	cp.w	r12,0
80007018:	e0 89 00 20 	brgt	80007058 <_vfprintf_r+0x1894>
8000701c:	c3 f8       	rjmp	8000709a <_vfprintf_r+0x18d6>
8000701e:	2f 09       	sub	r9,-16
80007020:	2f f8       	sub	r8,-1
80007022:	fe cb ca 72 	sub	r11,pc,-13710
80007026:	31 0a       	mov	r10,16
80007028:	fb 49 06 90 	st.w	sp[1680],r9
8000702c:	87 0b       	st.w	r3[0x0],r11
8000702e:	87 1a       	st.w	r3[0x4],r10
80007030:	fb 48 06 8c 	st.w	sp[1676],r8
80007034:	58 78       	cp.w	r8,7
80007036:	e0 89 00 04 	brgt	8000703e <_vfprintf_r+0x187a>
8000703a:	2f 83       	sub	r3,-8
8000703c:	c0 b8       	rjmp	80007052 <_vfprintf_r+0x188e>
8000703e:	fa ca f9 78 	sub	r10,sp,-1672
80007042:	02 9b       	mov	r11,r1
80007044:	08 9c       	mov	r12,r4
80007046:	fe b0 f3 b1 	rcall	800057a8 <__sprint_r>
8000704a:	e0 81 03 3c 	brne	800076c2 <_vfprintf_r+0x1efe>
8000704e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007052:	40 29       	lddsp	r9,sp[0x8]
80007054:	21 09       	sub	r9,16
80007056:	50 29       	stdsp	sp[0x8],r9
80007058:	fa f9 06 90 	ld.w	r9,sp[1680]
8000705c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007060:	fe ca ca b0 	sub	r10,pc,-13648
80007064:	40 2e       	lddsp	lr,sp[0x8]
80007066:	59 0e       	cp.w	lr,16
80007068:	fe 99 ff db 	brgt	8000701e <_vfprintf_r+0x185a>
8000706c:	1c 09       	add	r9,lr
8000706e:	2f f8       	sub	r8,-1
80007070:	87 0a       	st.w	r3[0x0],r10
80007072:	fb 49 06 90 	st.w	sp[1680],r9
80007076:	87 1e       	st.w	r3[0x4],lr
80007078:	fb 48 06 8c 	st.w	sp[1676],r8
8000707c:	58 78       	cp.w	r8,7
8000707e:	e0 89 00 04 	brgt	80007086 <_vfprintf_r+0x18c2>
80007082:	2f 83       	sub	r3,-8
80007084:	c0 b8       	rjmp	8000709a <_vfprintf_r+0x18d6>
80007086:	fa ca f9 78 	sub	r10,sp,-1672
8000708a:	02 9b       	mov	r11,r1
8000708c:	08 9c       	mov	r12,r4
8000708e:	fe b0 f3 8d 	rcall	800057a8 <__sprint_r>
80007092:	e0 81 03 18 	brne	800076c2 <_vfprintf_r+0x1efe>
80007096:	fa c3 f9 e0 	sub	r3,sp,-1568
8000709a:	ed b5 00 08 	bld	r5,0x8
8000709e:	c0 b0       	breq	800070b4 <_vfprintf_r+0x18f0>
800070a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800070a4:	87 12       	st.w	r3[0x4],r2
800070a6:	87 06       	st.w	r3[0x0],r6
800070a8:	f0 02 00 02 	add	r2,r8,r2
800070ac:	fb 42 06 90 	st.w	sp[1680],r2
800070b0:	e0 8f 01 d4 	bral	80007458 <_vfprintf_r+0x1c94>
800070b4:	e0 40 00 65 	cp.w	r0,101
800070b8:	e0 8a 01 d6 	brle	80007464 <_vfprintf_r+0x1ca0>
800070bc:	30 08       	mov	r8,0
800070be:	30 09       	mov	r9,0
800070c0:	40 5b       	lddsp	r11,sp[0x14]
800070c2:	40 7a       	lddsp	r10,sp[0x1c]
800070c4:	e0 a0 13 28 	rcall	80009714 <__avr32_f64_cmp_eq>
800070c8:	c7 90       	breq	800071ba <_vfprintf_r+0x19f6>
800070ca:	fa f8 06 90 	ld.w	r8,sp[1680]
800070ce:	fe c9 ce 16 	sub	r9,pc,-12778
800070d2:	2f f8       	sub	r8,-1
800070d4:	87 09       	st.w	r3[0x0],r9
800070d6:	fb 48 06 90 	st.w	sp[1680],r8
800070da:	30 19       	mov	r9,1
800070dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070e0:	87 19       	st.w	r3[0x4],r9
800070e2:	2f f8       	sub	r8,-1
800070e4:	fb 48 06 8c 	st.w	sp[1676],r8
800070e8:	58 78       	cp.w	r8,7
800070ea:	e0 89 00 05 	brgt	800070f4 <_vfprintf_r+0x1930>
800070ee:	2f 83       	sub	r3,-8
800070f0:	c0 c8       	rjmp	80007108 <_vfprintf_r+0x1944>
800070f2:	d7 03       	nop
800070f4:	fa ca f9 78 	sub	r10,sp,-1672
800070f8:	02 9b       	mov	r11,r1
800070fa:	08 9c       	mov	r12,r4
800070fc:	fe b0 f3 56 	rcall	800057a8 <__sprint_r>
80007100:	e0 81 02 e1 	brne	800076c2 <_vfprintf_r+0x1efe>
80007104:	fa c3 f9 e0 	sub	r3,sp,-1568
80007108:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000710c:	40 6c       	lddsp	r12,sp[0x18]
8000710e:	18 38       	cp.w	r8,r12
80007110:	c0 55       	brlt	8000711a <_vfprintf_r+0x1956>
80007112:	ed b5 00 00 	bld	r5,0x0
80007116:	e0 81 02 6b 	brne	800075ec <_vfprintf_r+0x1e28>
8000711a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000711e:	2f f8       	sub	r8,-1
80007120:	40 cb       	lddsp	r11,sp[0x30]
80007122:	fb 48 06 90 	st.w	sp[1680],r8
80007126:	30 19       	mov	r9,1
80007128:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000712c:	87 0b       	st.w	r3[0x0],r11
8000712e:	2f f8       	sub	r8,-1
80007130:	87 19       	st.w	r3[0x4],r9
80007132:	fb 48 06 8c 	st.w	sp[1676],r8
80007136:	58 78       	cp.w	r8,7
80007138:	e0 89 00 04 	brgt	80007140 <_vfprintf_r+0x197c>
8000713c:	2f 83       	sub	r3,-8
8000713e:	c0 b8       	rjmp	80007154 <_vfprintf_r+0x1990>
80007140:	fa ca f9 78 	sub	r10,sp,-1672
80007144:	02 9b       	mov	r11,r1
80007146:	08 9c       	mov	r12,r4
80007148:	fe b0 f3 30 	rcall	800057a8 <__sprint_r>
8000714c:	e0 81 02 bb 	brne	800076c2 <_vfprintf_r+0x1efe>
80007150:	fa c3 f9 e0 	sub	r3,sp,-1568
80007154:	40 66       	lddsp	r6,sp[0x18]
80007156:	20 16       	sub	r6,1
80007158:	58 06       	cp.w	r6,0
8000715a:	e0 89 00 1d 	brgt	80007194 <_vfprintf_r+0x19d0>
8000715e:	e0 8f 02 47 	bral	800075ec <_vfprintf_r+0x1e28>
80007162:	2f 09       	sub	r9,-16
80007164:	2f f8       	sub	r8,-1
80007166:	fb 49 06 90 	st.w	sp[1680],r9
8000716a:	87 02       	st.w	r3[0x0],r2
8000716c:	87 10       	st.w	r3[0x4],r0
8000716e:	fb 48 06 8c 	st.w	sp[1676],r8
80007172:	58 78       	cp.w	r8,7
80007174:	e0 89 00 04 	brgt	8000717c <_vfprintf_r+0x19b8>
80007178:	2f 83       	sub	r3,-8
8000717a:	c0 b8       	rjmp	80007190 <_vfprintf_r+0x19cc>
8000717c:	fa ca f9 78 	sub	r10,sp,-1672
80007180:	02 9b       	mov	r11,r1
80007182:	08 9c       	mov	r12,r4
80007184:	fe b0 f3 12 	rcall	800057a8 <__sprint_r>
80007188:	e0 81 02 9d 	brne	800076c2 <_vfprintf_r+0x1efe>
8000718c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007190:	21 06       	sub	r6,16
80007192:	c0 48       	rjmp	8000719a <_vfprintf_r+0x19d6>
80007194:	fe c2 cb e4 	sub	r2,pc,-13340
80007198:	31 00       	mov	r0,16
8000719a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000719e:	fa f8 06 8c 	ld.w	r8,sp[1676]
800071a2:	fe ca cb f2 	sub	r10,pc,-13326
800071a6:	59 06       	cp.w	r6,16
800071a8:	fe 99 ff dd 	brgt	80007162 <_vfprintf_r+0x199e>
800071ac:	0c 09       	add	r9,r6
800071ae:	87 0a       	st.w	r3[0x0],r10
800071b0:	fb 49 06 90 	st.w	sp[1680],r9
800071b4:	2f f8       	sub	r8,-1
800071b6:	87 16       	st.w	r3[0x4],r6
800071b8:	c5 39       	rjmp	8000745e <_vfprintf_r+0x1c9a>
800071ba:	fa fa 06 ac 	ld.w	r10,sp[1708]
800071be:	58 0a       	cp.w	r10,0
800071c0:	e0 89 00 92 	brgt	800072e4 <_vfprintf_r+0x1b20>
800071c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800071c8:	fe c9 cf 10 	sub	r9,pc,-12528
800071cc:	2f f8       	sub	r8,-1
800071ce:	87 09       	st.w	r3[0x0],r9
800071d0:	fb 48 06 90 	st.w	sp[1680],r8
800071d4:	30 19       	mov	r9,1
800071d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800071da:	87 19       	st.w	r3[0x4],r9
800071dc:	2f f8       	sub	r8,-1
800071de:	fb 48 06 8c 	st.w	sp[1676],r8
800071e2:	58 78       	cp.w	r8,7
800071e4:	e0 89 00 04 	brgt	800071ec <_vfprintf_r+0x1a28>
800071e8:	2f 83       	sub	r3,-8
800071ea:	c0 b8       	rjmp	80007200 <_vfprintf_r+0x1a3c>
800071ec:	fa ca f9 78 	sub	r10,sp,-1672
800071f0:	02 9b       	mov	r11,r1
800071f2:	08 9c       	mov	r12,r4
800071f4:	fe b0 f2 da 	rcall	800057a8 <__sprint_r>
800071f8:	e0 81 02 65 	brne	800076c2 <_vfprintf_r+0x1efe>
800071fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80007200:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007204:	58 08       	cp.w	r8,0
80007206:	c0 81       	brne	80007216 <_vfprintf_r+0x1a52>
80007208:	40 6a       	lddsp	r10,sp[0x18]
8000720a:	58 0a       	cp.w	r10,0
8000720c:	c0 51       	brne	80007216 <_vfprintf_r+0x1a52>
8000720e:	ed b5 00 00 	bld	r5,0x0
80007212:	e0 81 01 ed 	brne	800075ec <_vfprintf_r+0x1e28>
80007216:	40 c9       	lddsp	r9,sp[0x30]
80007218:	fa f8 06 90 	ld.w	r8,sp[1680]
8000721c:	2f f8       	sub	r8,-1
8000721e:	87 09       	st.w	r3[0x0],r9
80007220:	fb 48 06 90 	st.w	sp[1680],r8
80007224:	30 19       	mov	r9,1
80007226:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000722a:	87 19       	st.w	r3[0x4],r9
8000722c:	2f f8       	sub	r8,-1
8000722e:	fb 48 06 8c 	st.w	sp[1676],r8
80007232:	58 78       	cp.w	r8,7
80007234:	e0 89 00 04 	brgt	8000723c <_vfprintf_r+0x1a78>
80007238:	2f 83       	sub	r3,-8
8000723a:	c0 b8       	rjmp	80007250 <_vfprintf_r+0x1a8c>
8000723c:	fa ca f9 78 	sub	r10,sp,-1672
80007240:	02 9b       	mov	r11,r1
80007242:	08 9c       	mov	r12,r4
80007244:	fe b0 f2 b2 	rcall	800057a8 <__sprint_r>
80007248:	e0 81 02 3d 	brne	800076c2 <_vfprintf_r+0x1efe>
8000724c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007250:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007254:	5c 32       	neg	r2
80007256:	58 02       	cp.w	r2,0
80007258:	e0 89 00 1d 	brgt	80007292 <_vfprintf_r+0x1ace>
8000725c:	c3 d8       	rjmp	800072d6 <_vfprintf_r+0x1b12>
8000725e:	2f 09       	sub	r9,-16
80007260:	2f f8       	sub	r8,-1
80007262:	31 0e       	mov	lr,16
80007264:	fb 49 06 90 	st.w	sp[1680],r9
80007268:	87 00       	st.w	r3[0x0],r0
8000726a:	87 1e       	st.w	r3[0x4],lr
8000726c:	fb 48 06 8c 	st.w	sp[1676],r8
80007270:	58 78       	cp.w	r8,7
80007272:	e0 89 00 04 	brgt	8000727a <_vfprintf_r+0x1ab6>
80007276:	2f 83       	sub	r3,-8
80007278:	c0 b8       	rjmp	8000728e <_vfprintf_r+0x1aca>
8000727a:	fa ca f9 78 	sub	r10,sp,-1672
8000727e:	02 9b       	mov	r11,r1
80007280:	08 9c       	mov	r12,r4
80007282:	fe b0 f2 93 	rcall	800057a8 <__sprint_r>
80007286:	e0 81 02 1e 	brne	800076c2 <_vfprintf_r+0x1efe>
8000728a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000728e:	21 02       	sub	r2,16
80007290:	c0 38       	rjmp	80007296 <_vfprintf_r+0x1ad2>
80007292:	fe c0 cc e2 	sub	r0,pc,-13086
80007296:	fa f9 06 90 	ld.w	r9,sp[1680]
8000729a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000729e:	fe ca cc ee 	sub	r10,pc,-13074
800072a2:	59 02       	cp.w	r2,16
800072a4:	fe 99 ff dd 	brgt	8000725e <_vfprintf_r+0x1a9a>
800072a8:	04 09       	add	r9,r2
800072aa:	2f f8       	sub	r8,-1
800072ac:	87 0a       	st.w	r3[0x0],r10
800072ae:	fb 49 06 90 	st.w	sp[1680],r9
800072b2:	87 12       	st.w	r3[0x4],r2
800072b4:	fb 48 06 8c 	st.w	sp[1676],r8
800072b8:	58 78       	cp.w	r8,7
800072ba:	e0 89 00 04 	brgt	800072c2 <_vfprintf_r+0x1afe>
800072be:	2f 83       	sub	r3,-8
800072c0:	c0 b8       	rjmp	800072d6 <_vfprintf_r+0x1b12>
800072c2:	fa ca f9 78 	sub	r10,sp,-1672
800072c6:	02 9b       	mov	r11,r1
800072c8:	08 9c       	mov	r12,r4
800072ca:	fe b0 f2 6f 	rcall	800057a8 <__sprint_r>
800072ce:	e0 81 01 fa 	brne	800076c2 <_vfprintf_r+0x1efe>
800072d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800072d6:	40 6c       	lddsp	r12,sp[0x18]
800072d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800072dc:	87 06       	st.w	r3[0x0],r6
800072de:	87 1c       	st.w	r3[0x4],r12
800072e0:	18 08       	add	r8,r12
800072e2:	cb 98       	rjmp	80007454 <_vfprintf_r+0x1c90>
800072e4:	fa f9 06 90 	ld.w	r9,sp[1680]
800072e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800072ec:	40 6b       	lddsp	r11,sp[0x18]
800072ee:	16 3a       	cp.w	r10,r11
800072f0:	c6 f5       	brlt	800073ce <_vfprintf_r+0x1c0a>
800072f2:	16 09       	add	r9,r11
800072f4:	2f f8       	sub	r8,-1
800072f6:	87 06       	st.w	r3[0x0],r6
800072f8:	fb 49 06 90 	st.w	sp[1680],r9
800072fc:	87 1b       	st.w	r3[0x4],r11
800072fe:	fb 48 06 8c 	st.w	sp[1676],r8
80007302:	58 78       	cp.w	r8,7
80007304:	e0 89 00 04 	brgt	8000730c <_vfprintf_r+0x1b48>
80007308:	2f 83       	sub	r3,-8
8000730a:	c0 b8       	rjmp	80007320 <_vfprintf_r+0x1b5c>
8000730c:	fa ca f9 78 	sub	r10,sp,-1672
80007310:	02 9b       	mov	r11,r1
80007312:	08 9c       	mov	r12,r4
80007314:	fe b0 f2 4a 	rcall	800057a8 <__sprint_r>
80007318:	e0 81 01 d5 	brne	800076c2 <_vfprintf_r+0x1efe>
8000731c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007320:	fa f6 06 ac 	ld.w	r6,sp[1708]
80007324:	40 6a       	lddsp	r10,sp[0x18]
80007326:	14 16       	sub	r6,r10
80007328:	58 06       	cp.w	r6,0
8000732a:	e0 89 00 1c 	brgt	80007362 <_vfprintf_r+0x1b9e>
8000732e:	c3 d8       	rjmp	800073a8 <_vfprintf_r+0x1be4>
80007330:	2f 09       	sub	r9,-16
80007332:	2f f8       	sub	r8,-1
80007334:	fb 49 06 90 	st.w	sp[1680],r9
80007338:	87 02       	st.w	r3[0x0],r2
8000733a:	87 10       	st.w	r3[0x4],r0
8000733c:	fb 48 06 8c 	st.w	sp[1676],r8
80007340:	58 78       	cp.w	r8,7
80007342:	e0 89 00 04 	brgt	8000734a <_vfprintf_r+0x1b86>
80007346:	2f 83       	sub	r3,-8
80007348:	c0 b8       	rjmp	8000735e <_vfprintf_r+0x1b9a>
8000734a:	fa ca f9 78 	sub	r10,sp,-1672
8000734e:	02 9b       	mov	r11,r1
80007350:	08 9c       	mov	r12,r4
80007352:	fe b0 f2 2b 	rcall	800057a8 <__sprint_r>
80007356:	e0 81 01 b6 	brne	800076c2 <_vfprintf_r+0x1efe>
8000735a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000735e:	21 06       	sub	r6,16
80007360:	c0 48       	rjmp	80007368 <_vfprintf_r+0x1ba4>
80007362:	fe c2 cd b2 	sub	r2,pc,-12878
80007366:	31 00       	mov	r0,16
80007368:	fa f9 06 90 	ld.w	r9,sp[1680]
8000736c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007370:	fe ca cd c0 	sub	r10,pc,-12864
80007374:	59 06       	cp.w	r6,16
80007376:	fe 99 ff dd 	brgt	80007330 <_vfprintf_r+0x1b6c>
8000737a:	0c 09       	add	r9,r6
8000737c:	2f f8       	sub	r8,-1
8000737e:	87 0a       	st.w	r3[0x0],r10
80007380:	fb 49 06 90 	st.w	sp[1680],r9
80007384:	87 16       	st.w	r3[0x4],r6
80007386:	fb 48 06 8c 	st.w	sp[1676],r8
8000738a:	58 78       	cp.w	r8,7
8000738c:	e0 89 00 04 	brgt	80007394 <_vfprintf_r+0x1bd0>
80007390:	2f 83       	sub	r3,-8
80007392:	c0 b8       	rjmp	800073a8 <_vfprintf_r+0x1be4>
80007394:	fa ca f9 78 	sub	r10,sp,-1672
80007398:	02 9b       	mov	r11,r1
8000739a:	08 9c       	mov	r12,r4
8000739c:	fe b0 f2 06 	rcall	800057a8 <__sprint_r>
800073a0:	e0 81 01 91 	brne	800076c2 <_vfprintf_r+0x1efe>
800073a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800073a8:	ed b5 00 00 	bld	r5,0x0
800073ac:	e0 81 01 20 	brne	800075ec <_vfprintf_r+0x1e28>
800073b0:	40 c9       	lddsp	r9,sp[0x30]
800073b2:	fa f8 06 90 	ld.w	r8,sp[1680]
800073b6:	2f f8       	sub	r8,-1
800073b8:	87 09       	st.w	r3[0x0],r9
800073ba:	fb 48 06 90 	st.w	sp[1680],r8
800073be:	30 19       	mov	r9,1
800073c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073c4:	87 19       	st.w	r3[0x4],r9
800073c6:	2f f8       	sub	r8,-1
800073c8:	fb 48 06 8c 	st.w	sp[1676],r8
800073cc:	c0 29       	rjmp	800075d0 <_vfprintf_r+0x1e0c>
800073ce:	14 09       	add	r9,r10
800073d0:	2f f8       	sub	r8,-1
800073d2:	fb 49 06 90 	st.w	sp[1680],r9
800073d6:	87 06       	st.w	r3[0x0],r6
800073d8:	87 1a       	st.w	r3[0x4],r10
800073da:	fb 48 06 8c 	st.w	sp[1676],r8
800073de:	58 78       	cp.w	r8,7
800073e0:	e0 89 00 04 	brgt	800073e8 <_vfprintf_r+0x1c24>
800073e4:	2f 83       	sub	r3,-8
800073e6:	c0 b8       	rjmp	800073fc <_vfprintf_r+0x1c38>
800073e8:	fa ca f9 78 	sub	r10,sp,-1672
800073ec:	02 9b       	mov	r11,r1
800073ee:	08 9c       	mov	r12,r4
800073f0:	fe b0 f1 dc 	rcall	800057a8 <__sprint_r>
800073f4:	e0 81 01 67 	brne	800076c2 <_vfprintf_r+0x1efe>
800073f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800073fc:	40 c8       	lddsp	r8,sp[0x30]
800073fe:	87 08       	st.w	r3[0x0],r8
80007400:	fa f8 06 90 	ld.w	r8,sp[1680]
80007404:	2f f8       	sub	r8,-1
80007406:	30 19       	mov	r9,1
80007408:	fb 48 06 90 	st.w	sp[1680],r8
8000740c:	87 19       	st.w	r3[0x4],r9
8000740e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007412:	2f f8       	sub	r8,-1
80007414:	fb 48 06 8c 	st.w	sp[1676],r8
80007418:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000741c:	58 78       	cp.w	r8,7
8000741e:	e0 89 00 04 	brgt	80007426 <_vfprintf_r+0x1c62>
80007422:	2f 83       	sub	r3,-8
80007424:	c0 b8       	rjmp	8000743a <_vfprintf_r+0x1c76>
80007426:	fa ca f9 78 	sub	r10,sp,-1672
8000742a:	02 9b       	mov	r11,r1
8000742c:	08 9c       	mov	r12,r4
8000742e:	fe b0 f1 bd 	rcall	800057a8 <__sprint_r>
80007432:	e0 81 01 48 	brne	800076c2 <_vfprintf_r+0x1efe>
80007436:	fa c3 f9 e0 	sub	r3,sp,-1568
8000743a:	04 06       	add	r6,r2
8000743c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007440:	87 06       	st.w	r3[0x0],r6
80007442:	fa f9 06 90 	ld.w	r9,sp[1680]
80007446:	40 66       	lddsp	r6,sp[0x18]
80007448:	40 6e       	lddsp	lr,sp[0x18]
8000744a:	10 16       	sub	r6,r8
8000744c:	f2 08 01 08 	sub	r8,r9,r8
80007450:	87 16       	st.w	r3[0x4],r6
80007452:	1c 08       	add	r8,lr
80007454:	fb 48 06 90 	st.w	sp[1680],r8
80007458:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000745c:	2f f8       	sub	r8,-1
8000745e:	fb 48 06 8c 	st.w	sp[1676],r8
80007462:	cb 78       	rjmp	800075d0 <_vfprintf_r+0x1e0c>
80007464:	40 6c       	lddsp	r12,sp[0x18]
80007466:	58 1c       	cp.w	r12,1
80007468:	e0 89 00 06 	brgt	80007474 <_vfprintf_r+0x1cb0>
8000746c:	ed b5 00 00 	bld	r5,0x0
80007470:	e0 81 00 85 	brne	8000757a <_vfprintf_r+0x1db6>
80007474:	fa f8 06 90 	ld.w	r8,sp[1680]
80007478:	2f f8       	sub	r8,-1
8000747a:	30 19       	mov	r9,1
8000747c:	fb 48 06 90 	st.w	sp[1680],r8
80007480:	87 06       	st.w	r3[0x0],r6
80007482:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007486:	87 19       	st.w	r3[0x4],r9
80007488:	2f f8       	sub	r8,-1
8000748a:	fb 48 06 8c 	st.w	sp[1676],r8
8000748e:	58 78       	cp.w	r8,7
80007490:	e0 89 00 04 	brgt	80007498 <_vfprintf_r+0x1cd4>
80007494:	2f 83       	sub	r3,-8
80007496:	c0 b8       	rjmp	800074ac <_vfprintf_r+0x1ce8>
80007498:	fa ca f9 78 	sub	r10,sp,-1672
8000749c:	02 9b       	mov	r11,r1
8000749e:	08 9c       	mov	r12,r4
800074a0:	fe b0 f1 84 	rcall	800057a8 <__sprint_r>
800074a4:	e0 81 01 0f 	brne	800076c2 <_vfprintf_r+0x1efe>
800074a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800074ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800074b0:	2f f8       	sub	r8,-1
800074b2:	40 cb       	lddsp	r11,sp[0x30]
800074b4:	fb 48 06 90 	st.w	sp[1680],r8
800074b8:	30 19       	mov	r9,1
800074ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800074be:	87 0b       	st.w	r3[0x0],r11
800074c0:	2f f8       	sub	r8,-1
800074c2:	87 19       	st.w	r3[0x4],r9
800074c4:	fb 48 06 8c 	st.w	sp[1676],r8
800074c8:	58 78       	cp.w	r8,7
800074ca:	e0 89 00 05 	brgt	800074d4 <_vfprintf_r+0x1d10>
800074ce:	2f 83       	sub	r3,-8
800074d0:	c0 c8       	rjmp	800074e8 <_vfprintf_r+0x1d24>
800074d2:	d7 03       	nop
800074d4:	fa ca f9 78 	sub	r10,sp,-1672
800074d8:	02 9b       	mov	r11,r1
800074da:	08 9c       	mov	r12,r4
800074dc:	fe b0 f1 66 	rcall	800057a8 <__sprint_r>
800074e0:	e0 81 00 f1 	brne	800076c2 <_vfprintf_r+0x1efe>
800074e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800074e8:	30 08       	mov	r8,0
800074ea:	30 09       	mov	r9,0
800074ec:	40 5b       	lddsp	r11,sp[0x14]
800074ee:	40 7a       	lddsp	r10,sp[0x1c]
800074f0:	e0 a0 11 12 	rcall	80009714 <__avr32_f64_cmp_eq>
800074f4:	40 68       	lddsp	r8,sp[0x18]
800074f6:	20 18       	sub	r8,1
800074f8:	58 0c       	cp.w	r12,0
800074fa:	c0 d1       	brne	80007514 <_vfprintf_r+0x1d50>
800074fc:	2f f6       	sub	r6,-1
800074fe:	87 18       	st.w	r3[0x4],r8
80007500:	87 06       	st.w	r3[0x0],r6
80007502:	fa f6 06 90 	ld.w	r6,sp[1680]
80007506:	10 06       	add	r6,r8
80007508:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000750c:	fb 46 06 90 	st.w	sp[1680],r6
80007510:	2f f8       	sub	r8,-1
80007512:	c3 18       	rjmp	80007574 <_vfprintf_r+0x1db0>
80007514:	10 96       	mov	r6,r8
80007516:	58 08       	cp.w	r8,0
80007518:	e0 89 00 1c 	brgt	80007550 <_vfprintf_r+0x1d8c>
8000751c:	c4 b8       	rjmp	800075b2 <_vfprintf_r+0x1dee>
8000751e:	2f 09       	sub	r9,-16
80007520:	2f f8       	sub	r8,-1
80007522:	fb 49 06 90 	st.w	sp[1680],r9
80007526:	87 02       	st.w	r3[0x0],r2
80007528:	87 10       	st.w	r3[0x4],r0
8000752a:	fb 48 06 8c 	st.w	sp[1676],r8
8000752e:	58 78       	cp.w	r8,7
80007530:	e0 89 00 04 	brgt	80007538 <_vfprintf_r+0x1d74>
80007534:	2f 83       	sub	r3,-8
80007536:	c0 b8       	rjmp	8000754c <_vfprintf_r+0x1d88>
80007538:	fa ca f9 78 	sub	r10,sp,-1672
8000753c:	02 9b       	mov	r11,r1
8000753e:	08 9c       	mov	r12,r4
80007540:	fe b0 f1 34 	rcall	800057a8 <__sprint_r>
80007544:	e0 81 00 bf 	brne	800076c2 <_vfprintf_r+0x1efe>
80007548:	fa c3 f9 e0 	sub	r3,sp,-1568
8000754c:	21 06       	sub	r6,16
8000754e:	c0 48       	rjmp	80007556 <_vfprintf_r+0x1d92>
80007550:	fe c2 cf a0 	sub	r2,pc,-12384
80007554:	31 00       	mov	r0,16
80007556:	fa f9 06 90 	ld.w	r9,sp[1680]
8000755a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000755e:	fe ca cf ae 	sub	r10,pc,-12370
80007562:	59 06       	cp.w	r6,16
80007564:	fe 99 ff dd 	brgt	8000751e <_vfprintf_r+0x1d5a>
80007568:	0c 09       	add	r9,r6
8000756a:	87 0a       	st.w	r3[0x0],r10
8000756c:	fb 49 06 90 	st.w	sp[1680],r9
80007570:	2f f8       	sub	r8,-1
80007572:	87 16       	st.w	r3[0x4],r6
80007574:	fb 48 06 8c 	st.w	sp[1676],r8
80007578:	c0 e8       	rjmp	80007594 <_vfprintf_r+0x1dd0>
8000757a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000757e:	2f f8       	sub	r8,-1
80007580:	30 19       	mov	r9,1
80007582:	fb 48 06 90 	st.w	sp[1680],r8
80007586:	87 06       	st.w	r3[0x0],r6
80007588:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000758c:	87 19       	st.w	r3[0x4],r9
8000758e:	2f f8       	sub	r8,-1
80007590:	fb 48 06 8c 	st.w	sp[1676],r8
80007594:	58 78       	cp.w	r8,7
80007596:	e0 89 00 04 	brgt	8000759e <_vfprintf_r+0x1dda>
8000759a:	2f 83       	sub	r3,-8
8000759c:	c0 b8       	rjmp	800075b2 <_vfprintf_r+0x1dee>
8000759e:	fa ca f9 78 	sub	r10,sp,-1672
800075a2:	02 9b       	mov	r11,r1
800075a4:	08 9c       	mov	r12,r4
800075a6:	fe b0 f1 01 	rcall	800057a8 <__sprint_r>
800075aa:	e0 81 00 8c 	brne	800076c2 <_vfprintf_r+0x1efe>
800075ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800075b2:	40 ea       	lddsp	r10,sp[0x38]
800075b4:	fa f8 06 90 	ld.w	r8,sp[1680]
800075b8:	14 08       	add	r8,r10
800075ba:	fa c9 f9 64 	sub	r9,sp,-1692
800075be:	fb 48 06 90 	st.w	sp[1680],r8
800075c2:	87 1a       	st.w	r3[0x4],r10
800075c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075c8:	87 09       	st.w	r3[0x0],r9
800075ca:	2f f8       	sub	r8,-1
800075cc:	fb 48 06 8c 	st.w	sp[1676],r8
800075d0:	58 78       	cp.w	r8,7
800075d2:	e0 89 00 04 	brgt	800075da <_vfprintf_r+0x1e16>
800075d6:	2f 83       	sub	r3,-8
800075d8:	c0 a8       	rjmp	800075ec <_vfprintf_r+0x1e28>
800075da:	fa ca f9 78 	sub	r10,sp,-1672
800075de:	02 9b       	mov	r11,r1
800075e0:	08 9c       	mov	r12,r4
800075e2:	fe b0 f0 e3 	rcall	800057a8 <__sprint_r>
800075e6:	c6 e1       	brne	800076c2 <_vfprintf_r+0x1efe>
800075e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800075ec:	e2 15 00 04 	andl	r5,0x4,COH
800075f0:	c3 f0       	breq	8000766e <_vfprintf_r+0x1eaa>
800075f2:	40 86       	lddsp	r6,sp[0x20]
800075f4:	40 39       	lddsp	r9,sp[0xc]
800075f6:	12 16       	sub	r6,r9
800075f8:	58 06       	cp.w	r6,0
800075fa:	e0 89 00 1a 	brgt	8000762e <_vfprintf_r+0x1e6a>
800075fe:	c3 88       	rjmp	8000766e <_vfprintf_r+0x1eaa>
80007600:	2f 09       	sub	r9,-16
80007602:	2f f8       	sub	r8,-1
80007604:	fb 49 06 90 	st.w	sp[1680],r9
80007608:	87 05       	st.w	r3[0x0],r5
8000760a:	87 12       	st.w	r3[0x4],r2
8000760c:	fb 48 06 8c 	st.w	sp[1676],r8
80007610:	58 78       	cp.w	r8,7
80007612:	e0 89 00 04 	brgt	8000761a <_vfprintf_r+0x1e56>
80007616:	2f 83       	sub	r3,-8
80007618:	c0 98       	rjmp	8000762a <_vfprintf_r+0x1e66>
8000761a:	00 9a       	mov	r10,r0
8000761c:	02 9b       	mov	r11,r1
8000761e:	08 9c       	mov	r12,r4
80007620:	fe b0 f0 c4 	rcall	800057a8 <__sprint_r>
80007624:	c4 f1       	brne	800076c2 <_vfprintf_r+0x1efe>
80007626:	fa c3 f9 e0 	sub	r3,sp,-1568
8000762a:	21 06       	sub	r6,16
8000762c:	c0 68       	rjmp	80007638 <_vfprintf_r+0x1e74>
8000762e:	fe c5 d0 8e 	sub	r5,pc,-12146
80007632:	31 02       	mov	r2,16
80007634:	fa c0 f9 78 	sub	r0,sp,-1672
80007638:	fa f9 06 90 	ld.w	r9,sp[1680]
8000763c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007640:	fe ca d0 a0 	sub	r10,pc,-12128
80007644:	59 06       	cp.w	r6,16
80007646:	fe 99 ff dd 	brgt	80007600 <_vfprintf_r+0x1e3c>
8000764a:	0c 09       	add	r9,r6
8000764c:	2f f8       	sub	r8,-1
8000764e:	87 0a       	st.w	r3[0x0],r10
80007650:	87 16       	st.w	r3[0x4],r6
80007652:	fb 49 06 90 	st.w	sp[1680],r9
80007656:	fb 48 06 8c 	st.w	sp[1676],r8
8000765a:	58 78       	cp.w	r8,7
8000765c:	e0 8a 00 09 	brle	8000766e <_vfprintf_r+0x1eaa>
80007660:	fa ca f9 78 	sub	r10,sp,-1672
80007664:	02 9b       	mov	r11,r1
80007666:	08 9c       	mov	r12,r4
80007668:	fe b0 f0 a0 	rcall	800057a8 <__sprint_r>
8000766c:	c2 b1       	brne	800076c2 <_vfprintf_r+0x1efe>
8000766e:	40 bc       	lddsp	r12,sp[0x2c]
80007670:	40 36       	lddsp	r6,sp[0xc]
80007672:	40 8e       	lddsp	lr,sp[0x20]
80007674:	ec 0e 0c 48 	max	r8,r6,lr
80007678:	10 0c       	add	r12,r8
8000767a:	50 bc       	stdsp	sp[0x2c],r12
8000767c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007680:	58 08       	cp.w	r8,0
80007682:	c0 80       	breq	80007692 <_vfprintf_r+0x1ece>
80007684:	fa ca f9 78 	sub	r10,sp,-1672
80007688:	02 9b       	mov	r11,r1
8000768a:	08 9c       	mov	r12,r4
8000768c:	fe b0 f0 8e 	rcall	800057a8 <__sprint_r>
80007690:	c1 91       	brne	800076c2 <_vfprintf_r+0x1efe>
80007692:	30 0b       	mov	r11,0
80007694:	fa c3 f9 e0 	sub	r3,sp,-1568
80007698:	fb 4b 06 8c 	st.w	sp[1676],r11
8000769c:	fe 9f f1 22 	bral	800058e0 <_vfprintf_r+0x11c>
800076a0:	08 95       	mov	r5,r4
800076a2:	fa f8 06 90 	ld.w	r8,sp[1680]
800076a6:	58 08       	cp.w	r8,0
800076a8:	c0 80       	breq	800076b8 <_vfprintf_r+0x1ef4>
800076aa:	08 9c       	mov	r12,r4
800076ac:	fa ca f9 78 	sub	r10,sp,-1672
800076b0:	02 9b       	mov	r11,r1
800076b2:	fe b0 f0 7b 	rcall	800057a8 <__sprint_r>
800076b6:	c0 61       	brne	800076c2 <_vfprintf_r+0x1efe>
800076b8:	30 08       	mov	r8,0
800076ba:	fb 48 06 8c 	st.w	sp[1676],r8
800076be:	c0 28       	rjmp	800076c2 <_vfprintf_r+0x1efe>
800076c0:	40 41       	lddsp	r1,sp[0x10]
800076c2:	82 68       	ld.sh	r8,r1[0xc]
800076c4:	ed b8 00 06 	bld	r8,0x6
800076c8:	c0 31       	brne	800076ce <_vfprintf_r+0x1f0a>
800076ca:	3f fa       	mov	r10,-1
800076cc:	50 ba       	stdsp	sp[0x2c],r10
800076ce:	40 bc       	lddsp	r12,sp[0x2c]
800076d0:	fe 3d f9 44 	sub	sp,-1724
800076d4:	d8 32       	popm	r0-r7,pc
800076d6:	d7 03       	nop

800076d8 <__swsetup_r>:
800076d8:	d4 21       	pushm	r4-r7,lr
800076da:	e0 68 01 1c 	mov	r8,284
800076de:	18 96       	mov	r6,r12
800076e0:	16 97       	mov	r7,r11
800076e2:	70 0c       	ld.w	r12,r8[0x0]
800076e4:	58 0c       	cp.w	r12,0
800076e6:	c0 60       	breq	800076f2 <__swsetup_r+0x1a>
800076e8:	78 68       	ld.w	r8,r12[0x18]
800076ea:	58 08       	cp.w	r8,0
800076ec:	c0 31       	brne	800076f2 <__swsetup_r+0x1a>
800076ee:	e0 a0 08 77 	rcall	800087dc <__sinit>
800076f2:	fe c8 d0 22 	sub	r8,pc,-12254
800076f6:	10 37       	cp.w	r7,r8
800076f8:	c0 61       	brne	80007704 <__swsetup_r+0x2c>
800076fa:	e0 68 01 1c 	mov	r8,284
800076fe:	70 08       	ld.w	r8,r8[0x0]
80007700:	70 07       	ld.w	r7,r8[0x0]
80007702:	c1 28       	rjmp	80007726 <__swsetup_r+0x4e>
80007704:	fe c8 d0 14 	sub	r8,pc,-12268
80007708:	10 37       	cp.w	r7,r8
8000770a:	c0 61       	brne	80007716 <__swsetup_r+0x3e>
8000770c:	e0 68 01 1c 	mov	r8,284
80007710:	70 08       	ld.w	r8,r8[0x0]
80007712:	70 17       	ld.w	r7,r8[0x4]
80007714:	c0 98       	rjmp	80007726 <__swsetup_r+0x4e>
80007716:	fe c8 d0 06 	sub	r8,pc,-12282
8000771a:	10 37       	cp.w	r7,r8
8000771c:	c0 51       	brne	80007726 <__swsetup_r+0x4e>
8000771e:	e0 68 01 1c 	mov	r8,284
80007722:	70 08       	ld.w	r8,r8[0x0]
80007724:	70 27       	ld.w	r7,r8[0x8]
80007726:	8e 68       	ld.sh	r8,r7[0xc]
80007728:	ed b8 00 03 	bld	r8,0x3
8000772c:	c1 e0       	breq	80007768 <__swsetup_r+0x90>
8000772e:	ed b8 00 04 	bld	r8,0x4
80007732:	c3 e1       	brne	800077ae <__swsetup_r+0xd6>
80007734:	ed b8 00 02 	bld	r8,0x2
80007738:	c1 51       	brne	80007762 <__swsetup_r+0x8a>
8000773a:	6e db       	ld.w	r11,r7[0x34]
8000773c:	58 0b       	cp.w	r11,0
8000773e:	c0 a0       	breq	80007752 <__swsetup_r+0x7a>
80007740:	ee c8 ff bc 	sub	r8,r7,-68
80007744:	10 3b       	cp.w	r11,r8
80007746:	c0 40       	breq	8000774e <__swsetup_r+0x76>
80007748:	0c 9c       	mov	r12,r6
8000774a:	e0 a0 08 e3 	rcall	80008910 <_free_r>
8000774e:	30 08       	mov	r8,0
80007750:	8f d8       	st.w	r7[0x34],r8
80007752:	8e 68       	ld.sh	r8,r7[0xc]
80007754:	e0 18 ff db 	andl	r8,0xffdb
80007758:	ae 68       	st.h	r7[0xc],r8
8000775a:	30 08       	mov	r8,0
8000775c:	8f 18       	st.w	r7[0x4],r8
8000775e:	6e 48       	ld.w	r8,r7[0x10]
80007760:	8f 08       	st.w	r7[0x0],r8
80007762:	8e 68       	ld.sh	r8,r7[0xc]
80007764:	a3 b8       	sbr	r8,0x3
80007766:	ae 68       	st.h	r7[0xc],r8
80007768:	6e 48       	ld.w	r8,r7[0x10]
8000776a:	58 08       	cp.w	r8,0
8000776c:	c0 b1       	brne	80007782 <__swsetup_r+0xaa>
8000776e:	8e 68       	ld.sh	r8,r7[0xc]
80007770:	e2 18 02 80 	andl	r8,0x280,COH
80007774:	e0 48 02 00 	cp.w	r8,512
80007778:	c0 50       	breq	80007782 <__swsetup_r+0xaa>
8000777a:	0c 9c       	mov	r12,r6
8000777c:	0e 9b       	mov	r11,r7
8000777e:	e0 a0 0b 03 	rcall	80008d84 <__smakebuf_r>
80007782:	8e 69       	ld.sh	r9,r7[0xc]
80007784:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80007788:	c0 70       	breq	80007796 <__swsetup_r+0xbe>
8000778a:	30 08       	mov	r8,0
8000778c:	8f 28       	st.w	r7[0x8],r8
8000778e:	6e 58       	ld.w	r8,r7[0x14]
80007790:	5c 38       	neg	r8
80007792:	8f 68       	st.w	r7[0x18],r8
80007794:	c0 68       	rjmp	800077a0 <__swsetup_r+0xc8>
80007796:	ed b9 00 01 	bld	r9,0x1
8000779a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000779e:	8f 28       	st.w	r7[0x8],r8
800077a0:	6e 48       	ld.w	r8,r7[0x10]
800077a2:	58 08       	cp.w	r8,0
800077a4:	c0 61       	brne	800077b0 <__swsetup_r+0xd8>
800077a6:	8e 68       	ld.sh	r8,r7[0xc]
800077a8:	ed b8 00 07 	bld	r8,0x7
800077ac:	c0 21       	brne	800077b0 <__swsetup_r+0xd8>
800077ae:	dc 2a       	popm	r4-r7,pc,r12=-1
800077b0:	d8 2a       	popm	r4-r7,pc,r12=0
800077b2:	d7 03       	nop

800077b4 <__register_exitproc>:
800077b4:	d4 31       	pushm	r0-r7,lr
800077b6:	fe c8 d4 ca 	sub	r8,pc,-11062
800077ba:	70 03       	ld.w	r3,r8[0x0]
800077bc:	67 24       	ld.w	r4,r3[0x48]
800077be:	e6 c8 ff b4 	sub	r8,r3,-76
800077c2:	58 04       	cp.w	r4,0
800077c4:	f0 04 17 00 	moveq	r4,r8
800077c8:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800077cc:	18 97       	mov	r7,r12
800077ce:	16 96       	mov	r6,r11
800077d0:	14 95       	mov	r5,r10
800077d2:	12 92       	mov	r2,r9
800077d4:	68 18       	ld.w	r8,r4[0x4]
800077d6:	59 f8       	cp.w	r8,31
800077d8:	e0 8a 00 0e 	brle	800077f4 <__register_exitproc+0x40>
800077dc:	e0 6c 00 8c 	mov	r12,140
800077e0:	fe b0 e9 78 	rcall	80004ad0 <malloc>
800077e4:	18 94       	mov	r4,r12
800077e6:	c3 80       	breq	80007856 <__register_exitproc+0xa2>
800077e8:	67 28       	ld.w	r8,r3[0x48]
800077ea:	99 08       	st.w	r12[0x0],r8
800077ec:	e7 4c 00 48 	st.w	r3[72],r12
800077f0:	30 08       	mov	r8,0
800077f2:	99 18       	st.w	r12[0x4],r8
800077f4:	58 07       	cp.w	r7,0
800077f6:	c2 70       	breq	80007844 <__register_exitproc+0x90>
800077f8:	e8 fc 00 88 	ld.w	r12,r4[136]
800077fc:	58 0c       	cp.w	r12,0
800077fe:	c0 d1       	brne	80007818 <__register_exitproc+0x64>
80007800:	e0 6c 01 08 	mov	r12,264
80007804:	fe b0 e9 66 	rcall	80004ad0 <malloc>
80007808:	c2 70       	breq	80007856 <__register_exitproc+0xa2>
8000780a:	30 08       	mov	r8,0
8000780c:	e9 4c 00 88 	st.w	r4[136],r12
80007810:	f9 48 01 04 	st.w	r12[260],r8
80007814:	f9 48 01 00 	st.w	r12[256],r8
80007818:	68 18       	ld.w	r8,r4[0x4]
8000781a:	f0 c9 ff e0 	sub	r9,r8,-32
8000781e:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80007822:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80007826:	30 1a       	mov	r10,1
80007828:	f8 f9 01 00 	ld.w	r9,r12[256]
8000782c:	f4 08 09 48 	lsl	r8,r10,r8
80007830:	10 49       	or	r9,r8
80007832:	f9 49 01 00 	st.w	r12[256],r9
80007836:	58 27       	cp.w	r7,2
80007838:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000783c:	f3 d8 e0 38 	oreq	r8,r9,r8
80007840:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80007844:	68 18       	ld.w	r8,r4[0x4]
80007846:	30 0c       	mov	r12,0
80007848:	f0 c9 ff ff 	sub	r9,r8,-1
8000784c:	2f e8       	sub	r8,-2
8000784e:	89 19       	st.w	r4[0x4],r9
80007850:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80007854:	d8 32       	popm	r0-r7,pc
80007856:	dc 3a       	popm	r0-r7,pc,r12=-1

80007858 <__call_exitprocs>:
80007858:	d4 31       	pushm	r0-r7,lr
8000785a:	20 3d       	sub	sp,12
8000785c:	fe c8 d5 70 	sub	r8,pc,-10896
80007860:	50 2c       	stdsp	sp[0x8],r12
80007862:	70 08       	ld.w	r8,r8[0x0]
80007864:	16 91       	mov	r1,r11
80007866:	50 08       	stdsp	sp[0x0],r8
80007868:	2b 88       	sub	r8,-72
8000786a:	50 18       	stdsp	sp[0x4],r8
8000786c:	40 0a       	lddsp	r10,sp[0x0]
8000786e:	40 14       	lddsp	r4,sp[0x4]
80007870:	75 27       	ld.w	r7,r10[0x48]
80007872:	c5 58       	rjmp	8000791c <__call_exitprocs+0xc4>
80007874:	6e 15       	ld.w	r5,r7[0x4]
80007876:	ee f6 00 88 	ld.w	r6,r7[136]
8000787a:	ea c2 ff ff 	sub	r2,r5,-1
8000787e:	20 15       	sub	r5,1
80007880:	ee 02 00 22 	add	r2,r7,r2<<0x2
80007884:	ec 05 00 23 	add	r3,r6,r5<<0x2
80007888:	c3 58       	rjmp	800078f2 <__call_exitprocs+0x9a>
8000788a:	58 01       	cp.w	r1,0
8000788c:	c0 70       	breq	8000789a <__call_exitprocs+0x42>
8000788e:	58 06       	cp.w	r6,0
80007890:	c2 e0       	breq	800078ec <__call_exitprocs+0x94>
80007892:	e6 f8 00 80 	ld.w	r8,r3[128]
80007896:	02 38       	cp.w	r8,r1
80007898:	c2 a1       	brne	800078ec <__call_exitprocs+0x94>
8000789a:	6e 19       	ld.w	r9,r7[0x4]
8000789c:	64 08       	ld.w	r8,r2[0x0]
8000789e:	20 19       	sub	r9,1
800078a0:	12 35       	cp.w	r5,r9
800078a2:	ef f5 0a 01 	st.weq	r7[0x4],r5
800078a6:	f9 b9 01 00 	movne	r9,0
800078aa:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800078ae:	58 08       	cp.w	r8,0
800078b0:	c1 e0       	breq	800078ec <__call_exitprocs+0x94>
800078b2:	6e 10       	ld.w	r0,r7[0x4]
800078b4:	58 06       	cp.w	r6,0
800078b6:	c0 90       	breq	800078c8 <__call_exitprocs+0x70>
800078b8:	30 1a       	mov	r10,1
800078ba:	f4 05 09 49 	lsl	r9,r10,r5
800078be:	ec fa 01 00 	ld.w	r10,r6[256]
800078c2:	f3 ea 00 0a 	and	r10,r9,r10
800078c6:	c0 31       	brne	800078cc <__call_exitprocs+0x74>
800078c8:	5d 18       	icall	r8
800078ca:	c0 b8       	rjmp	800078e0 <__call_exitprocs+0x88>
800078cc:	ec fa 01 04 	ld.w	r10,r6[260]
800078d0:	66 0b       	ld.w	r11,r3[0x0]
800078d2:	14 69       	and	r9,r10
800078d4:	c0 41       	brne	800078dc <__call_exitprocs+0x84>
800078d6:	40 2c       	lddsp	r12,sp[0x8]
800078d8:	5d 18       	icall	r8
800078da:	c0 38       	rjmp	800078e0 <__call_exitprocs+0x88>
800078dc:	16 9c       	mov	r12,r11
800078de:	5d 18       	icall	r8
800078e0:	6e 18       	ld.w	r8,r7[0x4]
800078e2:	10 30       	cp.w	r0,r8
800078e4:	cc 41       	brne	8000786c <__call_exitprocs+0x14>
800078e6:	68 08       	ld.w	r8,r4[0x0]
800078e8:	0e 38       	cp.w	r8,r7
800078ea:	cc 11       	brne	8000786c <__call_exitprocs+0x14>
800078ec:	20 15       	sub	r5,1
800078ee:	20 43       	sub	r3,4
800078f0:	20 42       	sub	r2,4
800078f2:	58 05       	cp.w	r5,0
800078f4:	cc b4       	brge	8000788a <__call_exitprocs+0x32>
800078f6:	6e 18       	ld.w	r8,r7[0x4]
800078f8:	58 08       	cp.w	r8,0
800078fa:	c0 f1       	brne	80007918 <__call_exitprocs+0xc0>
800078fc:	6e 08       	ld.w	r8,r7[0x0]
800078fe:	58 08       	cp.w	r8,0
80007900:	c0 c0       	breq	80007918 <__call_exitprocs+0xc0>
80007902:	89 08       	st.w	r4[0x0],r8
80007904:	58 06       	cp.w	r6,0
80007906:	c0 40       	breq	8000790e <__call_exitprocs+0xb6>
80007908:	0c 9c       	mov	r12,r6
8000790a:	fe b0 e8 db 	rcall	80004ac0 <free>
8000790e:	0e 9c       	mov	r12,r7
80007910:	fe b0 e8 d8 	rcall	80004ac0 <free>
80007914:	68 07       	ld.w	r7,r4[0x0]
80007916:	c0 38       	rjmp	8000791c <__call_exitprocs+0xc4>
80007918:	0e 94       	mov	r4,r7
8000791a:	6e 07       	ld.w	r7,r7[0x0]
8000791c:	58 07       	cp.w	r7,0
8000791e:	ca b1       	brne	80007874 <__call_exitprocs+0x1c>
80007920:	2f dd       	sub	sp,-12
80007922:	d8 32       	popm	r0-r7,pc

80007924 <quorem>:
80007924:	d4 31       	pushm	r0-r7,lr
80007926:	20 2d       	sub	sp,8
80007928:	18 97       	mov	r7,r12
8000792a:	78 48       	ld.w	r8,r12[0x10]
8000792c:	76 46       	ld.w	r6,r11[0x10]
8000792e:	0c 38       	cp.w	r8,r6
80007930:	c0 34       	brge	80007936 <quorem+0x12>
80007932:	30 0c       	mov	r12,0
80007934:	c8 58       	rjmp	80007a3e <quorem+0x11a>
80007936:	ec c2 ff fc 	sub	r2,r6,-4
8000793a:	f6 c3 ff ec 	sub	r3,r11,-20
8000793e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007942:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80007946:	2f f9       	sub	r9,-1
80007948:	20 16       	sub	r6,1
8000794a:	f8 09 0d 08 	divu	r8,r12,r9
8000794e:	f6 02 00 22 	add	r2,r11,r2<<0x2
80007952:	ee c4 ff ec 	sub	r4,r7,-20
80007956:	10 95       	mov	r5,r8
80007958:	58 08       	cp.w	r8,0
8000795a:	c4 10       	breq	800079dc <quorem+0xb8>
8000795c:	30 09       	mov	r9,0
8000795e:	06 9a       	mov	r10,r3
80007960:	08 98       	mov	r8,r4
80007962:	12 91       	mov	r1,r9
80007964:	50 0b       	stdsp	sp[0x0],r11
80007966:	70 0e       	ld.w	lr,r8[0x0]
80007968:	b1 8e       	lsr	lr,0x10
8000796a:	50 1e       	stdsp	sp[0x4],lr
8000796c:	15 0e       	ld.w	lr,r10++
8000796e:	fc 00 16 10 	lsr	r0,lr,0x10
80007972:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007976:	ea 0e 03 41 	mac	r1,r5,lr
8000797a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000797e:	b1 81       	lsr	r1,0x10
80007980:	40 1b       	lddsp	r11,sp[0x4]
80007982:	ea 00 02 40 	mul	r0,r5,r0
80007986:	e2 00 00 00 	add	r0,r1,r0
8000798a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000798e:	02 1b       	sub	r11,r1
80007990:	50 1b       	stdsp	sp[0x4],r11
80007992:	70 0b       	ld.w	r11,r8[0x0]
80007994:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007998:	02 09       	add	r9,r1
8000799a:	f2 0e 01 0e 	sub	lr,r9,lr
8000799e:	b0 1e       	st.h	r8[0x2],lr
800079a0:	fc 09 14 10 	asr	r9,lr,0x10
800079a4:	40 1e       	lddsp	lr,sp[0x4]
800079a6:	fc 09 00 09 	add	r9,lr,r9
800079aa:	b0 09       	st.h	r8[0x0],r9
800079ac:	e0 01 16 10 	lsr	r1,r0,0x10
800079b0:	2f c8       	sub	r8,-4
800079b2:	b1 49       	asr	r9,0x10
800079b4:	04 3a       	cp.w	r10,r2
800079b6:	fe 98 ff d8 	brls	80007966 <quorem+0x42>
800079ba:	40 0b       	lddsp	r11,sp[0x0]
800079bc:	58 0c       	cp.w	r12,0
800079be:	c0 f1       	brne	800079dc <quorem+0xb8>
800079c0:	ec c8 ff fb 	sub	r8,r6,-5
800079c4:	ee 08 00 28 	add	r8,r7,r8<<0x2
800079c8:	c0 28       	rjmp	800079cc <quorem+0xa8>
800079ca:	20 16       	sub	r6,1
800079cc:	20 48       	sub	r8,4
800079ce:	08 38       	cp.w	r8,r4
800079d0:	e0 88 00 05 	brls	800079da <quorem+0xb6>
800079d4:	70 09       	ld.w	r9,r8[0x0]
800079d6:	58 09       	cp.w	r9,0
800079d8:	cf 90       	breq	800079ca <quorem+0xa6>
800079da:	8f 46       	st.w	r7[0x10],r6
800079dc:	0e 9c       	mov	r12,r7
800079de:	e0 a0 0a d2 	rcall	80008f82 <__mcmp>
800079e2:	c2 d5       	brlt	80007a3c <quorem+0x118>
800079e4:	2f f5       	sub	r5,-1
800079e6:	08 98       	mov	r8,r4
800079e8:	30 09       	mov	r9,0
800079ea:	07 0b       	ld.w	r11,r3++
800079ec:	f6 0a 16 10 	lsr	r10,r11,0x10
800079f0:	70 0c       	ld.w	r12,r8[0x0]
800079f2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800079f6:	f8 0e 16 10 	lsr	lr,r12,0x10
800079fa:	14 1e       	sub	lr,r10
800079fc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007a00:	16 1a       	sub	r10,r11
80007a02:	12 0a       	add	r10,r9
80007a04:	b0 1a       	st.h	r8[0x2],r10
80007a06:	b1 4a       	asr	r10,0x10
80007a08:	fc 0a 00 09 	add	r9,lr,r10
80007a0c:	b0 09       	st.h	r8[0x0],r9
80007a0e:	2f c8       	sub	r8,-4
80007a10:	b1 49       	asr	r9,0x10
80007a12:	04 33       	cp.w	r3,r2
80007a14:	fe 98 ff eb 	brls	800079ea <quorem+0xc6>
80007a18:	ec c8 ff fb 	sub	r8,r6,-5
80007a1c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007a20:	58 09       	cp.w	r9,0
80007a22:	c0 d1       	brne	80007a3c <quorem+0x118>
80007a24:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007a28:	c0 28       	rjmp	80007a2c <quorem+0x108>
80007a2a:	20 16       	sub	r6,1
80007a2c:	20 48       	sub	r8,4
80007a2e:	08 38       	cp.w	r8,r4
80007a30:	e0 88 00 05 	brls	80007a3a <quorem+0x116>
80007a34:	70 09       	ld.w	r9,r8[0x0]
80007a36:	58 09       	cp.w	r9,0
80007a38:	cf 90       	breq	80007a2a <quorem+0x106>
80007a3a:	8f 46       	st.w	r7[0x10],r6
80007a3c:	0a 9c       	mov	r12,r5
80007a3e:	2f ed       	sub	sp,-8
80007a40:	d8 32       	popm	r0-r7,pc
80007a42:	d7 03       	nop

80007a44 <_dtoa_r>:
80007a44:	d4 31       	pushm	r0-r7,lr
80007a46:	21 ad       	sub	sp,104
80007a48:	fa c4 ff 74 	sub	r4,sp,-140
80007a4c:	18 97       	mov	r7,r12
80007a4e:	16 95       	mov	r5,r11
80007a50:	68 2c       	ld.w	r12,r4[0x8]
80007a52:	50 c9       	stdsp	sp[0x30],r9
80007a54:	68 16       	ld.w	r6,r4[0x4]
80007a56:	68 09       	ld.w	r9,r4[0x0]
80007a58:	50 e8       	stdsp	sp[0x38],r8
80007a5a:	14 94       	mov	r4,r10
80007a5c:	51 2c       	stdsp	sp[0x48],r12
80007a5e:	fa e5 00 08 	st.d	sp[8],r4
80007a62:	51 59       	stdsp	sp[0x54],r9
80007a64:	6e 95       	ld.w	r5,r7[0x24]
80007a66:	58 05       	cp.w	r5,0
80007a68:	c0 91       	brne	80007a7a <_dtoa_r+0x36>
80007a6a:	31 0c       	mov	r12,16
80007a6c:	fe b0 e8 32 	rcall	80004ad0 <malloc>
80007a70:	99 35       	st.w	r12[0xc],r5
80007a72:	8f 9c       	st.w	r7[0x24],r12
80007a74:	99 15       	st.w	r12[0x4],r5
80007a76:	99 25       	st.w	r12[0x8],r5
80007a78:	99 05       	st.w	r12[0x0],r5
80007a7a:	6e 99       	ld.w	r9,r7[0x24]
80007a7c:	72 08       	ld.w	r8,r9[0x0]
80007a7e:	58 08       	cp.w	r8,0
80007a80:	c0 f0       	breq	80007a9e <_dtoa_r+0x5a>
80007a82:	72 1a       	ld.w	r10,r9[0x4]
80007a84:	91 1a       	st.w	r8[0x4],r10
80007a86:	30 1a       	mov	r10,1
80007a88:	72 19       	ld.w	r9,r9[0x4]
80007a8a:	f4 09 09 49 	lsl	r9,r10,r9
80007a8e:	10 9b       	mov	r11,r8
80007a90:	91 29       	st.w	r8[0x8],r9
80007a92:	0e 9c       	mov	r12,r7
80007a94:	e0 a0 0a 90 	rcall	80008fb4 <_Bfree>
80007a98:	6e 98       	ld.w	r8,r7[0x24]
80007a9a:	30 09       	mov	r9,0
80007a9c:	91 09       	st.w	r8[0x0],r9
80007a9e:	40 28       	lddsp	r8,sp[0x8]
80007aa0:	10 94       	mov	r4,r8
80007aa2:	58 08       	cp.w	r8,0
80007aa4:	c0 64       	brge	80007ab0 <_dtoa_r+0x6c>
80007aa6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80007aaa:	50 28       	stdsp	sp[0x8],r8
80007aac:	30 18       	mov	r8,1
80007aae:	c0 28       	rjmp	80007ab2 <_dtoa_r+0x6e>
80007ab0:	30 08       	mov	r8,0
80007ab2:	8d 08       	st.w	r6[0x0],r8
80007ab4:	fc 1c 7f f0 	movh	r12,0x7ff0
80007ab8:	40 26       	lddsp	r6,sp[0x8]
80007aba:	0c 98       	mov	r8,r6
80007abc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007ac0:	18 38       	cp.w	r8,r12
80007ac2:	c2 01       	brne	80007b02 <_dtoa_r+0xbe>
80007ac4:	e0 68 27 0f 	mov	r8,9999
80007ac8:	41 5b       	lddsp	r11,sp[0x54]
80007aca:	97 08       	st.w	r11[0x0],r8
80007acc:	40 3a       	lddsp	r10,sp[0xc]
80007ace:	58 0a       	cp.w	r10,0
80007ad0:	c0 71       	brne	80007ade <_dtoa_r+0x9a>
80007ad2:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80007ad6:	c0 41       	brne	80007ade <_dtoa_r+0x9a>
80007ad8:	fe cc d4 18 	sub	r12,pc,-11240
80007adc:	c0 38       	rjmp	80007ae2 <_dtoa_r+0x9e>
80007ade:	fe cc d4 12 	sub	r12,pc,-11246
80007ae2:	41 29       	lddsp	r9,sp[0x48]
80007ae4:	58 09       	cp.w	r9,0
80007ae6:	e0 80 05 9a 	breq	8000861a <_dtoa_r+0xbd6>
80007aea:	f8 c8 ff fd 	sub	r8,r12,-3
80007aee:	f8 c9 ff f8 	sub	r9,r12,-8
80007af2:	11 8b       	ld.ub	r11,r8[0x0]
80007af4:	30 0a       	mov	r10,0
80007af6:	41 25       	lddsp	r5,sp[0x48]
80007af8:	f4 0b 18 00 	cp.b	r11,r10
80007afc:	f2 08 17 10 	movne	r8,r9
80007b00:	c1 68       	rjmp	80007b2c <_dtoa_r+0xe8>
80007b02:	fa ea 00 08 	ld.d	r10,sp[8]
80007b06:	30 08       	mov	r8,0
80007b08:	fa eb 00 3c 	st.d	sp[60],r10
80007b0c:	30 09       	mov	r9,0
80007b0e:	e0 a0 0e 03 	rcall	80009714 <__avr32_f64_cmp_eq>
80007b12:	c1 00       	breq	80007b32 <_dtoa_r+0xee>
80007b14:	30 18       	mov	r8,1
80007b16:	41 5a       	lddsp	r10,sp[0x54]
80007b18:	95 08       	st.w	r10[0x0],r8
80007b1a:	fe cc d8 62 	sub	r12,pc,-10142
80007b1e:	41 29       	lddsp	r9,sp[0x48]
80007b20:	f8 08 00 08 	add	r8,r12,r8
80007b24:	58 09       	cp.w	r9,0
80007b26:	e0 80 05 7a 	breq	8000861a <_dtoa_r+0xbd6>
80007b2a:	12 95       	mov	r5,r9
80007b2c:	8b 08       	st.w	r5[0x0],r8
80007b2e:	e0 8f 05 76 	bral	8000861a <_dtoa_r+0xbd6>
80007b32:	fa c8 ff 9c 	sub	r8,sp,-100
80007b36:	fa c9 ff a0 	sub	r9,sp,-96
80007b3a:	fa ea 00 3c 	ld.d	r10,sp[60]
80007b3e:	0e 9c       	mov	r12,r7
80007b40:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007b44:	e0 a0 0a 8a 	rcall	80009058 <__d2b>
80007b48:	18 93       	mov	r3,r12
80007b4a:	58 05       	cp.w	r5,0
80007b4c:	c0 d0       	breq	80007b66 <_dtoa_r+0x122>
80007b4e:	fa ea 00 3c 	ld.d	r10,sp[60]
80007b52:	30 04       	mov	r4,0
80007b54:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80007b58:	ea c5 03 ff 	sub	r5,r5,1023
80007b5c:	10 9b       	mov	r11,r8
80007b5e:	51 74       	stdsp	sp[0x5c],r4
80007b60:	ea 1b 3f f0 	orh	r11,0x3ff0
80007b64:	c2 58       	rjmp	80007bae <_dtoa_r+0x16a>
80007b66:	41 88       	lddsp	r8,sp[0x60]
80007b68:	41 9c       	lddsp	r12,sp[0x64]
80007b6a:	10 0c       	add	r12,r8
80007b6c:	f8 c5 fb ce 	sub	r5,r12,-1074
80007b70:	e0 45 00 20 	cp.w	r5,32
80007b74:	e0 8a 00 0e 	brle	80007b90 <_dtoa_r+0x14c>
80007b78:	f8 cc fb ee 	sub	r12,r12,-1042
80007b7c:	40 3b       	lddsp	r11,sp[0xc]
80007b7e:	ea 08 11 40 	rsub	r8,r5,64
80007b82:	f6 0c 0a 4c 	lsr	r12,r11,r12
80007b86:	ec 08 09 46 	lsl	r6,r6,r8
80007b8a:	0c 4c       	or	r12,r6
80007b8c:	c0 78       	rjmp	80007b9a <_dtoa_r+0x156>
80007b8e:	d7 03       	nop
80007b90:	ea 0c 11 20 	rsub	r12,r5,32
80007b94:	40 3a       	lddsp	r10,sp[0xc]
80007b96:	f4 0c 09 4c 	lsl	r12,r10,r12
80007b9a:	fe b0 e5 46 	rcall	80004626 <__avr32_u32_to_f64>
80007b9e:	fc 18 fe 10 	movh	r8,0xfe10
80007ba2:	30 19       	mov	r9,1
80007ba4:	ea c5 04 33 	sub	r5,r5,1075
80007ba8:	f0 0b 00 0b 	add	r11,r8,r11
80007bac:	51 79       	stdsp	sp[0x5c],r9
80007bae:	30 08       	mov	r8,0
80007bb0:	fc 19 3f f8 	movh	r9,0x3ff8
80007bb4:	fe b0 e3 ce 	rcall	80004350 <__avr32_f64_sub>
80007bb8:	e0 68 43 61 	mov	r8,17249
80007bbc:	ea 18 63 6f 	orh	r8,0x636f
80007bc0:	e0 69 87 a7 	mov	r9,34727
80007bc4:	ea 19 3f d2 	orh	r9,0x3fd2
80007bc8:	fe b0 e2 d8 	rcall	80004178 <__avr32_f64_mul>
80007bcc:	e0 68 c8 b3 	mov	r8,51379
80007bd0:	ea 18 8b 60 	orh	r8,0x8b60
80007bd4:	e0 69 8a 28 	mov	r9,35368
80007bd8:	ea 19 3f c6 	orh	r9,0x3fc6
80007bdc:	fe b0 e4 88 	rcall	800044ec <__avr32_f64_add>
80007be0:	0a 9c       	mov	r12,r5
80007be2:	14 90       	mov	r0,r10
80007be4:	16 91       	mov	r1,r11
80007be6:	fe b0 e5 24 	rcall	8000462e <__avr32_s32_to_f64>
80007bea:	e0 68 79 fb 	mov	r8,31227
80007bee:	ea 18 50 9f 	orh	r8,0x509f
80007bf2:	e0 69 44 13 	mov	r9,17427
80007bf6:	ea 19 3f d3 	orh	r9,0x3fd3
80007bfa:	fe b0 e2 bf 	rcall	80004178 <__avr32_f64_mul>
80007bfe:	14 98       	mov	r8,r10
80007c00:	16 99       	mov	r9,r11
80007c02:	00 9a       	mov	r10,r0
80007c04:	02 9b       	mov	r11,r1
80007c06:	fe b0 e4 73 	rcall	800044ec <__avr32_f64_add>
80007c0a:	14 90       	mov	r0,r10
80007c0c:	16 91       	mov	r1,r11
80007c0e:	fe b0 e4 f9 	rcall	80004600 <__avr32_f64_to_s32>
80007c12:	30 08       	mov	r8,0
80007c14:	18 96       	mov	r6,r12
80007c16:	30 09       	mov	r9,0
80007c18:	00 9a       	mov	r10,r0
80007c1a:	02 9b       	mov	r11,r1
80007c1c:	fe b0 e5 79 	rcall	8000470e <__avr32_f64_cmp_lt>
80007c20:	c0 c0       	breq	80007c38 <_dtoa_r+0x1f4>
80007c22:	0c 9c       	mov	r12,r6
80007c24:	fe b0 e5 05 	rcall	8000462e <__avr32_s32_to_f64>
80007c28:	14 98       	mov	r8,r10
80007c2a:	16 99       	mov	r9,r11
80007c2c:	00 9a       	mov	r10,r0
80007c2e:	02 9b       	mov	r11,r1
80007c30:	e0 a0 0d 72 	rcall	80009714 <__avr32_f64_cmp_eq>
80007c34:	f7 b6 00 01 	subeq	r6,1
80007c38:	59 66       	cp.w	r6,22
80007c3a:	e0 88 00 05 	brls	80007c44 <_dtoa_r+0x200>
80007c3e:	30 18       	mov	r8,1
80007c40:	51 48       	stdsp	sp[0x50],r8
80007c42:	c1 38       	rjmp	80007c68 <_dtoa_r+0x224>
80007c44:	fe c8 d4 c8 	sub	r8,pc,-11064
80007c48:	fa ea 00 3c 	ld.d	r10,sp[60]
80007c4c:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80007c50:	fe b0 e5 5f 	rcall	8000470e <__avr32_f64_cmp_lt>
80007c54:	f9 b4 00 00 	moveq	r4,0
80007c58:	fb f4 0a 14 	st.weq	sp[0x50],r4
80007c5c:	f7 b6 01 01 	subne	r6,1
80007c60:	f9 bc 01 00 	movne	r12,0
80007c64:	fb fc 1a 14 	st.wne	sp[0x50],r12
80007c68:	41 90       	lddsp	r0,sp[0x64]
80007c6a:	20 10       	sub	r0,1
80007c6c:	0a 10       	sub	r0,r5
80007c6e:	c0 46       	brmi	80007c76 <_dtoa_r+0x232>
80007c70:	50 40       	stdsp	sp[0x10],r0
80007c72:	30 00       	mov	r0,0
80007c74:	c0 48       	rjmp	80007c7c <_dtoa_r+0x238>
80007c76:	30 0b       	mov	r11,0
80007c78:	5c 30       	neg	r0
80007c7a:	50 4b       	stdsp	sp[0x10],r11
80007c7c:	ec 02 11 00 	rsub	r2,r6,0
80007c80:	58 06       	cp.w	r6,0
80007c82:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80007c86:	f5 d6 e4 0a 	addge	r10,r10,r6
80007c8a:	fb fa 4a 04 	st.wge	sp[0x10],r10
80007c8e:	fb f6 4a 11 	st.wge	sp[0x44],r6
80007c92:	f9 b2 04 00 	movge	r2,0
80007c96:	e1 d6 e5 10 	sublt	r0,r0,r6
80007c9a:	f9 b9 05 00 	movlt	r9,0
80007c9e:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80007ca2:	40 c8       	lddsp	r8,sp[0x30]
80007ca4:	58 98       	cp.w	r8,9
80007ca6:	e0 8b 00 20 	brhi	80007ce6 <_dtoa_r+0x2a2>
80007caa:	58 58       	cp.w	r8,5
80007cac:	f9 b4 0a 01 	movle	r4,1
80007cb0:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007cb4:	f7 b5 09 04 	subgt	r5,4
80007cb8:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007cbc:	f9 b4 09 00 	movgt	r4,0
80007cc0:	40 cc       	lddsp	r12,sp[0x30]
80007cc2:	58 3c       	cp.w	r12,3
80007cc4:	c2 d0       	breq	80007d1e <_dtoa_r+0x2da>
80007cc6:	e0 89 00 05 	brgt	80007cd0 <_dtoa_r+0x28c>
80007cca:	58 2c       	cp.w	r12,2
80007ccc:	c1 01       	brne	80007cec <_dtoa_r+0x2a8>
80007cce:	c1 88       	rjmp	80007cfe <_dtoa_r+0x2ba>
80007cd0:	40 cb       	lddsp	r11,sp[0x30]
80007cd2:	58 4b       	cp.w	r11,4
80007cd4:	c0 60       	breq	80007ce0 <_dtoa_r+0x29c>
80007cd6:	58 5b       	cp.w	r11,5
80007cd8:	c0 a1       	brne	80007cec <_dtoa_r+0x2a8>
80007cda:	30 1a       	mov	r10,1
80007cdc:	50 da       	stdsp	sp[0x34],r10
80007cde:	c2 28       	rjmp	80007d22 <_dtoa_r+0x2de>
80007ce0:	30 19       	mov	r9,1
80007ce2:	50 d9       	stdsp	sp[0x34],r9
80007ce4:	c0 f8       	rjmp	80007d02 <_dtoa_r+0x2be>
80007ce6:	30 08       	mov	r8,0
80007ce8:	30 14       	mov	r4,1
80007cea:	50 c8       	stdsp	sp[0x30],r8
80007cec:	3f f5       	mov	r5,-1
80007cee:	30 1c       	mov	r12,1
80007cf0:	30 0b       	mov	r11,0
80007cf2:	50 95       	stdsp	sp[0x24],r5
80007cf4:	50 dc       	stdsp	sp[0x34],r12
80007cf6:	0a 91       	mov	r1,r5
80007cf8:	31 28       	mov	r8,18
80007cfa:	50 eb       	stdsp	sp[0x38],r11
80007cfc:	c2 08       	rjmp	80007d3c <_dtoa_r+0x2f8>
80007cfe:	30 0a       	mov	r10,0
80007d00:	50 da       	stdsp	sp[0x34],r10
80007d02:	40 e9       	lddsp	r9,sp[0x38]
80007d04:	58 09       	cp.w	r9,0
80007d06:	e0 89 00 07 	brgt	80007d14 <_dtoa_r+0x2d0>
80007d0a:	30 18       	mov	r8,1
80007d0c:	50 98       	stdsp	sp[0x24],r8
80007d0e:	10 91       	mov	r1,r8
80007d10:	50 e8       	stdsp	sp[0x38],r8
80007d12:	c1 58       	rjmp	80007d3c <_dtoa_r+0x2f8>
80007d14:	40 e5       	lddsp	r5,sp[0x38]
80007d16:	50 95       	stdsp	sp[0x24],r5
80007d18:	0a 91       	mov	r1,r5
80007d1a:	0a 98       	mov	r8,r5
80007d1c:	c1 08       	rjmp	80007d3c <_dtoa_r+0x2f8>
80007d1e:	30 0c       	mov	r12,0
80007d20:	50 dc       	stdsp	sp[0x34],r12
80007d22:	40 eb       	lddsp	r11,sp[0x38]
80007d24:	ec 0b 00 0b 	add	r11,r6,r11
80007d28:	50 9b       	stdsp	sp[0x24],r11
80007d2a:	16 98       	mov	r8,r11
80007d2c:	2f f8       	sub	r8,-1
80007d2e:	58 08       	cp.w	r8,0
80007d30:	e0 89 00 05 	brgt	80007d3a <_dtoa_r+0x2f6>
80007d34:	10 91       	mov	r1,r8
80007d36:	30 18       	mov	r8,1
80007d38:	c0 28       	rjmp	80007d3c <_dtoa_r+0x2f8>
80007d3a:	10 91       	mov	r1,r8
80007d3c:	30 09       	mov	r9,0
80007d3e:	6e 9a       	ld.w	r10,r7[0x24]
80007d40:	95 19       	st.w	r10[0x4],r9
80007d42:	30 49       	mov	r9,4
80007d44:	c0 68       	rjmp	80007d50 <_dtoa_r+0x30c>
80007d46:	d7 03       	nop
80007d48:	6a 1a       	ld.w	r10,r5[0x4]
80007d4a:	a1 79       	lsl	r9,0x1
80007d4c:	2f fa       	sub	r10,-1
80007d4e:	8b 1a       	st.w	r5[0x4],r10
80007d50:	6e 95       	ld.w	r5,r7[0x24]
80007d52:	f2 ca ff ec 	sub	r10,r9,-20
80007d56:	10 3a       	cp.w	r10,r8
80007d58:	fe 98 ff f8 	brls	80007d48 <_dtoa_r+0x304>
80007d5c:	6a 1b       	ld.w	r11,r5[0x4]
80007d5e:	0e 9c       	mov	r12,r7
80007d60:	e0 a0 09 44 	rcall	80008fe8 <_Balloc>
80007d64:	58 e1       	cp.w	r1,14
80007d66:	5f 88       	srls	r8
80007d68:	8b 0c       	st.w	r5[0x0],r12
80007d6a:	f1 e4 00 04 	and	r4,r8,r4
80007d6e:	6e 98       	ld.w	r8,r7[0x24]
80007d70:	70 08       	ld.w	r8,r8[0x0]
80007d72:	50 88       	stdsp	sp[0x20],r8
80007d74:	e0 80 01 82 	breq	80008078 <_dtoa_r+0x634>
80007d78:	58 06       	cp.w	r6,0
80007d7a:	e0 8a 00 43 	brle	80007e00 <_dtoa_r+0x3bc>
80007d7e:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80007d82:	fe c8 d6 06 	sub	r8,pc,-10746
80007d86:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80007d8a:	fa e5 00 18 	st.d	sp[24],r4
80007d8e:	ec 04 14 04 	asr	r4,r6,0x4
80007d92:	ed b4 00 04 	bld	r4,0x4
80007d96:	c0 30       	breq	80007d9c <_dtoa_r+0x358>
80007d98:	30 25       	mov	r5,2
80007d9a:	c1 08       	rjmp	80007dba <_dtoa_r+0x376>
80007d9c:	fe c8 d5 58 	sub	r8,pc,-10920
80007da0:	f0 e8 00 20 	ld.d	r8,r8[32]
80007da4:	fa ea 00 3c 	ld.d	r10,sp[60]
80007da8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007dac:	fe b0 e4 e6 	rcall	80004778 <__avr32_f64_div>
80007db0:	30 35       	mov	r5,3
80007db2:	14 98       	mov	r8,r10
80007db4:	16 99       	mov	r9,r11
80007db6:	fa e9 00 08 	st.d	sp[8],r8
80007dba:	fe cc d5 76 	sub	r12,pc,-10890
80007dbe:	50 a3       	stdsp	sp[0x28],r3
80007dc0:	0c 93       	mov	r3,r6
80007dc2:	18 96       	mov	r6,r12
80007dc4:	c0 f8       	rjmp	80007de2 <_dtoa_r+0x39e>
80007dc6:	fa ea 00 18 	ld.d	r10,sp[24]
80007dca:	ed b4 00 00 	bld	r4,0x0
80007dce:	c0 81       	brne	80007dde <_dtoa_r+0x39a>
80007dd0:	ec e8 00 00 	ld.d	r8,r6[0]
80007dd4:	2f f5       	sub	r5,-1
80007dd6:	fe b0 e1 d1 	rcall	80004178 <__avr32_f64_mul>
80007dda:	fa eb 00 18 	st.d	sp[24],r10
80007dde:	a1 54       	asr	r4,0x1
80007de0:	2f 86       	sub	r6,-8
80007de2:	58 04       	cp.w	r4,0
80007de4:	cf 11       	brne	80007dc6 <_dtoa_r+0x382>
80007de6:	fa e8 00 18 	ld.d	r8,sp[24]
80007dea:	fa ea 00 08 	ld.d	r10,sp[8]
80007dee:	06 96       	mov	r6,r3
80007df0:	fe b0 e4 c4 	rcall	80004778 <__avr32_f64_div>
80007df4:	40 a3       	lddsp	r3,sp[0x28]
80007df6:	14 98       	mov	r8,r10
80007df8:	16 99       	mov	r9,r11
80007dfa:	fa e9 00 08 	st.d	sp[8],r8
80007dfe:	c2 f8       	rjmp	80007e5c <_dtoa_r+0x418>
80007e00:	ec 08 11 00 	rsub	r8,r6,0
80007e04:	c0 31       	brne	80007e0a <_dtoa_r+0x3c6>
80007e06:	30 25       	mov	r5,2
80007e08:	c2 a8       	rjmp	80007e5c <_dtoa_r+0x418>
80007e0a:	fe cc d5 c6 	sub	r12,pc,-10810
80007e0e:	f0 04 14 04 	asr	r4,r8,0x4
80007e12:	50 1c       	stdsp	sp[0x4],r12
80007e14:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007e18:	fe c9 d6 9c 	sub	r9,pc,-10596
80007e1c:	fa ea 00 3c 	ld.d	r10,sp[60]
80007e20:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007e24:	fe b0 e1 aa 	rcall	80004178 <__avr32_f64_mul>
80007e28:	40 1c       	lddsp	r12,sp[0x4]
80007e2a:	50 63       	stdsp	sp[0x18],r3
80007e2c:	30 25       	mov	r5,2
80007e2e:	0c 93       	mov	r3,r6
80007e30:	fa eb 00 08 	st.d	sp[8],r10
80007e34:	18 96       	mov	r6,r12
80007e36:	c0 f8       	rjmp	80007e54 <_dtoa_r+0x410>
80007e38:	fa ea 00 08 	ld.d	r10,sp[8]
80007e3c:	ed b4 00 00 	bld	r4,0x0
80007e40:	c0 81       	brne	80007e50 <_dtoa_r+0x40c>
80007e42:	ec e8 00 00 	ld.d	r8,r6[0]
80007e46:	2f f5       	sub	r5,-1
80007e48:	fe b0 e1 98 	rcall	80004178 <__avr32_f64_mul>
80007e4c:	fa eb 00 08 	st.d	sp[8],r10
80007e50:	a1 54       	asr	r4,0x1
80007e52:	2f 86       	sub	r6,-8
80007e54:	58 04       	cp.w	r4,0
80007e56:	cf 11       	brne	80007e38 <_dtoa_r+0x3f4>
80007e58:	06 96       	mov	r6,r3
80007e5a:	40 63       	lddsp	r3,sp[0x18]
80007e5c:	41 4a       	lddsp	r10,sp[0x50]
80007e5e:	58 0a       	cp.w	r10,0
80007e60:	c2 a0       	breq	80007eb4 <_dtoa_r+0x470>
80007e62:	fa e8 00 08 	ld.d	r8,sp[8]
80007e66:	58 01       	cp.w	r1,0
80007e68:	5f 94       	srgt	r4
80007e6a:	fa e9 00 18 	st.d	sp[24],r8
80007e6e:	30 08       	mov	r8,0
80007e70:	fc 19 3f f0 	movh	r9,0x3ff0
80007e74:	fa ea 00 18 	ld.d	r10,sp[24]
80007e78:	fe b0 e4 4b 	rcall	8000470e <__avr32_f64_cmp_lt>
80007e7c:	f9 bc 00 00 	moveq	r12,0
80007e80:	f9 bc 01 01 	movne	r12,1
80007e84:	e9 ec 00 0c 	and	r12,r4,r12
80007e88:	c1 60       	breq	80007eb4 <_dtoa_r+0x470>
80007e8a:	40 98       	lddsp	r8,sp[0x24]
80007e8c:	58 08       	cp.w	r8,0
80007e8e:	e0 8a 00 f1 	brle	80008070 <_dtoa_r+0x62c>
80007e92:	30 08       	mov	r8,0
80007e94:	fc 19 40 24 	movh	r9,0x4024
80007e98:	ec c4 00 01 	sub	r4,r6,1
80007e9c:	fa ea 00 18 	ld.d	r10,sp[24]
80007ea0:	2f f5       	sub	r5,-1
80007ea2:	50 64       	stdsp	sp[0x18],r4
80007ea4:	fe b0 e1 6a 	rcall	80004178 <__avr32_f64_mul>
80007ea8:	40 94       	lddsp	r4,sp[0x24]
80007eaa:	14 98       	mov	r8,r10
80007eac:	16 99       	mov	r9,r11
80007eae:	fa e9 00 08 	st.d	sp[8],r8
80007eb2:	c0 38       	rjmp	80007eb8 <_dtoa_r+0x474>
80007eb4:	50 66       	stdsp	sp[0x18],r6
80007eb6:	02 94       	mov	r4,r1
80007eb8:	0a 9c       	mov	r12,r5
80007eba:	fe b0 e3 ba 	rcall	8000462e <__avr32_s32_to_f64>
80007ebe:	fa e8 00 08 	ld.d	r8,sp[8]
80007ec2:	fe b0 e1 5b 	rcall	80004178 <__avr32_f64_mul>
80007ec6:	30 08       	mov	r8,0
80007ec8:	fc 19 40 1c 	movh	r9,0x401c
80007ecc:	fe b0 e3 10 	rcall	800044ec <__avr32_f64_add>
80007ed0:	14 98       	mov	r8,r10
80007ed2:	16 99       	mov	r9,r11
80007ed4:	fa e9 00 28 	st.d	sp[40],r8
80007ed8:	fc 18 fc c0 	movh	r8,0xfcc0
80007edc:	40 a5       	lddsp	r5,sp[0x28]
80007ede:	10 05       	add	r5,r8
80007ee0:	50 a5       	stdsp	sp[0x28],r5
80007ee2:	58 04       	cp.w	r4,0
80007ee4:	c2 11       	brne	80007f26 <_dtoa_r+0x4e2>
80007ee6:	fa ea 00 08 	ld.d	r10,sp[8]
80007eea:	30 08       	mov	r8,0
80007eec:	fc 19 40 14 	movh	r9,0x4014
80007ef0:	fe b0 e2 30 	rcall	80004350 <__avr32_f64_sub>
80007ef4:	40 bc       	lddsp	r12,sp[0x2c]
80007ef6:	fa eb 00 08 	st.d	sp[8],r10
80007efa:	14 98       	mov	r8,r10
80007efc:	16 99       	mov	r9,r11
80007efe:	18 9a       	mov	r10,r12
80007f00:	0a 9b       	mov	r11,r5
80007f02:	fe b0 e4 06 	rcall	8000470e <__avr32_f64_cmp_lt>
80007f06:	e0 81 02 54 	brne	800083ae <_dtoa_r+0x96a>
80007f0a:	0a 98       	mov	r8,r5
80007f0c:	40 b9       	lddsp	r9,sp[0x2c]
80007f0e:	ee 18 80 00 	eorh	r8,0x8000
80007f12:	fa ea 00 08 	ld.d	r10,sp[8]
80007f16:	10 95       	mov	r5,r8
80007f18:	12 98       	mov	r8,r9
80007f1a:	0a 99       	mov	r9,r5
80007f1c:	fe b0 e3 f9 	rcall	8000470e <__avr32_f64_cmp_lt>
80007f20:	e0 81 02 3e 	brne	8000839c <_dtoa_r+0x958>
80007f24:	ca 68       	rjmp	80008070 <_dtoa_r+0x62c>
80007f26:	fe c9 d7 aa 	sub	r9,pc,-10326
80007f2a:	e8 c8 00 01 	sub	r8,r4,1
80007f2e:	40 d5       	lddsp	r5,sp[0x34]
80007f30:	58 05       	cp.w	r5,0
80007f32:	c4 f0       	breq	80007fd0 <_dtoa_r+0x58c>
80007f34:	30 0c       	mov	r12,0
80007f36:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007f3a:	51 3c       	stdsp	sp[0x4c],r12
80007f3c:	30 0a       	mov	r10,0
80007f3e:	fc 1b 3f e0 	movh	r11,0x3fe0
80007f42:	fe b0 e4 1b 	rcall	80004778 <__avr32_f64_div>
80007f46:	fa e8 00 28 	ld.d	r8,sp[40]
80007f4a:	40 85       	lddsp	r5,sp[0x20]
80007f4c:	fe b0 e2 02 	rcall	80004350 <__avr32_f64_sub>
80007f50:	fa eb 00 28 	st.d	sp[40],r10
80007f54:	fa ea 00 08 	ld.d	r10,sp[8]
80007f58:	fe b0 e3 54 	rcall	80004600 <__avr32_f64_to_s32>
80007f5c:	51 6c       	stdsp	sp[0x58],r12
80007f5e:	fe b0 e3 68 	rcall	8000462e <__avr32_s32_to_f64>
80007f62:	14 98       	mov	r8,r10
80007f64:	16 99       	mov	r9,r11
80007f66:	fa ea 00 08 	ld.d	r10,sp[8]
80007f6a:	fe b0 e1 f3 	rcall	80004350 <__avr32_f64_sub>
80007f6e:	fa eb 00 08 	st.d	sp[8],r10
80007f72:	41 68       	lddsp	r8,sp[0x58]
80007f74:	2d 08       	sub	r8,-48
80007f76:	0a c8       	st.b	r5++,r8
80007f78:	41 39       	lddsp	r9,sp[0x4c]
80007f7a:	2f f9       	sub	r9,-1
80007f7c:	51 39       	stdsp	sp[0x4c],r9
80007f7e:	fa e8 00 28 	ld.d	r8,sp[40]
80007f82:	fe b0 e3 c6 	rcall	8000470e <__avr32_f64_cmp_lt>
80007f86:	e0 81 03 39 	brne	800085f8 <_dtoa_r+0xbb4>
80007f8a:	fa e8 00 08 	ld.d	r8,sp[8]
80007f8e:	30 0a       	mov	r10,0
80007f90:	fc 1b 3f f0 	movh	r11,0x3ff0
80007f94:	fe b0 e1 de 	rcall	80004350 <__avr32_f64_sub>
80007f98:	fa e8 00 28 	ld.d	r8,sp[40]
80007f9c:	fe b0 e3 b9 	rcall	8000470e <__avr32_f64_cmp_lt>
80007fa0:	fa ea 00 28 	ld.d	r10,sp[40]
80007fa4:	30 08       	mov	r8,0
80007fa6:	fc 19 40 24 	movh	r9,0x4024
80007faa:	e0 81 00 da 	brne	8000815e <_dtoa_r+0x71a>
80007fae:	41 3c       	lddsp	r12,sp[0x4c]
80007fb0:	08 3c       	cp.w	r12,r4
80007fb2:	c5 f4       	brge	80008070 <_dtoa_r+0x62c>
80007fb4:	fe b0 e0 e2 	rcall	80004178 <__avr32_f64_mul>
80007fb8:	30 08       	mov	r8,0
80007fba:	fa eb 00 28 	st.d	sp[40],r10
80007fbe:	fc 19 40 24 	movh	r9,0x4024
80007fc2:	fa ea 00 08 	ld.d	r10,sp[8]
80007fc6:	fe b0 e0 d9 	rcall	80004178 <__avr32_f64_mul>
80007fca:	fa eb 00 08 	st.d	sp[8],r10
80007fce:	cc 3b       	rjmp	80007f54 <_dtoa_r+0x510>
80007fd0:	40 85       	lddsp	r5,sp[0x20]
80007fd2:	08 05       	add	r5,r4
80007fd4:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80007fd8:	51 35       	stdsp	sp[0x4c],r5
80007fda:	fa e8 00 28 	ld.d	r8,sp[40]
80007fde:	40 85       	lddsp	r5,sp[0x20]
80007fe0:	fe b0 e0 cc 	rcall	80004178 <__avr32_f64_mul>
80007fe4:	fa eb 00 28 	st.d	sp[40],r10
80007fe8:	fa ea 00 08 	ld.d	r10,sp[8]
80007fec:	fe b0 e3 0a 	rcall	80004600 <__avr32_f64_to_s32>
80007ff0:	51 6c       	stdsp	sp[0x58],r12
80007ff2:	fe b0 e3 1e 	rcall	8000462e <__avr32_s32_to_f64>
80007ff6:	14 98       	mov	r8,r10
80007ff8:	16 99       	mov	r9,r11
80007ffa:	fa ea 00 08 	ld.d	r10,sp[8]
80007ffe:	fe b0 e1 a9 	rcall	80004350 <__avr32_f64_sub>
80008002:	fa eb 00 08 	st.d	sp[8],r10
80008006:	41 68       	lddsp	r8,sp[0x58]
80008008:	2d 08       	sub	r8,-48
8000800a:	0a c8       	st.b	r5++,r8
8000800c:	41 3c       	lddsp	r12,sp[0x4c]
8000800e:	18 35       	cp.w	r5,r12
80008010:	c2 81       	brne	80008060 <_dtoa_r+0x61c>
80008012:	30 08       	mov	r8,0
80008014:	fc 19 3f e0 	movh	r9,0x3fe0
80008018:	fa ea 00 28 	ld.d	r10,sp[40]
8000801c:	fe b0 e2 68 	rcall	800044ec <__avr32_f64_add>
80008020:	40 85       	lddsp	r5,sp[0x20]
80008022:	fa e8 00 08 	ld.d	r8,sp[8]
80008026:	08 05       	add	r5,r4
80008028:	fe b0 e3 73 	rcall	8000470e <__avr32_f64_cmp_lt>
8000802c:	e0 81 00 99 	brne	8000815e <_dtoa_r+0x71a>
80008030:	fa e8 00 28 	ld.d	r8,sp[40]
80008034:	30 0a       	mov	r10,0
80008036:	fc 1b 3f e0 	movh	r11,0x3fe0
8000803a:	fe b0 e1 8b 	rcall	80004350 <__avr32_f64_sub>
8000803e:	14 98       	mov	r8,r10
80008040:	16 99       	mov	r9,r11
80008042:	fa ea 00 08 	ld.d	r10,sp[8]
80008046:	fe b0 e3 64 	rcall	8000470e <__avr32_f64_cmp_lt>
8000804a:	c1 30       	breq	80008070 <_dtoa_r+0x62c>
8000804c:	33 09       	mov	r9,48
8000804e:	0a 98       	mov	r8,r5
80008050:	11 7a       	ld.ub	r10,--r8
80008052:	f2 0a 18 00 	cp.b	r10,r9
80008056:	e0 81 02 d1 	brne	800085f8 <_dtoa_r+0xbb4>
8000805a:	10 95       	mov	r5,r8
8000805c:	cf 9b       	rjmp	8000804e <_dtoa_r+0x60a>
8000805e:	d7 03       	nop
80008060:	30 08       	mov	r8,0
80008062:	fc 19 40 24 	movh	r9,0x4024
80008066:	fe b0 e0 89 	rcall	80004178 <__avr32_f64_mul>
8000806a:	fa eb 00 08 	st.d	sp[8],r10
8000806e:	cb db       	rjmp	80007fe8 <_dtoa_r+0x5a4>
80008070:	fa ea 00 3c 	ld.d	r10,sp[60]
80008074:	fa eb 00 08 	st.d	sp[8],r10
80008078:	58 e6       	cp.w	r6,14
8000807a:	5f ab       	srle	r11
8000807c:	41 8a       	lddsp	r10,sp[0x60]
8000807e:	30 08       	mov	r8,0
80008080:	f4 09 11 ff 	rsub	r9,r10,-1
80008084:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008088:	f0 09 18 00 	cp.b	r9,r8
8000808c:	e0 80 00 82 	breq	80008190 <_dtoa_r+0x74c>
80008090:	40 ea       	lddsp	r10,sp[0x38]
80008092:	58 01       	cp.w	r1,0
80008094:	5f a9       	srle	r9
80008096:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000809a:	fe ca d9 1e 	sub	r10,pc,-9954
8000809e:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800080a2:	fa e5 00 10 	st.d	sp[16],r4
800080a6:	f0 09 18 00 	cp.b	r9,r8
800080aa:	c1 40       	breq	800080d2 <_dtoa_r+0x68e>
800080ac:	58 01       	cp.w	r1,0
800080ae:	e0 81 01 77 	brne	8000839c <_dtoa_r+0x958>
800080b2:	30 08       	mov	r8,0
800080b4:	fc 19 40 14 	movh	r9,0x4014
800080b8:	08 9a       	mov	r10,r4
800080ba:	0a 9b       	mov	r11,r5
800080bc:	fe b0 e0 5e 	rcall	80004178 <__avr32_f64_mul>
800080c0:	fa e8 00 08 	ld.d	r8,sp[8]
800080c4:	e0 a0 0b 3b 	rcall	8000973a <__avr32_f64_cmp_ge>
800080c8:	e0 81 01 6a 	brne	8000839c <_dtoa_r+0x958>
800080cc:	02 92       	mov	r2,r1
800080ce:	e0 8f 01 72 	bral	800083b2 <_dtoa_r+0x96e>
800080d2:	40 85       	lddsp	r5,sp[0x20]
800080d4:	30 14       	mov	r4,1
800080d6:	fa e8 00 10 	ld.d	r8,sp[16]
800080da:	fa ea 00 08 	ld.d	r10,sp[8]
800080de:	fe b0 e3 4d 	rcall	80004778 <__avr32_f64_div>
800080e2:	fe b0 e2 8f 	rcall	80004600 <__avr32_f64_to_s32>
800080e6:	18 92       	mov	r2,r12
800080e8:	fe b0 e2 a3 	rcall	8000462e <__avr32_s32_to_f64>
800080ec:	fa e8 00 10 	ld.d	r8,sp[16]
800080f0:	fe b0 e0 44 	rcall	80004178 <__avr32_f64_mul>
800080f4:	14 98       	mov	r8,r10
800080f6:	16 99       	mov	r9,r11
800080f8:	fa ea 00 08 	ld.d	r10,sp[8]
800080fc:	fe b0 e1 2a 	rcall	80004350 <__avr32_f64_sub>
80008100:	fa eb 00 08 	st.d	sp[8],r10
80008104:	e4 c8 ff d0 	sub	r8,r2,-48
80008108:	0a c8       	st.b	r5++,r8
8000810a:	fc 19 40 24 	movh	r9,0x4024
8000810e:	30 08       	mov	r8,0
80008110:	02 34       	cp.w	r4,r1
80008112:	c3 31       	brne	80008178 <_dtoa_r+0x734>
80008114:	fa e8 00 08 	ld.d	r8,sp[8]
80008118:	fe b0 e1 ea 	rcall	800044ec <__avr32_f64_add>
8000811c:	16 91       	mov	r1,r11
8000811e:	14 90       	mov	r0,r10
80008120:	14 98       	mov	r8,r10
80008122:	02 99       	mov	r9,r1
80008124:	fa ea 00 10 	ld.d	r10,sp[16]
80008128:	fe b0 e2 f3 	rcall	8000470e <__avr32_f64_cmp_lt>
8000812c:	c1 a1       	brne	80008160 <_dtoa_r+0x71c>
8000812e:	fa e8 00 10 	ld.d	r8,sp[16]
80008132:	00 9a       	mov	r10,r0
80008134:	02 9b       	mov	r11,r1
80008136:	e0 a0 0a ef 	rcall	80009714 <__avr32_f64_cmp_eq>
8000813a:	e0 80 02 5e 	breq	800085f6 <_dtoa_r+0xbb2>
8000813e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008142:	c0 f1       	brne	80008160 <_dtoa_r+0x71c>
80008144:	e0 8f 02 59 	bral	800085f6 <_dtoa_r+0xbb2>
80008148:	40 8a       	lddsp	r10,sp[0x20]
8000814a:	14 38       	cp.w	r8,r10
8000814c:	c0 30       	breq	80008152 <_dtoa_r+0x70e>
8000814e:	10 95       	mov	r5,r8
80008150:	c0 98       	rjmp	80008162 <_dtoa_r+0x71e>
80008152:	33 08       	mov	r8,48
80008154:	40 89       	lddsp	r9,sp[0x20]
80008156:	2f f6       	sub	r6,-1
80008158:	b2 88       	st.b	r9[0x0],r8
8000815a:	40 88       	lddsp	r8,sp[0x20]
8000815c:	c0 88       	rjmp	8000816c <_dtoa_r+0x728>
8000815e:	40 66       	lddsp	r6,sp[0x18]
80008160:	33 99       	mov	r9,57
80008162:	0a 98       	mov	r8,r5
80008164:	11 7a       	ld.ub	r10,--r8
80008166:	f2 0a 18 00 	cp.b	r10,r9
8000816a:	ce f0       	breq	80008148 <_dtoa_r+0x704>
8000816c:	50 66       	stdsp	sp[0x18],r6
8000816e:	11 89       	ld.ub	r9,r8[0x0]
80008170:	2f f9       	sub	r9,-1
80008172:	b0 89       	st.b	r8[0x0],r9
80008174:	e0 8f 02 42 	bral	800085f8 <_dtoa_r+0xbb4>
80008178:	fe b0 e0 00 	rcall	80004178 <__avr32_f64_mul>
8000817c:	2f f4       	sub	r4,-1
8000817e:	fa eb 00 08 	st.d	sp[8],r10
80008182:	30 08       	mov	r8,0
80008184:	30 09       	mov	r9,0
80008186:	e0 a0 0a c7 	rcall	80009714 <__avr32_f64_cmp_eq>
8000818a:	ca 60       	breq	800080d6 <_dtoa_r+0x692>
8000818c:	e0 8f 02 35 	bral	800085f6 <_dtoa_r+0xbb2>
80008190:	40 d8       	lddsp	r8,sp[0x34]
80008192:	58 08       	cp.w	r8,0
80008194:	c0 51       	brne	8000819e <_dtoa_r+0x75a>
80008196:	04 98       	mov	r8,r2
80008198:	00 95       	mov	r5,r0
8000819a:	40 d4       	lddsp	r4,sp[0x34]
8000819c:	c3 78       	rjmp	8000820a <_dtoa_r+0x7c6>
8000819e:	40 c5       	lddsp	r5,sp[0x30]
800081a0:	58 15       	cp.w	r5,1
800081a2:	e0 89 00 0f 	brgt	800081c0 <_dtoa_r+0x77c>
800081a6:	41 74       	lddsp	r4,sp[0x5c]
800081a8:	58 04       	cp.w	r4,0
800081aa:	c0 40       	breq	800081b2 <_dtoa_r+0x76e>
800081ac:	f4 c9 fb cd 	sub	r9,r10,-1075
800081b0:	c0 48       	rjmp	800081b8 <_dtoa_r+0x774>
800081b2:	41 99       	lddsp	r9,sp[0x64]
800081b4:	f2 09 11 36 	rsub	r9,r9,54
800081b8:	04 98       	mov	r8,r2
800081ba:	00 95       	mov	r5,r0
800081bc:	c1 c8       	rjmp	800081f4 <_dtoa_r+0x7b0>
800081be:	d7 03       	nop
800081c0:	e2 c8 00 01 	sub	r8,r1,1
800081c4:	58 01       	cp.w	r1,0
800081c6:	e0 05 17 40 	movge	r5,r0
800081ca:	e2 09 17 40 	movge	r9,r1
800081ce:	e1 d1 e5 15 	sublt	r5,r0,r1
800081d2:	f9 b9 05 00 	movlt	r9,0
800081d6:	10 32       	cp.w	r2,r8
800081d8:	e5 d8 e4 18 	subge	r8,r2,r8
800081dc:	f1 d2 e5 18 	sublt	r8,r8,r2
800081e0:	e5 d8 e5 02 	addlt	r2,r2,r8
800081e4:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800081e8:	f9 d8 e5 0c 	addlt	r12,r12,r8
800081ec:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800081f0:	f9 b8 05 00 	movlt	r8,0
800081f4:	40 4b       	lddsp	r11,sp[0x10]
800081f6:	12 0b       	add	r11,r9
800081f8:	50 08       	stdsp	sp[0x0],r8
800081fa:	50 4b       	stdsp	sp[0x10],r11
800081fc:	12 00       	add	r0,r9
800081fe:	30 1b       	mov	r11,1
80008200:	0e 9c       	mov	r12,r7
80008202:	e0 a0 08 a7 	rcall	80009350 <__i2b>
80008206:	40 08       	lddsp	r8,sp[0x0]
80008208:	18 94       	mov	r4,r12
8000820a:	40 4a       	lddsp	r10,sp[0x10]
8000820c:	58 05       	cp.w	r5,0
8000820e:	5f 99       	srgt	r9
80008210:	58 0a       	cp.w	r10,0
80008212:	5f 9a       	srgt	r10
80008214:	f5 e9 00 09 	and	r9,r10,r9
80008218:	c0 80       	breq	80008228 <_dtoa_r+0x7e4>
8000821a:	40 4c       	lddsp	r12,sp[0x10]
8000821c:	f8 05 0d 49 	min	r9,r12,r5
80008220:	12 1c       	sub	r12,r9
80008222:	12 10       	sub	r0,r9
80008224:	50 4c       	stdsp	sp[0x10],r12
80008226:	12 15       	sub	r5,r9
80008228:	58 02       	cp.w	r2,0
8000822a:	e0 8a 00 27 	brle	80008278 <_dtoa_r+0x834>
8000822e:	40 db       	lddsp	r11,sp[0x34]
80008230:	58 0b       	cp.w	r11,0
80008232:	c1 d0       	breq	8000826c <_dtoa_r+0x828>
80008234:	58 08       	cp.w	r8,0
80008236:	e0 8a 00 17 	brle	80008264 <_dtoa_r+0x820>
8000823a:	10 9a       	mov	r10,r8
8000823c:	50 08       	stdsp	sp[0x0],r8
8000823e:	08 9b       	mov	r11,r4
80008240:	0e 9c       	mov	r12,r7
80008242:	e0 a0 08 cd 	rcall	800093dc <__pow5mult>
80008246:	06 9a       	mov	r10,r3
80008248:	18 9b       	mov	r11,r12
8000824a:	18 94       	mov	r4,r12
8000824c:	0e 9c       	mov	r12,r7
8000824e:	e0 a0 08 01 	rcall	80009250 <__multiply>
80008252:	18 99       	mov	r9,r12
80008254:	06 9b       	mov	r11,r3
80008256:	50 19       	stdsp	sp[0x4],r9
80008258:	0e 9c       	mov	r12,r7
8000825a:	e0 a0 06 ad 	rcall	80008fb4 <_Bfree>
8000825e:	40 19       	lddsp	r9,sp[0x4]
80008260:	40 08       	lddsp	r8,sp[0x0]
80008262:	12 93       	mov	r3,r9
80008264:	e4 08 01 0a 	sub	r10,r2,r8
80008268:	c0 80       	breq	80008278 <_dtoa_r+0x834>
8000826a:	c0 28       	rjmp	8000826e <_dtoa_r+0x82a>
8000826c:	04 9a       	mov	r10,r2
8000826e:	06 9b       	mov	r11,r3
80008270:	0e 9c       	mov	r12,r7
80008272:	e0 a0 08 b5 	rcall	800093dc <__pow5mult>
80008276:	18 93       	mov	r3,r12
80008278:	30 1b       	mov	r11,1
8000827a:	0e 9c       	mov	r12,r7
8000827c:	e0 a0 08 6a 	rcall	80009350 <__i2b>
80008280:	41 1a       	lddsp	r10,sp[0x44]
80008282:	18 92       	mov	r2,r12
80008284:	58 0a       	cp.w	r10,0
80008286:	e0 8a 00 07 	brle	80008294 <_dtoa_r+0x850>
8000828a:	18 9b       	mov	r11,r12
8000828c:	0e 9c       	mov	r12,r7
8000828e:	e0 a0 08 a7 	rcall	800093dc <__pow5mult>
80008292:	18 92       	mov	r2,r12
80008294:	40 c9       	lddsp	r9,sp[0x30]
80008296:	58 19       	cp.w	r9,1
80008298:	e0 89 00 14 	brgt	800082c0 <_dtoa_r+0x87c>
8000829c:	40 38       	lddsp	r8,sp[0xc]
8000829e:	58 08       	cp.w	r8,0
800082a0:	c1 01       	brne	800082c0 <_dtoa_r+0x87c>
800082a2:	40 29       	lddsp	r9,sp[0x8]
800082a4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800082a8:	c0 c1       	brne	800082c0 <_dtoa_r+0x87c>
800082aa:	12 98       	mov	r8,r9
800082ac:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800082b0:	c0 80       	breq	800082c0 <_dtoa_r+0x87c>
800082b2:	40 4c       	lddsp	r12,sp[0x10]
800082b4:	30 1b       	mov	r11,1
800082b6:	2f fc       	sub	r12,-1
800082b8:	2f f0       	sub	r0,-1
800082ba:	50 4c       	stdsp	sp[0x10],r12
800082bc:	50 6b       	stdsp	sp[0x18],r11
800082be:	c0 38       	rjmp	800082c4 <_dtoa_r+0x880>
800082c0:	30 0a       	mov	r10,0
800082c2:	50 6a       	stdsp	sp[0x18],r10
800082c4:	41 19       	lddsp	r9,sp[0x44]
800082c6:	58 09       	cp.w	r9,0
800082c8:	c0 31       	brne	800082ce <_dtoa_r+0x88a>
800082ca:	30 1c       	mov	r12,1
800082cc:	c0 98       	rjmp	800082de <_dtoa_r+0x89a>
800082ce:	64 48       	ld.w	r8,r2[0x10]
800082d0:	2f c8       	sub	r8,-4
800082d2:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800082d6:	e0 a0 05 df 	rcall	80008e94 <__hi0bits>
800082da:	f8 0c 11 20 	rsub	r12,r12,32
800082de:	40 4b       	lddsp	r11,sp[0x10]
800082e0:	f8 0b 00 08 	add	r8,r12,r11
800082e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800082e8:	c0 c0       	breq	80008300 <_dtoa_r+0x8bc>
800082ea:	f0 08 11 20 	rsub	r8,r8,32
800082ee:	58 48       	cp.w	r8,4
800082f0:	e0 8a 00 06 	brle	800082fc <_dtoa_r+0x8b8>
800082f4:	20 48       	sub	r8,4
800082f6:	10 0b       	add	r11,r8
800082f8:	50 4b       	stdsp	sp[0x10],r11
800082fa:	c0 78       	rjmp	80008308 <_dtoa_r+0x8c4>
800082fc:	58 48       	cp.w	r8,4
800082fe:	c0 70       	breq	8000830c <_dtoa_r+0x8c8>
80008300:	40 4a       	lddsp	r10,sp[0x10]
80008302:	2e 48       	sub	r8,-28
80008304:	10 0a       	add	r10,r8
80008306:	50 4a       	stdsp	sp[0x10],r10
80008308:	10 00       	add	r0,r8
8000830a:	10 05       	add	r5,r8
8000830c:	58 00       	cp.w	r0,0
8000830e:	e0 8a 00 08 	brle	8000831e <_dtoa_r+0x8da>
80008312:	06 9b       	mov	r11,r3
80008314:	00 9a       	mov	r10,r0
80008316:	0e 9c       	mov	r12,r7
80008318:	e0 a0 07 58 	rcall	800091c8 <__lshift>
8000831c:	18 93       	mov	r3,r12
8000831e:	40 49       	lddsp	r9,sp[0x10]
80008320:	58 09       	cp.w	r9,0
80008322:	e0 8a 00 08 	brle	80008332 <_dtoa_r+0x8ee>
80008326:	04 9b       	mov	r11,r2
80008328:	12 9a       	mov	r10,r9
8000832a:	0e 9c       	mov	r12,r7
8000832c:	e0 a0 07 4e 	rcall	800091c8 <__lshift>
80008330:	18 92       	mov	r2,r12
80008332:	41 48       	lddsp	r8,sp[0x50]
80008334:	58 08       	cp.w	r8,0
80008336:	c1 b0       	breq	8000836c <_dtoa_r+0x928>
80008338:	04 9b       	mov	r11,r2
8000833a:	06 9c       	mov	r12,r3
8000833c:	e0 a0 06 23 	rcall	80008f82 <__mcmp>
80008340:	c1 64       	brge	8000836c <_dtoa_r+0x928>
80008342:	06 9b       	mov	r11,r3
80008344:	30 09       	mov	r9,0
80008346:	30 aa       	mov	r10,10
80008348:	0e 9c       	mov	r12,r7
8000834a:	e0 a0 08 0b 	rcall	80009360 <__multadd>
8000834e:	20 16       	sub	r6,1
80008350:	18 93       	mov	r3,r12
80008352:	40 dc       	lddsp	r12,sp[0x34]
80008354:	58 0c       	cp.w	r12,0
80008356:	c0 31       	brne	8000835c <_dtoa_r+0x918>
80008358:	40 91       	lddsp	r1,sp[0x24]
8000835a:	c0 98       	rjmp	8000836c <_dtoa_r+0x928>
8000835c:	08 9b       	mov	r11,r4
8000835e:	40 91       	lddsp	r1,sp[0x24]
80008360:	30 09       	mov	r9,0
80008362:	30 aa       	mov	r10,10
80008364:	0e 9c       	mov	r12,r7
80008366:	e0 a0 07 fd 	rcall	80009360 <__multadd>
8000836a:	18 94       	mov	r4,r12
8000836c:	58 01       	cp.w	r1,0
8000836e:	5f a9       	srle	r9
80008370:	40 cb       	lddsp	r11,sp[0x30]
80008372:	58 2b       	cp.w	r11,2
80008374:	5f 98       	srgt	r8
80008376:	f3 e8 00 08 	and	r8,r9,r8
8000837a:	c2 50       	breq	800083c4 <_dtoa_r+0x980>
8000837c:	58 01       	cp.w	r1,0
8000837e:	c1 11       	brne	800083a0 <_dtoa_r+0x95c>
80008380:	04 9b       	mov	r11,r2
80008382:	02 99       	mov	r9,r1
80008384:	30 5a       	mov	r10,5
80008386:	0e 9c       	mov	r12,r7
80008388:	e0 a0 07 ec 	rcall	80009360 <__multadd>
8000838c:	18 92       	mov	r2,r12
8000838e:	18 9b       	mov	r11,r12
80008390:	06 9c       	mov	r12,r3
80008392:	e0 a0 05 f8 	rcall	80008f82 <__mcmp>
80008396:	e0 89 00 0f 	brgt	800083b4 <_dtoa_r+0x970>
8000839a:	c0 38       	rjmp	800083a0 <_dtoa_r+0x95c>
8000839c:	30 02       	mov	r2,0
8000839e:	04 94       	mov	r4,r2
800083a0:	40 ea       	lddsp	r10,sp[0x38]
800083a2:	30 09       	mov	r9,0
800083a4:	5c da       	com	r10
800083a6:	40 85       	lddsp	r5,sp[0x20]
800083a8:	50 6a       	stdsp	sp[0x18],r10
800083aa:	50 49       	stdsp	sp[0x10],r9
800083ac:	c0 f9       	rjmp	800085ca <_dtoa_r+0xb86>
800083ae:	08 92       	mov	r2,r4
800083b0:	40 66       	lddsp	r6,sp[0x18]
800083b2:	04 94       	mov	r4,r2
800083b4:	2f f6       	sub	r6,-1
800083b6:	50 66       	stdsp	sp[0x18],r6
800083b8:	33 18       	mov	r8,49
800083ba:	40 85       	lddsp	r5,sp[0x20]
800083bc:	0a c8       	st.b	r5++,r8
800083be:	30 08       	mov	r8,0
800083c0:	50 48       	stdsp	sp[0x10],r8
800083c2:	c0 49       	rjmp	800085ca <_dtoa_r+0xb86>
800083c4:	40 dc       	lddsp	r12,sp[0x34]
800083c6:	58 0c       	cp.w	r12,0
800083c8:	e0 80 00 b5 	breq	80008532 <_dtoa_r+0xaee>
800083cc:	58 05       	cp.w	r5,0
800083ce:	e0 8a 00 08 	brle	800083de <_dtoa_r+0x99a>
800083d2:	08 9b       	mov	r11,r4
800083d4:	0a 9a       	mov	r10,r5
800083d6:	0e 9c       	mov	r12,r7
800083d8:	e0 a0 06 f8 	rcall	800091c8 <__lshift>
800083dc:	18 94       	mov	r4,r12
800083de:	40 6b       	lddsp	r11,sp[0x18]
800083e0:	58 0b       	cp.w	r11,0
800083e2:	c0 31       	brne	800083e8 <_dtoa_r+0x9a4>
800083e4:	08 9c       	mov	r12,r4
800083e6:	c1 38       	rjmp	8000840c <_dtoa_r+0x9c8>
800083e8:	68 1b       	ld.w	r11,r4[0x4]
800083ea:	0e 9c       	mov	r12,r7
800083ec:	e0 a0 05 fe 	rcall	80008fe8 <_Balloc>
800083f0:	68 4a       	ld.w	r10,r4[0x10]
800083f2:	18 95       	mov	r5,r12
800083f4:	e8 cb ff f4 	sub	r11,r4,-12
800083f8:	2f ea       	sub	r10,-2
800083fa:	2f 4c       	sub	r12,-12
800083fc:	a3 6a       	lsl	r10,0x2
800083fe:	fe b0 e5 8d 	rcall	80004f18 <memcpy>
80008402:	0a 9b       	mov	r11,r5
80008404:	30 1a       	mov	r10,1
80008406:	0e 9c       	mov	r12,r7
80008408:	e0 a0 06 e0 	rcall	800091c8 <__lshift>
8000840c:	50 44       	stdsp	sp[0x10],r4
8000840e:	40 3a       	lddsp	r10,sp[0xc]
80008410:	30 19       	mov	r9,1
80008412:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008416:	18 94       	mov	r4,r12
80008418:	50 da       	stdsp	sp[0x34],r10
8000841a:	40 85       	lddsp	r5,sp[0x20]
8000841c:	50 99       	stdsp	sp[0x24],r9
8000841e:	50 26       	stdsp	sp[0x8],r6
80008420:	50 e1       	stdsp	sp[0x38],r1
80008422:	04 9b       	mov	r11,r2
80008424:	06 9c       	mov	r12,r3
80008426:	fe b0 fa 7f 	rcall	80007924 <quorem>
8000842a:	40 4b       	lddsp	r11,sp[0x10]
8000842c:	f8 c0 ff d0 	sub	r0,r12,-48
80008430:	06 9c       	mov	r12,r3
80008432:	e0 a0 05 a8 	rcall	80008f82 <__mcmp>
80008436:	08 9a       	mov	r10,r4
80008438:	50 6c       	stdsp	sp[0x18],r12
8000843a:	04 9b       	mov	r11,r2
8000843c:	0e 9c       	mov	r12,r7
8000843e:	e0 a0 06 5d 	rcall	800090f8 <__mdiff>
80008442:	18 91       	mov	r1,r12
80008444:	78 38       	ld.w	r8,r12[0xc]
80008446:	58 08       	cp.w	r8,0
80008448:	c0 30       	breq	8000844e <_dtoa_r+0xa0a>
8000844a:	30 16       	mov	r6,1
8000844c:	c0 68       	rjmp	80008458 <_dtoa_r+0xa14>
8000844e:	18 9b       	mov	r11,r12
80008450:	06 9c       	mov	r12,r3
80008452:	e0 a0 05 98 	rcall	80008f82 <__mcmp>
80008456:	18 96       	mov	r6,r12
80008458:	0e 9c       	mov	r12,r7
8000845a:	02 9b       	mov	r11,r1
8000845c:	e0 a0 05 ac 	rcall	80008fb4 <_Bfree>
80008460:	40 cc       	lddsp	r12,sp[0x30]
80008462:	ed ec 10 08 	or	r8,r6,r12
80008466:	c0 d1       	brne	80008480 <_dtoa_r+0xa3c>
80008468:	40 db       	lddsp	r11,sp[0x34]
8000846a:	58 0b       	cp.w	r11,0
8000846c:	c0 a1       	brne	80008480 <_dtoa_r+0xa3c>
8000846e:	40 26       	lddsp	r6,sp[0x8]
80008470:	e0 40 00 39 	cp.w	r0,57
80008474:	c3 00       	breq	800084d4 <_dtoa_r+0xa90>
80008476:	40 6a       	lddsp	r10,sp[0x18]
80008478:	58 0a       	cp.w	r10,0
8000847a:	e0 89 00 24 	brgt	800084c2 <_dtoa_r+0xa7e>
8000847e:	c2 f8       	rjmp	800084dc <_dtoa_r+0xa98>
80008480:	40 69       	lddsp	r9,sp[0x18]
80008482:	58 09       	cp.w	r9,0
80008484:	c0 85       	brlt	80008494 <_dtoa_r+0xa50>
80008486:	12 98       	mov	r8,r9
80008488:	40 cc       	lddsp	r12,sp[0x30]
8000848a:	18 48       	or	r8,r12
8000848c:	c1 d1       	brne	800084c6 <_dtoa_r+0xa82>
8000848e:	40 db       	lddsp	r11,sp[0x34]
80008490:	58 0b       	cp.w	r11,0
80008492:	c1 a1       	brne	800084c6 <_dtoa_r+0xa82>
80008494:	0c 99       	mov	r9,r6
80008496:	40 26       	lddsp	r6,sp[0x8]
80008498:	58 09       	cp.w	r9,0
8000849a:	e0 8a 00 21 	brle	800084dc <_dtoa_r+0xa98>
8000849e:	06 9b       	mov	r11,r3
800084a0:	30 1a       	mov	r10,1
800084a2:	0e 9c       	mov	r12,r7
800084a4:	e0 a0 06 92 	rcall	800091c8 <__lshift>
800084a8:	04 9b       	mov	r11,r2
800084aa:	18 93       	mov	r3,r12
800084ac:	e0 a0 05 6b 	rcall	80008f82 <__mcmp>
800084b0:	e0 89 00 06 	brgt	800084bc <_dtoa_r+0xa78>
800084b4:	c1 41       	brne	800084dc <_dtoa_r+0xa98>
800084b6:	ed b0 00 00 	bld	r0,0x0
800084ba:	c1 11       	brne	800084dc <_dtoa_r+0xa98>
800084bc:	e0 40 00 39 	cp.w	r0,57
800084c0:	c0 a0       	breq	800084d4 <_dtoa_r+0xa90>
800084c2:	2f f0       	sub	r0,-1
800084c4:	c0 c8       	rjmp	800084dc <_dtoa_r+0xa98>
800084c6:	58 06       	cp.w	r6,0
800084c8:	e0 8a 00 0c 	brle	800084e0 <_dtoa_r+0xa9c>
800084cc:	40 26       	lddsp	r6,sp[0x8]
800084ce:	e0 40 00 39 	cp.w	r0,57
800084d2:	c0 41       	brne	800084da <_dtoa_r+0xa96>
800084d4:	33 98       	mov	r8,57
800084d6:	0a c8       	st.b	r5++,r8
800084d8:	c6 78       	rjmp	800085a6 <_dtoa_r+0xb62>
800084da:	2f f0       	sub	r0,-1
800084dc:	0a c0       	st.b	r5++,r0
800084de:	c7 58       	rjmp	800085c8 <_dtoa_r+0xb84>
800084e0:	0a c0       	st.b	r5++,r0
800084e2:	40 9a       	lddsp	r10,sp[0x24]
800084e4:	40 e9       	lddsp	r9,sp[0x38]
800084e6:	12 3a       	cp.w	r10,r9
800084e8:	c4 30       	breq	8000856e <_dtoa_r+0xb2a>
800084ea:	06 9b       	mov	r11,r3
800084ec:	30 09       	mov	r9,0
800084ee:	30 aa       	mov	r10,10
800084f0:	0e 9c       	mov	r12,r7
800084f2:	e0 a0 07 37 	rcall	80009360 <__multadd>
800084f6:	40 48       	lddsp	r8,sp[0x10]
800084f8:	18 93       	mov	r3,r12
800084fa:	08 38       	cp.w	r8,r4
800084fc:	c0 91       	brne	8000850e <_dtoa_r+0xaca>
800084fe:	10 9b       	mov	r11,r8
80008500:	30 09       	mov	r9,0
80008502:	30 aa       	mov	r10,10
80008504:	0e 9c       	mov	r12,r7
80008506:	e0 a0 07 2d 	rcall	80009360 <__multadd>
8000850a:	50 4c       	stdsp	sp[0x10],r12
8000850c:	c0 e8       	rjmp	80008528 <_dtoa_r+0xae4>
8000850e:	40 4b       	lddsp	r11,sp[0x10]
80008510:	30 09       	mov	r9,0
80008512:	30 aa       	mov	r10,10
80008514:	0e 9c       	mov	r12,r7
80008516:	e0 a0 07 25 	rcall	80009360 <__multadd>
8000851a:	08 9b       	mov	r11,r4
8000851c:	50 4c       	stdsp	sp[0x10],r12
8000851e:	30 09       	mov	r9,0
80008520:	30 aa       	mov	r10,10
80008522:	0e 9c       	mov	r12,r7
80008524:	e0 a0 07 1e 	rcall	80009360 <__multadd>
80008528:	18 94       	mov	r4,r12
8000852a:	40 9c       	lddsp	r12,sp[0x24]
8000852c:	2f fc       	sub	r12,-1
8000852e:	50 9c       	stdsp	sp[0x24],r12
80008530:	c7 9b       	rjmp	80008422 <_dtoa_r+0x9de>
80008532:	30 18       	mov	r8,1
80008534:	06 90       	mov	r0,r3
80008536:	40 85       	lddsp	r5,sp[0x20]
80008538:	08 93       	mov	r3,r4
8000853a:	0c 94       	mov	r4,r6
8000853c:	10 96       	mov	r6,r8
8000853e:	04 9b       	mov	r11,r2
80008540:	00 9c       	mov	r12,r0
80008542:	fe b0 f9 f1 	rcall	80007924 <quorem>
80008546:	2d 0c       	sub	r12,-48
80008548:	0a cc       	st.b	r5++,r12
8000854a:	02 36       	cp.w	r6,r1
8000854c:	c0 a4       	brge	80008560 <_dtoa_r+0xb1c>
8000854e:	00 9b       	mov	r11,r0
80008550:	30 09       	mov	r9,0
80008552:	30 aa       	mov	r10,10
80008554:	0e 9c       	mov	r12,r7
80008556:	2f f6       	sub	r6,-1
80008558:	e0 a0 07 04 	rcall	80009360 <__multadd>
8000855c:	18 90       	mov	r0,r12
8000855e:	cf 0b       	rjmp	8000853e <_dtoa_r+0xafa>
80008560:	08 96       	mov	r6,r4
80008562:	30 0b       	mov	r11,0
80008564:	06 94       	mov	r4,r3
80008566:	50 4b       	stdsp	sp[0x10],r11
80008568:	00 93       	mov	r3,r0
8000856a:	18 90       	mov	r0,r12
8000856c:	c0 28       	rjmp	80008570 <_dtoa_r+0xb2c>
8000856e:	40 26       	lddsp	r6,sp[0x8]
80008570:	06 9b       	mov	r11,r3
80008572:	30 1a       	mov	r10,1
80008574:	0e 9c       	mov	r12,r7
80008576:	e0 a0 06 29 	rcall	800091c8 <__lshift>
8000857a:	04 9b       	mov	r11,r2
8000857c:	18 93       	mov	r3,r12
8000857e:	e0 a0 05 02 	rcall	80008f82 <__mcmp>
80008582:	e0 89 00 12 	brgt	800085a6 <_dtoa_r+0xb62>
80008586:	c1 b1       	brne	800085bc <_dtoa_r+0xb78>
80008588:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000858c:	c0 d1       	brne	800085a6 <_dtoa_r+0xb62>
8000858e:	c1 78       	rjmp	800085bc <_dtoa_r+0xb78>
80008590:	40 89       	lddsp	r9,sp[0x20]
80008592:	12 38       	cp.w	r8,r9
80008594:	c0 30       	breq	8000859a <_dtoa_r+0xb56>
80008596:	10 95       	mov	r5,r8
80008598:	c0 88       	rjmp	800085a8 <_dtoa_r+0xb64>
8000859a:	2f f6       	sub	r6,-1
8000859c:	50 66       	stdsp	sp[0x18],r6
8000859e:	33 18       	mov	r8,49
800085a0:	40 8c       	lddsp	r12,sp[0x20]
800085a2:	b8 88       	st.b	r12[0x0],r8
800085a4:	c1 38       	rjmp	800085ca <_dtoa_r+0xb86>
800085a6:	33 9a       	mov	r10,57
800085a8:	0a 98       	mov	r8,r5
800085aa:	11 79       	ld.ub	r9,--r8
800085ac:	f4 09 18 00 	cp.b	r9,r10
800085b0:	cf 00       	breq	80008590 <_dtoa_r+0xb4c>
800085b2:	2f f9       	sub	r9,-1
800085b4:	b0 89       	st.b	r8[0x0],r9
800085b6:	c0 98       	rjmp	800085c8 <_dtoa_r+0xb84>
800085b8:	10 95       	mov	r5,r8
800085ba:	c0 28       	rjmp	800085be <_dtoa_r+0xb7a>
800085bc:	33 09       	mov	r9,48
800085be:	0a 98       	mov	r8,r5
800085c0:	11 7a       	ld.ub	r10,--r8
800085c2:	f2 0a 18 00 	cp.b	r10,r9
800085c6:	cf 90       	breq	800085b8 <_dtoa_r+0xb74>
800085c8:	50 66       	stdsp	sp[0x18],r6
800085ca:	04 9b       	mov	r11,r2
800085cc:	0e 9c       	mov	r12,r7
800085ce:	e0 a0 04 f3 	rcall	80008fb4 <_Bfree>
800085d2:	58 04       	cp.w	r4,0
800085d4:	c1 20       	breq	800085f8 <_dtoa_r+0xbb4>
800085d6:	40 4b       	lddsp	r11,sp[0x10]
800085d8:	08 3b       	cp.w	r11,r4
800085da:	5f 19       	srne	r9
800085dc:	58 0b       	cp.w	r11,0
800085de:	5f 18       	srne	r8
800085e0:	f3 e8 00 08 	and	r8,r9,r8
800085e4:	c0 40       	breq	800085ec <_dtoa_r+0xba8>
800085e6:	0e 9c       	mov	r12,r7
800085e8:	e0 a0 04 e6 	rcall	80008fb4 <_Bfree>
800085ec:	08 9b       	mov	r11,r4
800085ee:	0e 9c       	mov	r12,r7
800085f0:	e0 a0 04 e2 	rcall	80008fb4 <_Bfree>
800085f4:	c0 28       	rjmp	800085f8 <_dtoa_r+0xbb4>
800085f6:	50 66       	stdsp	sp[0x18],r6
800085f8:	0e 9c       	mov	r12,r7
800085fa:	06 9b       	mov	r11,r3
800085fc:	e0 a0 04 dc 	rcall	80008fb4 <_Bfree>
80008600:	30 08       	mov	r8,0
80008602:	aa 88       	st.b	r5[0x0],r8
80008604:	40 68       	lddsp	r8,sp[0x18]
80008606:	41 5a       	lddsp	r10,sp[0x54]
80008608:	2f f8       	sub	r8,-1
8000860a:	41 29       	lddsp	r9,sp[0x48]
8000860c:	95 08       	st.w	r10[0x0],r8
8000860e:	40 8c       	lddsp	r12,sp[0x20]
80008610:	58 09       	cp.w	r9,0
80008612:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80008616:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000861a:	2e 6d       	sub	sp,-104
8000861c:	d8 32       	popm	r0-r7,pc
8000861e:	d7 03       	nop

80008620 <__errno>:
80008620:	e0 68 01 1c 	mov	r8,284
80008624:	70 0c       	ld.w	r12,r8[0x0]
80008626:	2f 4c       	sub	r12,-12
80008628:	5e fc       	retal	r12
8000862a:	d7 03       	nop

8000862c <_fflush_r>:
8000862c:	d4 21       	pushm	r4-r7,lr
8000862e:	16 97       	mov	r7,r11
80008630:	18 96       	mov	r6,r12
80008632:	76 48       	ld.w	r8,r11[0x10]
80008634:	58 08       	cp.w	r8,0
80008636:	c7 f0       	breq	80008734 <_fflush_r+0x108>
80008638:	58 0c       	cp.w	r12,0
8000863a:	c0 50       	breq	80008644 <_fflush_r+0x18>
8000863c:	78 68       	ld.w	r8,r12[0x18]
8000863e:	58 08       	cp.w	r8,0
80008640:	c0 21       	brne	80008644 <_fflush_r+0x18>
80008642:	cc dc       	rcall	800087dc <__sinit>
80008644:	fe c8 df 74 	sub	r8,pc,-8332
80008648:	10 37       	cp.w	r7,r8
8000864a:	c0 31       	brne	80008650 <_fflush_r+0x24>
8000864c:	6c 07       	ld.w	r7,r6[0x0]
8000864e:	c0 c8       	rjmp	80008666 <_fflush_r+0x3a>
80008650:	fe c8 df 60 	sub	r8,pc,-8352
80008654:	10 37       	cp.w	r7,r8
80008656:	c0 31       	brne	8000865c <_fflush_r+0x30>
80008658:	6c 17       	ld.w	r7,r6[0x4]
8000865a:	c0 68       	rjmp	80008666 <_fflush_r+0x3a>
8000865c:	fe c8 df 4c 	sub	r8,pc,-8372
80008660:	10 37       	cp.w	r7,r8
80008662:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008666:	8e 6a       	ld.sh	r10,r7[0xc]
80008668:	14 98       	mov	r8,r10
8000866a:	ed ba 00 03 	bld	r10,0x3
8000866e:	c4 20       	breq	800086f2 <_fflush_r+0xc6>
80008670:	ab ba       	sbr	r10,0xb
80008672:	ae 6a       	st.h	r7[0xc],r10
80008674:	6e 18       	ld.w	r8,r7[0x4]
80008676:	58 08       	cp.w	r8,0
80008678:	e0 89 00 06 	brgt	80008684 <_fflush_r+0x58>
8000867c:	6f 08       	ld.w	r8,r7[0x40]
8000867e:	58 08       	cp.w	r8,0
80008680:	e0 8a 00 5a 	brle	80008734 <_fflush_r+0x108>
80008684:	6e b8       	ld.w	r8,r7[0x2c]
80008686:	58 08       	cp.w	r8,0
80008688:	c5 60       	breq	80008734 <_fflush_r+0x108>
8000868a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000868e:	c0 30       	breq	80008694 <_fflush_r+0x68>
80008690:	6f 55       	ld.w	r5,r7[0x54]
80008692:	c0 f8       	rjmp	800086b0 <_fflush_r+0x84>
80008694:	30 19       	mov	r9,1
80008696:	6e 8b       	ld.w	r11,r7[0x20]
80008698:	0c 9c       	mov	r12,r6
8000869a:	5d 18       	icall	r8
8000869c:	18 95       	mov	r5,r12
8000869e:	5b fc       	cp.w	r12,-1
800086a0:	c0 81       	brne	800086b0 <_fflush_r+0x84>
800086a2:	6c 38       	ld.w	r8,r6[0xc]
800086a4:	59 d8       	cp.w	r8,29
800086a6:	c4 70       	breq	80008734 <_fflush_r+0x108>
800086a8:	8e 68       	ld.sh	r8,r7[0xc]
800086aa:	a7 a8       	sbr	r8,0x6
800086ac:	ae 68       	st.h	r7[0xc],r8
800086ae:	d8 22       	popm	r4-r7,pc
800086b0:	8e 68       	ld.sh	r8,r7[0xc]
800086b2:	ed b8 00 02 	bld	r8,0x2
800086b6:	c0 91       	brne	800086c8 <_fflush_r+0x9c>
800086b8:	6e 18       	ld.w	r8,r7[0x4]
800086ba:	10 15       	sub	r5,r8
800086bc:	6e d8       	ld.w	r8,r7[0x34]
800086be:	58 08       	cp.w	r8,0
800086c0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800086c4:	eb d8 e1 15 	subne	r5,r5,r8
800086c8:	6e b8       	ld.w	r8,r7[0x2c]
800086ca:	0c 9c       	mov	r12,r6
800086cc:	30 09       	mov	r9,0
800086ce:	0a 9a       	mov	r10,r5
800086d0:	6e 8b       	ld.w	r11,r7[0x20]
800086d2:	5d 18       	icall	r8
800086d4:	8e 68       	ld.sh	r8,r7[0xc]
800086d6:	0a 3c       	cp.w	r12,r5
800086d8:	c2 61       	brne	80008724 <_fflush_r+0xf8>
800086da:	ab d8       	cbr	r8,0xb
800086dc:	30 0c       	mov	r12,0
800086de:	6e 49       	ld.w	r9,r7[0x10]
800086e0:	ae 68       	st.h	r7[0xc],r8
800086e2:	8f 1c       	st.w	r7[0x4],r12
800086e4:	8f 09       	st.w	r7[0x0],r9
800086e6:	ed b8 00 0c 	bld	r8,0xc
800086ea:	c2 51       	brne	80008734 <_fflush_r+0x108>
800086ec:	ef 45 00 54 	st.w	r7[84],r5
800086f0:	d8 22       	popm	r4-r7,pc
800086f2:	6e 45       	ld.w	r5,r7[0x10]
800086f4:	58 05       	cp.w	r5,0
800086f6:	c1 f0       	breq	80008734 <_fflush_r+0x108>
800086f8:	6e 04       	ld.w	r4,r7[0x0]
800086fa:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800086fe:	8f 05       	st.w	r7[0x0],r5
80008700:	f9 b8 01 00 	movne	r8,0
80008704:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008708:	0a 14       	sub	r4,r5
8000870a:	8f 28       	st.w	r7[0x8],r8
8000870c:	c1 18       	rjmp	8000872e <_fflush_r+0x102>
8000870e:	08 99       	mov	r9,r4
80008710:	0a 9a       	mov	r10,r5
80008712:	6e a8       	ld.w	r8,r7[0x28]
80008714:	6e 8b       	ld.w	r11,r7[0x20]
80008716:	0c 9c       	mov	r12,r6
80008718:	5d 18       	icall	r8
8000871a:	18 14       	sub	r4,r12
8000871c:	58 0c       	cp.w	r12,0
8000871e:	e0 89 00 07 	brgt	8000872c <_fflush_r+0x100>
80008722:	8e 68       	ld.sh	r8,r7[0xc]
80008724:	a7 a8       	sbr	r8,0x6
80008726:	3f fc       	mov	r12,-1
80008728:	ae 68       	st.h	r7[0xc],r8
8000872a:	d8 22       	popm	r4-r7,pc
8000872c:	18 05       	add	r5,r12
8000872e:	58 04       	cp.w	r4,0
80008730:	fe 99 ff ef 	brgt	8000870e <_fflush_r+0xe2>
80008734:	d8 2a       	popm	r4-r7,pc,r12=0
80008736:	d7 03       	nop

80008738 <__sfp_lock_acquire>:
80008738:	5e fc       	retal	r12

8000873a <__sfp_lock_release>:
8000873a:	5e fc       	retal	r12

8000873c <_cleanup_r>:
8000873c:	d4 01       	pushm	lr
8000873e:	fe cb f0 ae 	sub	r11,pc,-3922
80008742:	e0 a0 02 f7 	rcall	80008d30 <_fwalk>
80008746:	d8 02       	popm	pc

80008748 <__sfmoreglue>:
80008748:	d4 21       	pushm	r4-r7,lr
8000874a:	16 95       	mov	r5,r11
8000874c:	f6 06 10 5c 	mul	r6,r11,92
80008750:	ec cb ff f4 	sub	r11,r6,-12
80008754:	fe b0 e1 c6 	rcall	80004ae0 <_malloc_r>
80008758:	18 97       	mov	r7,r12
8000875a:	c0 90       	breq	8000876c <__sfmoreglue+0x24>
8000875c:	99 15       	st.w	r12[0x4],r5
8000875e:	30 0b       	mov	r11,0
80008760:	2f 4c       	sub	r12,-12
80008762:	0c 9a       	mov	r10,r6
80008764:	8f 2c       	st.w	r7[0x8],r12
80008766:	8f 0b       	st.w	r7[0x0],r11
80008768:	fe b0 e4 7c 	rcall	80005060 <memset>
8000876c:	0e 9c       	mov	r12,r7
8000876e:	d8 22       	popm	r4-r7,pc

80008770 <__sfp>:
80008770:	d4 21       	pushm	r4-r7,lr
80008772:	fe c8 e4 86 	sub	r8,pc,-7034
80008776:	18 96       	mov	r6,r12
80008778:	70 07       	ld.w	r7,r8[0x0]
8000877a:	6e 68       	ld.w	r8,r7[0x18]
8000877c:	58 08       	cp.w	r8,0
8000877e:	c0 31       	brne	80008784 <__sfp+0x14>
80008780:	0e 9c       	mov	r12,r7
80008782:	c2 dc       	rcall	800087dc <__sinit>
80008784:	ee c7 ff 28 	sub	r7,r7,-216
80008788:	30 05       	mov	r5,0
8000878a:	6e 2c       	ld.w	r12,r7[0x8]
8000878c:	6e 18       	ld.w	r8,r7[0x4]
8000878e:	c0 68       	rjmp	8000879a <__sfp+0x2a>
80008790:	98 69       	ld.sh	r9,r12[0xc]
80008792:	ea 09 19 00 	cp.h	r9,r5
80008796:	c1 10       	breq	800087b8 <__sfp+0x48>
80008798:	2a 4c       	sub	r12,-92
8000879a:	20 18       	sub	r8,1
8000879c:	cf a7       	brpl	80008790 <__sfp+0x20>
8000879e:	6e 08       	ld.w	r8,r7[0x0]
800087a0:	58 08       	cp.w	r8,0
800087a2:	c0 61       	brne	800087ae <__sfp+0x3e>
800087a4:	30 4b       	mov	r11,4
800087a6:	0c 9c       	mov	r12,r6
800087a8:	cd 0f       	rcall	80008748 <__sfmoreglue>
800087aa:	8f 0c       	st.w	r7[0x0],r12
800087ac:	c0 30       	breq	800087b2 <__sfp+0x42>
800087ae:	6e 07       	ld.w	r7,r7[0x0]
800087b0:	ce db       	rjmp	8000878a <__sfp+0x1a>
800087b2:	30 c8       	mov	r8,12
800087b4:	8d 38       	st.w	r6[0xc],r8
800087b6:	d8 22       	popm	r4-r7,pc
800087b8:	30 08       	mov	r8,0
800087ba:	f9 48 00 4c 	st.w	r12[76],r8
800087be:	99 08       	st.w	r12[0x0],r8
800087c0:	99 28       	st.w	r12[0x8],r8
800087c2:	99 18       	st.w	r12[0x4],r8
800087c4:	99 48       	st.w	r12[0x10],r8
800087c6:	99 58       	st.w	r12[0x14],r8
800087c8:	99 68       	st.w	r12[0x18],r8
800087ca:	99 d8       	st.w	r12[0x34],r8
800087cc:	99 e8       	st.w	r12[0x38],r8
800087ce:	f9 48 00 48 	st.w	r12[72],r8
800087d2:	3f f8       	mov	r8,-1
800087d4:	b8 78       	st.h	r12[0xe],r8
800087d6:	30 18       	mov	r8,1
800087d8:	b8 68       	st.h	r12[0xc],r8
800087da:	d8 22       	popm	r4-r7,pc

800087dc <__sinit>:
800087dc:	d4 21       	pushm	r4-r7,lr
800087de:	18 96       	mov	r6,r12
800087e0:	78 67       	ld.w	r7,r12[0x18]
800087e2:	58 07       	cp.w	r7,0
800087e4:	c4 91       	brne	80008876 <__sinit+0x9a>
800087e6:	fe c8 00 aa 	sub	r8,pc,170
800087ea:	30 15       	mov	r5,1
800087ec:	99 a8       	st.w	r12[0x28],r8
800087ee:	f9 47 00 d8 	st.w	r12[216],r7
800087f2:	f9 47 00 dc 	st.w	r12[220],r7
800087f6:	f9 47 00 e0 	st.w	r12[224],r7
800087fa:	99 65       	st.w	r12[0x18],r5
800087fc:	cb af       	rcall	80008770 <__sfp>
800087fe:	8d 0c       	st.w	r6[0x0],r12
80008800:	0c 9c       	mov	r12,r6
80008802:	cb 7f       	rcall	80008770 <__sfp>
80008804:	8d 1c       	st.w	r6[0x4],r12
80008806:	0c 9c       	mov	r12,r6
80008808:	cb 4f       	rcall	80008770 <__sfp>
8000880a:	6c 09       	ld.w	r9,r6[0x0]
8000880c:	30 48       	mov	r8,4
8000880e:	93 07       	st.w	r9[0x0],r7
80008810:	b2 68       	st.h	r9[0xc],r8
80008812:	93 17       	st.w	r9[0x4],r7
80008814:	93 27       	st.w	r9[0x8],r7
80008816:	6c 18       	ld.w	r8,r6[0x4]
80008818:	b2 77       	st.h	r9[0xe],r7
8000881a:	93 47       	st.w	r9[0x10],r7
8000881c:	93 57       	st.w	r9[0x14],r7
8000881e:	93 67       	st.w	r9[0x18],r7
80008820:	93 89       	st.w	r9[0x20],r9
80008822:	91 07       	st.w	r8[0x0],r7
80008824:	91 17       	st.w	r8[0x4],r7
80008826:	91 27       	st.w	r8[0x8],r7
80008828:	fe ce f3 24 	sub	lr,pc,-3292
8000882c:	fe cb f3 54 	sub	r11,pc,-3244
80008830:	93 9e       	st.w	r9[0x24],lr
80008832:	93 ab       	st.w	r9[0x28],r11
80008834:	fe ca f3 7c 	sub	r10,pc,-3204
80008838:	fe c4 f3 88 	sub	r4,pc,-3192
8000883c:	93 ba       	st.w	r9[0x2c],r10
8000883e:	93 c4       	st.w	r9[0x30],r4
80008840:	30 99       	mov	r9,9
80008842:	b0 69       	st.h	r8[0xc],r9
80008844:	b0 75       	st.h	r8[0xe],r5
80008846:	91 c4       	st.w	r8[0x30],r4
80008848:	91 47       	st.w	r8[0x10],r7
8000884a:	91 57       	st.w	r8[0x14],r7
8000884c:	91 67       	st.w	r8[0x18],r7
8000884e:	91 88       	st.w	r8[0x20],r8
80008850:	91 9e       	st.w	r8[0x24],lr
80008852:	91 ab       	st.w	r8[0x28],r11
80008854:	91 ba       	st.w	r8[0x2c],r10
80008856:	8d 2c       	st.w	r6[0x8],r12
80008858:	31 28       	mov	r8,18
8000885a:	99 07       	st.w	r12[0x0],r7
8000885c:	b8 68       	st.h	r12[0xc],r8
8000885e:	99 17       	st.w	r12[0x4],r7
80008860:	99 27       	st.w	r12[0x8],r7
80008862:	30 28       	mov	r8,2
80008864:	b8 78       	st.h	r12[0xe],r8
80008866:	99 c4       	st.w	r12[0x30],r4
80008868:	99 67       	st.w	r12[0x18],r7
8000886a:	99 9e       	st.w	r12[0x24],lr
8000886c:	99 ab       	st.w	r12[0x28],r11
8000886e:	99 ba       	st.w	r12[0x2c],r10
80008870:	99 47       	st.w	r12[0x10],r7
80008872:	99 57       	st.w	r12[0x14],r7
80008874:	99 8c       	st.w	r12[0x20],r12
80008876:	d8 22       	popm	r4-r7,pc

80008878 <_malloc_trim_r>:
80008878:	d4 21       	pushm	r4-r7,lr
8000887a:	16 95       	mov	r5,r11
8000887c:	18 97       	mov	r7,r12
8000887e:	fe b0 d5 db 	rcall	80003434 <__malloc_lock>
80008882:	e0 64 01 20 	mov	r4,288
80008886:	68 28       	ld.w	r8,r4[0x8]
80008888:	70 16       	ld.w	r6,r8[0x4]
8000888a:	e0 16 ff fc 	andl	r6,0xfffc
8000888e:	ec c8 ff 91 	sub	r8,r6,-111
80008892:	f0 05 01 05 	sub	r5,r8,r5
80008896:	e0 15 ff 80 	andl	r5,0xff80
8000889a:	ea c5 00 80 	sub	r5,r5,128
8000889e:	e0 45 00 7f 	cp.w	r5,127
800088a2:	e0 8a 00 25 	brle	800088ec <_malloc_trim_r+0x74>
800088a6:	30 0b       	mov	r11,0
800088a8:	0e 9c       	mov	r12,r7
800088aa:	fe b0 e5 43 	rcall	80005330 <_sbrk_r>
800088ae:	68 28       	ld.w	r8,r4[0x8]
800088b0:	0c 08       	add	r8,r6
800088b2:	10 3c       	cp.w	r12,r8
800088b4:	c1 c1       	brne	800088ec <_malloc_trim_r+0x74>
800088b6:	ea 0b 11 00 	rsub	r11,r5,0
800088ba:	0e 9c       	mov	r12,r7
800088bc:	fe b0 e5 3a 	rcall	80005330 <_sbrk_r>
800088c0:	5b fc       	cp.w	r12,-1
800088c2:	c1 91       	brne	800088f4 <_malloc_trim_r+0x7c>
800088c4:	30 0b       	mov	r11,0
800088c6:	0e 9c       	mov	r12,r7
800088c8:	fe b0 e5 34 	rcall	80005330 <_sbrk_r>
800088cc:	68 28       	ld.w	r8,r4[0x8]
800088ce:	f8 08 01 09 	sub	r9,r12,r8
800088d2:	58 f9       	cp.w	r9,15
800088d4:	e0 8a 00 0c 	brle	800088ec <_malloc_trim_r+0x74>
800088d8:	a1 a9       	sbr	r9,0x0
800088da:	91 19       	st.w	r8[0x4],r9
800088dc:	e0 68 05 2c 	mov	r8,1324
800088e0:	70 09       	ld.w	r9,r8[0x0]
800088e2:	e0 68 07 a8 	mov	r8,1960
800088e6:	f8 09 01 09 	sub	r9,r12,r9
800088ea:	91 09       	st.w	r8[0x0],r9
800088ec:	0e 9c       	mov	r12,r7
800088ee:	fe b0 d5 a9 	rcall	80003440 <__malloc_unlock>
800088f2:	d8 2a       	popm	r4-r7,pc,r12=0
800088f4:	68 28       	ld.w	r8,r4[0x8]
800088f6:	0a 16       	sub	r6,r5
800088f8:	a1 a6       	sbr	r6,0x0
800088fa:	91 16       	st.w	r8[0x4],r6
800088fc:	e0 68 07 a8 	mov	r8,1960
80008900:	70 09       	ld.w	r9,r8[0x0]
80008902:	0a 19       	sub	r9,r5
80008904:	0e 9c       	mov	r12,r7
80008906:	91 09       	st.w	r8[0x0],r9
80008908:	fe b0 d5 9c 	rcall	80003440 <__malloc_unlock>
8000890c:	da 2a       	popm	r4-r7,pc,r12=1
8000890e:	d7 03       	nop

80008910 <_free_r>:
80008910:	d4 21       	pushm	r4-r7,lr
80008912:	16 96       	mov	r6,r11
80008914:	18 97       	mov	r7,r12
80008916:	58 0b       	cp.w	r11,0
80008918:	e0 80 00 c0 	breq	80008a98 <_free_r+0x188>
8000891c:	fe b0 d5 8c 	rcall	80003434 <__malloc_lock>
80008920:	20 86       	sub	r6,8
80008922:	e0 6a 01 20 	mov	r10,288
80008926:	6c 18       	ld.w	r8,r6[0x4]
80008928:	74 2e       	ld.w	lr,r10[0x8]
8000892a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000892e:	a1 c8       	cbr	r8,0x0
80008930:	ec 08 00 09 	add	r9,r6,r8
80008934:	72 1b       	ld.w	r11,r9[0x4]
80008936:	e0 1b ff fc 	andl	r11,0xfffc
8000893a:	1c 39       	cp.w	r9,lr
8000893c:	c1 e1       	brne	80008978 <_free_r+0x68>
8000893e:	f6 08 00 08 	add	r8,r11,r8
80008942:	58 0c       	cp.w	r12,0
80008944:	c0 81       	brne	80008954 <_free_r+0x44>
80008946:	6c 09       	ld.w	r9,r6[0x0]
80008948:	12 16       	sub	r6,r9
8000894a:	12 08       	add	r8,r9
8000894c:	6c 3b       	ld.w	r11,r6[0xc]
8000894e:	6c 29       	ld.w	r9,r6[0x8]
80008950:	97 29       	st.w	r11[0x8],r9
80008952:	93 3b       	st.w	r9[0xc],r11
80008954:	10 99       	mov	r9,r8
80008956:	95 26       	st.w	r10[0x8],r6
80008958:	a1 a9       	sbr	r9,0x0
8000895a:	8d 19       	st.w	r6[0x4],r9
8000895c:	e0 69 05 28 	mov	r9,1320
80008960:	72 09       	ld.w	r9,r9[0x0]
80008962:	12 38       	cp.w	r8,r9
80008964:	c0 63       	brcs	80008970 <_free_r+0x60>
80008966:	e0 68 07 a4 	mov	r8,1956
8000896a:	0e 9c       	mov	r12,r7
8000896c:	70 0b       	ld.w	r11,r8[0x0]
8000896e:	c8 5f       	rcall	80008878 <_malloc_trim_r>
80008970:	0e 9c       	mov	r12,r7
80008972:	fe b0 d5 67 	rcall	80003440 <__malloc_unlock>
80008976:	d8 22       	popm	r4-r7,pc
80008978:	93 1b       	st.w	r9[0x4],r11
8000897a:	58 0c       	cp.w	r12,0
8000897c:	c0 30       	breq	80008982 <_free_r+0x72>
8000897e:	30 0c       	mov	r12,0
80008980:	c1 08       	rjmp	800089a0 <_free_r+0x90>
80008982:	6c 0e       	ld.w	lr,r6[0x0]
80008984:	f4 c5 ff f8 	sub	r5,r10,-8
80008988:	1c 16       	sub	r6,lr
8000898a:	1c 08       	add	r8,lr
8000898c:	6c 2e       	ld.w	lr,r6[0x8]
8000898e:	0a 3e       	cp.w	lr,r5
80008990:	f9 bc 00 01 	moveq	r12,1
80008994:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008998:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000899c:	fd f5 1a 03 	st.wne	lr[0xc],r5
800089a0:	f2 0b 00 0e 	add	lr,r9,r11
800089a4:	7c 1e       	ld.w	lr,lr[0x4]
800089a6:	ed be 00 00 	bld	lr,0x0
800089aa:	c1 40       	breq	800089d2 <_free_r+0xc2>
800089ac:	16 08       	add	r8,r11
800089ae:	58 0c       	cp.w	r12,0
800089b0:	c0 d1       	brne	800089ca <_free_r+0xba>
800089b2:	e0 6e 01 20 	mov	lr,288
800089b6:	72 2b       	ld.w	r11,r9[0x8]
800089b8:	2f 8e       	sub	lr,-8
800089ba:	1c 3b       	cp.w	r11,lr
800089bc:	c0 71       	brne	800089ca <_free_r+0xba>
800089be:	97 36       	st.w	r11[0xc],r6
800089c0:	97 26       	st.w	r11[0x8],r6
800089c2:	8d 2b       	st.w	r6[0x8],r11
800089c4:	8d 3b       	st.w	r6[0xc],r11
800089c6:	30 1c       	mov	r12,1
800089c8:	c0 58       	rjmp	800089d2 <_free_r+0xc2>
800089ca:	72 2b       	ld.w	r11,r9[0x8]
800089cc:	72 39       	ld.w	r9,r9[0xc]
800089ce:	93 2b       	st.w	r9[0x8],r11
800089d0:	97 39       	st.w	r11[0xc],r9
800089d2:	10 99       	mov	r9,r8
800089d4:	ec 08 09 08 	st.w	r6[r8],r8
800089d8:	a1 a9       	sbr	r9,0x0
800089da:	8d 19       	st.w	r6[0x4],r9
800089dc:	58 0c       	cp.w	r12,0
800089de:	c5 a1       	brne	80008a92 <_free_r+0x182>
800089e0:	e0 48 01 ff 	cp.w	r8,511
800089e4:	e0 8b 00 13 	brhi	80008a0a <_free_r+0xfa>
800089e8:	a3 98       	lsr	r8,0x3
800089ea:	f4 08 00 39 	add	r9,r10,r8<<0x3
800089ee:	72 2b       	ld.w	r11,r9[0x8]
800089f0:	8d 39       	st.w	r6[0xc],r9
800089f2:	8d 2b       	st.w	r6[0x8],r11
800089f4:	97 36       	st.w	r11[0xc],r6
800089f6:	93 26       	st.w	r9[0x8],r6
800089f8:	a3 48       	asr	r8,0x2
800089fa:	74 19       	ld.w	r9,r10[0x4]
800089fc:	30 1b       	mov	r11,1
800089fe:	f6 08 09 48 	lsl	r8,r11,r8
80008a02:	f3 e8 10 08 	or	r8,r9,r8
80008a06:	95 18       	st.w	r10[0x4],r8
80008a08:	c4 58       	rjmp	80008a92 <_free_r+0x182>
80008a0a:	f0 0b 16 09 	lsr	r11,r8,0x9
80008a0e:	58 4b       	cp.w	r11,4
80008a10:	e0 8b 00 06 	brhi	80008a1c <_free_r+0x10c>
80008a14:	f0 0b 16 06 	lsr	r11,r8,0x6
80008a18:	2c 8b       	sub	r11,-56
80008a1a:	c2 08       	rjmp	80008a5a <_free_r+0x14a>
80008a1c:	59 4b       	cp.w	r11,20
80008a1e:	e0 8b 00 04 	brhi	80008a26 <_free_r+0x116>
80008a22:	2a 5b       	sub	r11,-91
80008a24:	c1 b8       	rjmp	80008a5a <_free_r+0x14a>
80008a26:	e0 4b 00 54 	cp.w	r11,84
80008a2a:	e0 8b 00 06 	brhi	80008a36 <_free_r+0x126>
80008a2e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008a32:	29 2b       	sub	r11,-110
80008a34:	c1 38       	rjmp	80008a5a <_free_r+0x14a>
80008a36:	e0 4b 01 54 	cp.w	r11,340
80008a3a:	e0 8b 00 06 	brhi	80008a46 <_free_r+0x136>
80008a3e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008a42:	28 9b       	sub	r11,-119
80008a44:	c0 b8       	rjmp	80008a5a <_free_r+0x14a>
80008a46:	e0 4b 05 54 	cp.w	r11,1364
80008a4a:	e0 88 00 05 	brls	80008a54 <_free_r+0x144>
80008a4e:	37 eb       	mov	r11,126
80008a50:	c0 58       	rjmp	80008a5a <_free_r+0x14a>
80008a52:	d7 03       	nop
80008a54:	f0 0b 16 12 	lsr	r11,r8,0x12
80008a58:	28 4b       	sub	r11,-124
80008a5a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80008a5e:	78 29       	ld.w	r9,r12[0x8]
80008a60:	18 39       	cp.w	r9,r12
80008a62:	c0 e1       	brne	80008a7e <_free_r+0x16e>
80008a64:	74 18       	ld.w	r8,r10[0x4]
80008a66:	a3 4b       	asr	r11,0x2
80008a68:	30 1c       	mov	r12,1
80008a6a:	f8 0b 09 4b 	lsl	r11,r12,r11
80008a6e:	f1 eb 10 0b 	or	r11,r8,r11
80008a72:	12 98       	mov	r8,r9
80008a74:	95 1b       	st.w	r10[0x4],r11
80008a76:	c0 a8       	rjmp	80008a8a <_free_r+0x17a>
80008a78:	72 29       	ld.w	r9,r9[0x8]
80008a7a:	18 39       	cp.w	r9,r12
80008a7c:	c0 60       	breq	80008a88 <_free_r+0x178>
80008a7e:	72 1a       	ld.w	r10,r9[0x4]
80008a80:	e0 1a ff fc 	andl	r10,0xfffc
80008a84:	14 38       	cp.w	r8,r10
80008a86:	cf 93       	brcs	80008a78 <_free_r+0x168>
80008a88:	72 38       	ld.w	r8,r9[0xc]
80008a8a:	8d 38       	st.w	r6[0xc],r8
80008a8c:	8d 29       	st.w	r6[0x8],r9
80008a8e:	93 36       	st.w	r9[0xc],r6
80008a90:	91 26       	st.w	r8[0x8],r6
80008a92:	0e 9c       	mov	r12,r7
80008a94:	fe b0 d4 d6 	rcall	80003440 <__malloc_unlock>
80008a98:	d8 22       	popm	r4-r7,pc
80008a9a:	d7 03       	nop

80008a9c <__sfvwrite_r>:
80008a9c:	d4 31       	pushm	r0-r7,lr
80008a9e:	20 3d       	sub	sp,12
80008aa0:	14 94       	mov	r4,r10
80008aa2:	18 95       	mov	r5,r12
80008aa4:	16 97       	mov	r7,r11
80008aa6:	74 28       	ld.w	r8,r10[0x8]
80008aa8:	58 08       	cp.w	r8,0
80008aaa:	e0 80 01 40 	breq	80008d2a <__sfvwrite_r+0x28e>
80008aae:	96 68       	ld.sh	r8,r11[0xc]
80008ab0:	ed b8 00 03 	bld	r8,0x3
80008ab4:	c0 41       	brne	80008abc <__sfvwrite_r+0x20>
80008ab6:	76 48       	ld.w	r8,r11[0x10]
80008ab8:	58 08       	cp.w	r8,0
80008aba:	c0 c1       	brne	80008ad2 <__sfvwrite_r+0x36>
80008abc:	0e 9b       	mov	r11,r7
80008abe:	0a 9c       	mov	r12,r5
80008ac0:	fe b0 f6 0c 	rcall	800076d8 <__swsetup_r>
80008ac4:	c0 70       	breq	80008ad2 <__sfvwrite_r+0x36>
80008ac6:	8e 68       	ld.sh	r8,r7[0xc]
80008ac8:	a7 a8       	sbr	r8,0x6
80008aca:	ae 68       	st.h	r7[0xc],r8
80008acc:	30 98       	mov	r8,9
80008ace:	8b 38       	st.w	r5[0xc],r8
80008ad0:	c2 b9       	rjmp	80008d26 <__sfvwrite_r+0x28a>
80008ad2:	8e 63       	ld.sh	r3,r7[0xc]
80008ad4:	68 00       	ld.w	r0,r4[0x0]
80008ad6:	06 96       	mov	r6,r3
80008ad8:	e2 16 00 02 	andl	r6,0x2,COH
80008adc:	c2 10       	breq	80008b1e <__sfvwrite_r+0x82>
80008ade:	30 03       	mov	r3,0
80008ae0:	e0 62 04 00 	mov	r2,1024
80008ae4:	06 96       	mov	r6,r3
80008ae6:	c0 48       	rjmp	80008aee <__sfvwrite_r+0x52>
80008ae8:	60 03       	ld.w	r3,r0[0x0]
80008aea:	60 16       	ld.w	r6,r0[0x4]
80008aec:	2f 80       	sub	r0,-8
80008aee:	58 06       	cp.w	r6,0
80008af0:	cf c0       	breq	80008ae8 <__sfvwrite_r+0x4c>
80008af2:	e0 46 04 00 	cp.w	r6,1024
80008af6:	ec 09 17 80 	movls	r9,r6
80008afa:	e4 09 17 b0 	movhi	r9,r2
80008afe:	06 9a       	mov	r10,r3
80008b00:	6e a8       	ld.w	r8,r7[0x28]
80008b02:	6e 8b       	ld.w	r11,r7[0x20]
80008b04:	0a 9c       	mov	r12,r5
80008b06:	5d 18       	icall	r8
80008b08:	18 16       	sub	r6,r12
80008b0a:	58 0c       	cp.w	r12,0
80008b0c:	e0 8a 01 0a 	brle	80008d20 <__sfvwrite_r+0x284>
80008b10:	68 28       	ld.w	r8,r4[0x8]
80008b12:	18 18       	sub	r8,r12
80008b14:	89 28       	st.w	r4[0x8],r8
80008b16:	e0 80 01 0a 	breq	80008d2a <__sfvwrite_r+0x28e>
80008b1a:	18 03       	add	r3,r12
80008b1c:	ce 9b       	rjmp	80008aee <__sfvwrite_r+0x52>
80008b1e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008b22:	c0 70       	breq	80008b30 <__sfvwrite_r+0x94>
80008b24:	50 06       	stdsp	sp[0x0],r6
80008b26:	0c 93       	mov	r3,r6
80008b28:	0c 91       	mov	r1,r6
80008b2a:	50 15       	stdsp	sp[0x4],r5
80008b2c:	08 92       	mov	r2,r4
80008b2e:	c9 c8       	rjmp	80008c66 <__sfvwrite_r+0x1ca>
80008b30:	06 96       	mov	r6,r3
80008b32:	08 91       	mov	r1,r4
80008b34:	c0 48       	rjmp	80008b3c <__sfvwrite_r+0xa0>
80008b36:	60 03       	ld.w	r3,r0[0x0]
80008b38:	60 16       	ld.w	r6,r0[0x4]
80008b3a:	2f 80       	sub	r0,-8
80008b3c:	58 06       	cp.w	r6,0
80008b3e:	cf c0       	breq	80008b36 <__sfvwrite_r+0x9a>
80008b40:	8e 68       	ld.sh	r8,r7[0xc]
80008b42:	6e 24       	ld.w	r4,r7[0x8]
80008b44:	10 99       	mov	r9,r8
80008b46:	e2 19 02 00 	andl	r9,0x200,COH
80008b4a:	c5 50       	breq	80008bf4 <__sfvwrite_r+0x158>
80008b4c:	08 36       	cp.w	r6,r4
80008b4e:	c4 43       	brcs	80008bd6 <__sfvwrite_r+0x13a>
80008b50:	10 99       	mov	r9,r8
80008b52:	e2 19 04 80 	andl	r9,0x480,COH
80008b56:	c4 00       	breq	80008bd6 <__sfvwrite_r+0x13a>
80008b58:	6e 4b       	ld.w	r11,r7[0x10]
80008b5a:	6e 09       	ld.w	r9,r7[0x0]
80008b5c:	16 19       	sub	r9,r11
80008b5e:	50 09       	stdsp	sp[0x0],r9
80008b60:	6e 59       	ld.w	r9,r7[0x14]
80008b62:	10 9c       	mov	r12,r8
80008b64:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80008b68:	30 28       	mov	r8,2
80008b6a:	f4 08 0c 08 	divs	r8,r10,r8
80008b6e:	fa e9 00 04 	st.d	sp[4],r8
80008b72:	10 94       	mov	r4,r8
80008b74:	40 09       	lddsp	r9,sp[0x0]
80008b76:	e2 1c 04 00 	andl	r12,0x400,COH
80008b7a:	2f f9       	sub	r9,-1
80008b7c:	0c 09       	add	r9,r6
80008b7e:	12 38       	cp.w	r8,r9
80008b80:	f2 04 17 30 	movlo	r4,r9
80008b84:	58 0c       	cp.w	r12,0
80008b86:	c1 10       	breq	80008ba8 <__sfvwrite_r+0x10c>
80008b88:	08 9b       	mov	r11,r4
80008b8a:	0a 9c       	mov	r12,r5
80008b8c:	fe b0 df aa 	rcall	80004ae0 <_malloc_r>
80008b90:	18 92       	mov	r2,r12
80008b92:	c1 40       	breq	80008bba <__sfvwrite_r+0x11e>
80008b94:	40 0a       	lddsp	r10,sp[0x0]
80008b96:	6e 4b       	ld.w	r11,r7[0x10]
80008b98:	fe b0 e1 c0 	rcall	80004f18 <memcpy>
80008b9c:	8e 68       	ld.sh	r8,r7[0xc]
80008b9e:	e0 18 fb 7f 	andl	r8,0xfb7f
80008ba2:	a7 b8       	sbr	r8,0x7
80008ba4:	ae 68       	st.h	r7[0xc],r8
80008ba6:	c0 d8       	rjmp	80008bc0 <__sfvwrite_r+0x124>
80008ba8:	08 9a       	mov	r10,r4
80008baa:	0a 9c       	mov	r12,r5
80008bac:	fe b0 e2 62 	rcall	80005070 <_realloc_r>
80008bb0:	18 92       	mov	r2,r12
80008bb2:	c0 71       	brne	80008bc0 <__sfvwrite_r+0x124>
80008bb4:	6e 4b       	ld.w	r11,r7[0x10]
80008bb6:	0a 9c       	mov	r12,r5
80008bb8:	ca ce       	rcall	80008910 <_free_r>
80008bba:	30 c8       	mov	r8,12
80008bbc:	8b 38       	st.w	r5[0xc],r8
80008bbe:	cb 18       	rjmp	80008d20 <__sfvwrite_r+0x284>
80008bc0:	40 0a       	lddsp	r10,sp[0x0]
80008bc2:	40 09       	lddsp	r9,sp[0x0]
80008bc4:	e8 0a 01 0a 	sub	r10,r4,r10
80008bc8:	e4 09 00 08 	add	r8,r2,r9
80008bcc:	8f 54       	st.w	r7[0x14],r4
80008bce:	8f 2a       	st.w	r7[0x8],r10
80008bd0:	8f 08       	st.w	r7[0x0],r8
80008bd2:	8f 42       	st.w	r7[0x10],r2
80008bd4:	0c 94       	mov	r4,r6
80008bd6:	08 36       	cp.w	r6,r4
80008bd8:	ec 04 17 30 	movlo	r4,r6
80008bdc:	06 9b       	mov	r11,r3
80008bde:	08 9a       	mov	r10,r4
80008be0:	6e 0c       	ld.w	r12,r7[0x0]
80008be2:	c3 ad       	rcall	80008e56 <memmove>
80008be4:	6e 08       	ld.w	r8,r7[0x0]
80008be6:	08 08       	add	r8,r4
80008be8:	8f 08       	st.w	r7[0x0],r8
80008bea:	6e 28       	ld.w	r8,r7[0x8]
80008bec:	08 18       	sub	r8,r4
80008bee:	0c 94       	mov	r4,r6
80008bf0:	8f 28       	st.w	r7[0x8],r8
80008bf2:	c2 e8       	rjmp	80008c4e <__sfvwrite_r+0x1b2>
80008bf4:	08 36       	cp.w	r6,r4
80008bf6:	5f ba       	srhi	r10
80008bf8:	6e 0c       	ld.w	r12,r7[0x0]
80008bfa:	6e 48       	ld.w	r8,r7[0x10]
80008bfc:	10 3c       	cp.w	r12,r8
80008bfe:	5f b8       	srhi	r8
80008c00:	f5 e8 00 08 	and	r8,r10,r8
80008c04:	f2 08 18 00 	cp.b	r8,r9
80008c08:	c0 d0       	breq	80008c22 <__sfvwrite_r+0x186>
80008c0a:	06 9b       	mov	r11,r3
80008c0c:	08 9a       	mov	r10,r4
80008c0e:	c2 4d       	rcall	80008e56 <memmove>
80008c10:	6e 08       	ld.w	r8,r7[0x0]
80008c12:	08 08       	add	r8,r4
80008c14:	0e 9b       	mov	r11,r7
80008c16:	8f 08       	st.w	r7[0x0],r8
80008c18:	0a 9c       	mov	r12,r5
80008c1a:	fe b0 fd 09 	rcall	8000862c <_fflush_r>
80008c1e:	c1 80       	breq	80008c4e <__sfvwrite_r+0x1b2>
80008c20:	c8 08       	rjmp	80008d20 <__sfvwrite_r+0x284>
80008c22:	6e 59       	ld.w	r9,r7[0x14]
80008c24:	12 36       	cp.w	r6,r9
80008c26:	c0 a3       	brcs	80008c3a <__sfvwrite_r+0x19e>
80008c28:	6e a8       	ld.w	r8,r7[0x28]
80008c2a:	06 9a       	mov	r10,r3
80008c2c:	6e 8b       	ld.w	r11,r7[0x20]
80008c2e:	0a 9c       	mov	r12,r5
80008c30:	5d 18       	icall	r8
80008c32:	18 94       	mov	r4,r12
80008c34:	e0 89 00 0d 	brgt	80008c4e <__sfvwrite_r+0x1b2>
80008c38:	c7 48       	rjmp	80008d20 <__sfvwrite_r+0x284>
80008c3a:	0c 9a       	mov	r10,r6
80008c3c:	06 9b       	mov	r11,r3
80008c3e:	c0 cd       	rcall	80008e56 <memmove>
80008c40:	6e 08       	ld.w	r8,r7[0x0]
80008c42:	0c 08       	add	r8,r6
80008c44:	0c 94       	mov	r4,r6
80008c46:	8f 08       	st.w	r7[0x0],r8
80008c48:	6e 28       	ld.w	r8,r7[0x8]
80008c4a:	0c 18       	sub	r8,r6
80008c4c:	8f 28       	st.w	r7[0x8],r8
80008c4e:	62 28       	ld.w	r8,r1[0x8]
80008c50:	08 18       	sub	r8,r4
80008c52:	83 28       	st.w	r1[0x8],r8
80008c54:	c6 b0       	breq	80008d2a <__sfvwrite_r+0x28e>
80008c56:	08 16       	sub	r6,r4
80008c58:	08 03       	add	r3,r4
80008c5a:	c7 1b       	rjmp	80008b3c <__sfvwrite_r+0xa0>
80008c5c:	60 03       	ld.w	r3,r0[0x0]
80008c5e:	60 11       	ld.w	r1,r0[0x4]
80008c60:	30 08       	mov	r8,0
80008c62:	2f 80       	sub	r0,-8
80008c64:	50 08       	stdsp	sp[0x0],r8
80008c66:	58 01       	cp.w	r1,0
80008c68:	cf a0       	breq	80008c5c <__sfvwrite_r+0x1c0>
80008c6a:	40 0a       	lddsp	r10,sp[0x0]
80008c6c:	58 0a       	cp.w	r10,0
80008c6e:	c1 41       	brne	80008c96 <__sfvwrite_r+0x1fa>
80008c70:	e2 c6 ff ff 	sub	r6,r1,-1
80008c74:	02 9a       	mov	r10,r1
80008c76:	30 ab       	mov	r11,10
80008c78:	06 9c       	mov	r12,r3
80008c7a:	ce 3c       	rcall	80008e40 <memchr>
80008c7c:	f8 c8 ff ff 	sub	r8,r12,-1
80008c80:	58 0c       	cp.w	r12,0
80008c82:	f1 d3 e1 16 	subne	r6,r8,r3
80008c86:	f9 b9 01 01 	movne	r9,1
80008c8a:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008c8e:	f9 b8 00 01 	moveq	r8,1
80008c92:	fb f8 0a 00 	st.weq	sp[0x0],r8
80008c96:	02 36       	cp.w	r6,r1
80008c98:	ec 04 17 80 	movls	r4,r6
80008c9c:	e2 04 17 b0 	movhi	r4,r1
80008ca0:	6e 59       	ld.w	r9,r7[0x14]
80008ca2:	6e 25       	ld.w	r5,r7[0x8]
80008ca4:	f2 05 00 05 	add	r5,r9,r5
80008ca8:	0a 34       	cp.w	r4,r5
80008caa:	5f 9a       	srgt	r10
80008cac:	6e 0c       	ld.w	r12,r7[0x0]
80008cae:	6e 48       	ld.w	r8,r7[0x10]
80008cb0:	10 3c       	cp.w	r12,r8
80008cb2:	5f b8       	srhi	r8
80008cb4:	f5 e8 00 08 	and	r8,r10,r8
80008cb8:	30 0a       	mov	r10,0
80008cba:	f4 08 18 00 	cp.b	r8,r10
80008cbe:	c0 d0       	breq	80008cd8 <__sfvwrite_r+0x23c>
80008cc0:	06 9b       	mov	r11,r3
80008cc2:	0a 9a       	mov	r10,r5
80008cc4:	cc 9c       	rcall	80008e56 <memmove>
80008cc6:	6e 08       	ld.w	r8,r7[0x0]
80008cc8:	0a 08       	add	r8,r5
80008cca:	0e 9b       	mov	r11,r7
80008ccc:	8f 08       	st.w	r7[0x0],r8
80008cce:	40 1c       	lddsp	r12,sp[0x4]
80008cd0:	fe b0 fc ae 	rcall	8000862c <_fflush_r>
80008cd4:	c1 70       	breq	80008d02 <__sfvwrite_r+0x266>
80008cd6:	c2 58       	rjmp	80008d20 <__sfvwrite_r+0x284>
80008cd8:	12 34       	cp.w	r4,r9
80008cda:	c0 a5       	brlt	80008cee <__sfvwrite_r+0x252>
80008cdc:	6e a8       	ld.w	r8,r7[0x28]
80008cde:	06 9a       	mov	r10,r3
80008ce0:	6e 8b       	ld.w	r11,r7[0x20]
80008ce2:	40 1c       	lddsp	r12,sp[0x4]
80008ce4:	5d 18       	icall	r8
80008ce6:	18 95       	mov	r5,r12
80008ce8:	e0 89 00 0d 	brgt	80008d02 <__sfvwrite_r+0x266>
80008cec:	c1 a8       	rjmp	80008d20 <__sfvwrite_r+0x284>
80008cee:	08 9a       	mov	r10,r4
80008cf0:	06 9b       	mov	r11,r3
80008cf2:	cb 2c       	rcall	80008e56 <memmove>
80008cf4:	6e 08       	ld.w	r8,r7[0x0]
80008cf6:	08 08       	add	r8,r4
80008cf8:	08 95       	mov	r5,r4
80008cfa:	8f 08       	st.w	r7[0x0],r8
80008cfc:	6e 28       	ld.w	r8,r7[0x8]
80008cfe:	08 18       	sub	r8,r4
80008d00:	8f 28       	st.w	r7[0x8],r8
80008d02:	0a 16       	sub	r6,r5
80008d04:	c0 71       	brne	80008d12 <__sfvwrite_r+0x276>
80008d06:	0e 9b       	mov	r11,r7
80008d08:	40 1c       	lddsp	r12,sp[0x4]
80008d0a:	fe b0 fc 91 	rcall	8000862c <_fflush_r>
80008d0e:	c0 91       	brne	80008d20 <__sfvwrite_r+0x284>
80008d10:	50 06       	stdsp	sp[0x0],r6
80008d12:	64 28       	ld.w	r8,r2[0x8]
80008d14:	0a 18       	sub	r8,r5
80008d16:	85 28       	st.w	r2[0x8],r8
80008d18:	c0 90       	breq	80008d2a <__sfvwrite_r+0x28e>
80008d1a:	0a 11       	sub	r1,r5
80008d1c:	0a 03       	add	r3,r5
80008d1e:	ca 4b       	rjmp	80008c66 <__sfvwrite_r+0x1ca>
80008d20:	8e 68       	ld.sh	r8,r7[0xc]
80008d22:	a7 a8       	sbr	r8,0x6
80008d24:	ae 68       	st.h	r7[0xc],r8
80008d26:	3f fc       	mov	r12,-1
80008d28:	c0 28       	rjmp	80008d2c <__sfvwrite_r+0x290>
80008d2a:	30 0c       	mov	r12,0
80008d2c:	2f dd       	sub	sp,-12
80008d2e:	d8 32       	popm	r0-r7,pc

80008d30 <_fwalk>:
80008d30:	d4 31       	pushm	r0-r7,lr
80008d32:	30 05       	mov	r5,0
80008d34:	16 91       	mov	r1,r11
80008d36:	f8 c7 ff 28 	sub	r7,r12,-216
80008d3a:	0a 92       	mov	r2,r5
80008d3c:	fe b0 fc fe 	rcall	80008738 <__sfp_lock_acquire>
80008d40:	3f f3       	mov	r3,-1
80008d42:	c1 68       	rjmp	80008d6e <_fwalk+0x3e>
80008d44:	6e 26       	ld.w	r6,r7[0x8]
80008d46:	6e 14       	ld.w	r4,r7[0x4]
80008d48:	2f 46       	sub	r6,-12
80008d4a:	c0 c8       	rjmp	80008d62 <_fwalk+0x32>
80008d4c:	8c 08       	ld.sh	r8,r6[0x0]
80008d4e:	e4 08 19 00 	cp.h	r8,r2
80008d52:	c0 70       	breq	80008d60 <_fwalk+0x30>
80008d54:	8c 18       	ld.sh	r8,r6[0x2]
80008d56:	e6 08 19 00 	cp.h	r8,r3
80008d5a:	c0 30       	breq	80008d60 <_fwalk+0x30>
80008d5c:	5d 11       	icall	r1
80008d5e:	18 45       	or	r5,r12
80008d60:	2a 46       	sub	r6,-92
80008d62:	20 14       	sub	r4,1
80008d64:	ec cc 00 0c 	sub	r12,r6,12
80008d68:	58 04       	cp.w	r4,0
80008d6a:	cf 14       	brge	80008d4c <_fwalk+0x1c>
80008d6c:	6e 07       	ld.w	r7,r7[0x0]
80008d6e:	58 07       	cp.w	r7,0
80008d70:	ce a1       	brne	80008d44 <_fwalk+0x14>
80008d72:	fe b0 fc e4 	rcall	8000873a <__sfp_lock_release>
80008d76:	0a 9c       	mov	r12,r5
80008d78:	d8 32       	popm	r0-r7,pc
80008d7a:	d7 03       	nop

80008d7c <_localeconv_r>:
80008d7c:	fe cc e6 4c 	sub	r12,pc,-6580
80008d80:	5e fc       	retal	r12
80008d82:	d7 03       	nop

80008d84 <__smakebuf_r>:
80008d84:	d4 21       	pushm	r4-r7,lr
80008d86:	20 fd       	sub	sp,60
80008d88:	96 68       	ld.sh	r8,r11[0xc]
80008d8a:	16 97       	mov	r7,r11
80008d8c:	18 96       	mov	r6,r12
80008d8e:	e2 18 00 02 	andl	r8,0x2,COH
80008d92:	c3 d1       	brne	80008e0c <__smakebuf_r+0x88>
80008d94:	96 7b       	ld.sh	r11,r11[0xe]
80008d96:	f0 0b 19 00 	cp.h	r11,r8
80008d9a:	c0 55       	brlt	80008da4 <__smakebuf_r+0x20>
80008d9c:	1a 9a       	mov	r10,sp
80008d9e:	e0 a0 04 81 	rcall	800096a0 <_fstat_r>
80008da2:	c0 f4       	brge	80008dc0 <__smakebuf_r+0x3c>
80008da4:	8e 65       	ld.sh	r5,r7[0xc]
80008da6:	0a 98       	mov	r8,r5
80008da8:	ab b8       	sbr	r8,0xb
80008daa:	e2 15 00 80 	andl	r5,0x80,COH
80008dae:	ae 68       	st.h	r7[0xc],r8
80008db0:	30 04       	mov	r4,0
80008db2:	e0 68 04 00 	mov	r8,1024
80008db6:	f9 b5 01 40 	movne	r5,64
80008dba:	f0 05 17 00 	moveq	r5,r8
80008dbe:	c1 c8       	rjmp	80008df6 <__smakebuf_r+0x72>
80008dc0:	40 18       	lddsp	r8,sp[0x4]
80008dc2:	e2 18 f0 00 	andl	r8,0xf000,COH
80008dc6:	e0 48 20 00 	cp.w	r8,8192
80008dca:	5f 04       	sreq	r4
80008dcc:	e0 48 80 00 	cp.w	r8,32768
80008dd0:	c0 e1       	brne	80008dec <__smakebuf_r+0x68>
80008dd2:	6e b9       	ld.w	r9,r7[0x2c]
80008dd4:	fe c8 f9 1c 	sub	r8,pc,-1764
80008dd8:	10 39       	cp.w	r9,r8
80008dda:	c0 91       	brne	80008dec <__smakebuf_r+0x68>
80008ddc:	8e 68       	ld.sh	r8,r7[0xc]
80008dde:	e0 65 04 00 	mov	r5,1024
80008de2:	ab a8       	sbr	r8,0xa
80008de4:	ef 45 00 50 	st.w	r7[80],r5
80008de8:	ae 68       	st.h	r7[0xc],r8
80008dea:	c0 68       	rjmp	80008df6 <__smakebuf_r+0x72>
80008dec:	8e 68       	ld.sh	r8,r7[0xc]
80008dee:	e0 65 04 00 	mov	r5,1024
80008df2:	ab b8       	sbr	r8,0xb
80008df4:	ae 68       	st.h	r7[0xc],r8
80008df6:	0a 9b       	mov	r11,r5
80008df8:	0c 9c       	mov	r12,r6
80008dfa:	fe b0 de 73 	rcall	80004ae0 <_malloc_r>
80008dfe:	8e 68       	ld.sh	r8,r7[0xc]
80008e00:	c0 d1       	brne	80008e1a <__smakebuf_r+0x96>
80008e02:	ed b8 00 09 	bld	r8,0x9
80008e06:	c1 b0       	breq	80008e3c <__smakebuf_r+0xb8>
80008e08:	a1 b8       	sbr	r8,0x1
80008e0a:	ae 68       	st.h	r7[0xc],r8
80008e0c:	ee c8 ff b9 	sub	r8,r7,-71
80008e10:	8f 48       	st.w	r7[0x10],r8
80008e12:	8f 08       	st.w	r7[0x0],r8
80008e14:	30 18       	mov	r8,1
80008e16:	8f 58       	st.w	r7[0x14],r8
80008e18:	c1 28       	rjmp	80008e3c <__smakebuf_r+0xb8>
80008e1a:	a7 b8       	sbr	r8,0x7
80008e1c:	8f 4c       	st.w	r7[0x10],r12
80008e1e:	ae 68       	st.h	r7[0xc],r8
80008e20:	8f 55       	st.w	r7[0x14],r5
80008e22:	fe c8 06 e6 	sub	r8,pc,1766
80008e26:	8f 0c       	st.w	r7[0x0],r12
80008e28:	8d a8       	st.w	r6[0x28],r8
80008e2a:	58 04       	cp.w	r4,0
80008e2c:	c0 80       	breq	80008e3c <__smakebuf_r+0xb8>
80008e2e:	8e 7c       	ld.sh	r12,r7[0xe]
80008e30:	fe b0 e2 dc 	rcall	800053e8 <isatty>
80008e34:	c0 40       	breq	80008e3c <__smakebuf_r+0xb8>
80008e36:	8e 68       	ld.sh	r8,r7[0xc]
80008e38:	a1 a8       	sbr	r8,0x0
80008e3a:	ae 68       	st.h	r7[0xc],r8
80008e3c:	2f 1d       	sub	sp,-60
80008e3e:	d8 22       	popm	r4-r7,pc

80008e40 <memchr>:
80008e40:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80008e44:	c0 68       	rjmp	80008e50 <memchr+0x10>
80008e46:	20 1a       	sub	r10,1
80008e48:	19 88       	ld.ub	r8,r12[0x0]
80008e4a:	16 38       	cp.w	r8,r11
80008e4c:	5e 0c       	reteq	r12
80008e4e:	2f fc       	sub	r12,-1
80008e50:	58 0a       	cp.w	r10,0
80008e52:	cf a1       	brne	80008e46 <memchr+0x6>
80008e54:	5e fa       	retal	r10

80008e56 <memmove>:
80008e56:	d4 01       	pushm	lr
80008e58:	18 3b       	cp.w	r11,r12
80008e5a:	c1 92       	brcc	80008e8c <memmove+0x36>
80008e5c:	f6 0a 00 09 	add	r9,r11,r10
80008e60:	12 3c       	cp.w	r12,r9
80008e62:	c1 52       	brcc	80008e8c <memmove+0x36>
80008e64:	f8 0a 00 0b 	add	r11,r12,r10
80008e68:	30 08       	mov	r8,0
80008e6a:	c0 68       	rjmp	80008e76 <memmove+0x20>
80008e6c:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80008e70:	20 1a       	sub	r10,1
80008e72:	f6 08 0b 0e 	st.b	r11[r8],lr
80008e76:	20 18       	sub	r8,1
80008e78:	58 0a       	cp.w	r10,0
80008e7a:	cf 91       	brne	80008e6c <memmove+0x16>
80008e7c:	d8 02       	popm	pc
80008e7e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80008e82:	20 1a       	sub	r10,1
80008e84:	f8 08 0b 09 	st.b	r12[r8],r9
80008e88:	2f f8       	sub	r8,-1
80008e8a:	c0 28       	rjmp	80008e8e <memmove+0x38>
80008e8c:	30 08       	mov	r8,0
80008e8e:	58 0a       	cp.w	r10,0
80008e90:	cf 71       	brne	80008e7e <memmove+0x28>
80008e92:	d8 02       	popm	pc

80008e94 <__hi0bits>:
80008e94:	18 98       	mov	r8,r12
80008e96:	e0 1c 00 00 	andl	r12,0x0
80008e9a:	f0 09 15 10 	lsl	r9,r8,0x10
80008e9e:	58 0c       	cp.w	r12,0
80008ea0:	f2 08 17 00 	moveq	r8,r9
80008ea4:	f9 bc 00 10 	moveq	r12,16
80008ea8:	f9 bc 01 00 	movne	r12,0
80008eac:	10 9a       	mov	r10,r8
80008eae:	f0 09 15 08 	lsl	r9,r8,0x8
80008eb2:	e6 1a ff 00 	andh	r10,0xff00,COH
80008eb6:	f7 bc 00 f8 	subeq	r12,-8
80008eba:	f2 08 17 00 	moveq	r8,r9
80008ebe:	10 9a       	mov	r10,r8
80008ec0:	f0 09 15 04 	lsl	r9,r8,0x4
80008ec4:	e6 1a f0 00 	andh	r10,0xf000,COH
80008ec8:	f7 bc 00 fc 	subeq	r12,-4
80008ecc:	f2 08 17 00 	moveq	r8,r9
80008ed0:	10 9a       	mov	r10,r8
80008ed2:	f0 09 15 02 	lsl	r9,r8,0x2
80008ed6:	e6 1a c0 00 	andh	r10,0xc000,COH
80008eda:	f7 bc 00 fe 	subeq	r12,-2
80008ede:	f2 08 17 00 	moveq	r8,r9
80008ee2:	58 08       	cp.w	r8,0
80008ee4:	5e 5c       	retlt	r12
80008ee6:	ed b8 00 1e 	bld	r8,0x1e
80008eea:	f9 bc 01 20 	movne	r12,32
80008eee:	f7 bc 00 ff 	subeq	r12,-1
80008ef2:	5e fc       	retal	r12

80008ef4 <__lo0bits>:
80008ef4:	18 99       	mov	r9,r12
80008ef6:	78 08       	ld.w	r8,r12[0x0]
80008ef8:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008efc:	c1 50       	breq	80008f26 <__lo0bits+0x32>
80008efe:	ed b8 00 00 	bld	r8,0x0
80008f02:	c0 21       	brne	80008f06 <__lo0bits+0x12>
80008f04:	5e fd       	retal	0
80008f06:	10 9b       	mov	r11,r8
80008f08:	f0 0a 16 01 	lsr	r10,r8,0x1
80008f0c:	e2 1b 00 02 	andl	r11,0x2,COH
80008f10:	a3 88       	lsr	r8,0x2
80008f12:	58 0b       	cp.w	r11,0
80008f14:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008f18:	f9 bc 01 01 	movne	r12,1
80008f1c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80008f20:	f9 bc 00 02 	moveq	r12,2
80008f24:	5e fc       	retal	r12
80008f26:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008f2a:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f2e:	58 0a       	cp.w	r10,0
80008f30:	f6 08 17 00 	moveq	r8,r11
80008f34:	f9 bc 00 10 	moveq	r12,16
80008f38:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008f3c:	f0 0a 16 08 	lsr	r10,r8,0x8
80008f40:	58 0b       	cp.w	r11,0
80008f42:	f7 bc 00 f8 	subeq	r12,-8
80008f46:	f4 08 17 00 	moveq	r8,r10
80008f4a:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008f4e:	f0 0a 16 04 	lsr	r10,r8,0x4
80008f52:	58 0b       	cp.w	r11,0
80008f54:	f7 bc 00 fc 	subeq	r12,-4
80008f58:	f4 08 17 00 	moveq	r8,r10
80008f5c:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80008f60:	f0 0a 16 02 	lsr	r10,r8,0x2
80008f64:	58 0b       	cp.w	r11,0
80008f66:	f7 bc 00 fe 	subeq	r12,-2
80008f6a:	f4 08 17 00 	moveq	r8,r10
80008f6e:	ed b8 00 00 	bld	r8,0x0
80008f72:	c0 60       	breq	80008f7e <__lo0bits+0x8a>
80008f74:	a1 98       	lsr	r8,0x1
80008f76:	c0 31       	brne	80008f7c <__lo0bits+0x88>
80008f78:	32 0c       	mov	r12,32
80008f7a:	5e fc       	retal	r12
80008f7c:	2f fc       	sub	r12,-1
80008f7e:	93 08       	st.w	r9[0x0],r8
80008f80:	5e fc       	retal	r12

80008f82 <__mcmp>:
80008f82:	d4 01       	pushm	lr
80008f84:	18 98       	mov	r8,r12
80008f86:	76 49       	ld.w	r9,r11[0x10]
80008f88:	78 4c       	ld.w	r12,r12[0x10]
80008f8a:	12 1c       	sub	r12,r9
80008f8c:	c1 31       	brne	80008fb2 <__mcmp+0x30>
80008f8e:	2f b9       	sub	r9,-5
80008f90:	a3 69       	lsl	r9,0x2
80008f92:	12 0b       	add	r11,r9
80008f94:	f0 09 00 09 	add	r9,r8,r9
80008f98:	2e c8       	sub	r8,-20
80008f9a:	13 4e       	ld.w	lr,--r9
80008f9c:	17 4a       	ld.w	r10,--r11
80008f9e:	14 3e       	cp.w	lr,r10
80008fa0:	c0 60       	breq	80008fac <__mcmp+0x2a>
80008fa2:	f9 bc 03 ff 	movlo	r12,-1
80008fa6:	f9 bc 02 01 	movhs	r12,1
80008faa:	d8 02       	popm	pc
80008fac:	10 39       	cp.w	r9,r8
80008fae:	fe 9b ff f6 	brhi	80008f9a <__mcmp+0x18>
80008fb2:	d8 02       	popm	pc

80008fb4 <_Bfree>:
80008fb4:	d4 21       	pushm	r4-r7,lr
80008fb6:	18 97       	mov	r7,r12
80008fb8:	16 95       	mov	r5,r11
80008fba:	78 96       	ld.w	r6,r12[0x24]
80008fbc:	58 06       	cp.w	r6,0
80008fbe:	c0 91       	brne	80008fd0 <_Bfree+0x1c>
80008fc0:	31 0c       	mov	r12,16
80008fc2:	fe b0 dd 87 	rcall	80004ad0 <malloc>
80008fc6:	99 36       	st.w	r12[0xc],r6
80008fc8:	8f 9c       	st.w	r7[0x24],r12
80008fca:	99 16       	st.w	r12[0x4],r6
80008fcc:	99 26       	st.w	r12[0x8],r6
80008fce:	99 06       	st.w	r12[0x0],r6
80008fd0:	58 05       	cp.w	r5,0
80008fd2:	c0 90       	breq	80008fe4 <_Bfree+0x30>
80008fd4:	6a 19       	ld.w	r9,r5[0x4]
80008fd6:	6e 98       	ld.w	r8,r7[0x24]
80008fd8:	70 38       	ld.w	r8,r8[0xc]
80008fda:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80008fde:	8b 0a       	st.w	r5[0x0],r10
80008fe0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008fe4:	d8 22       	popm	r4-r7,pc
80008fe6:	d7 03       	nop

80008fe8 <_Balloc>:
80008fe8:	d4 21       	pushm	r4-r7,lr
80008fea:	18 97       	mov	r7,r12
80008fec:	16 96       	mov	r6,r11
80008fee:	78 95       	ld.w	r5,r12[0x24]
80008ff0:	58 05       	cp.w	r5,0
80008ff2:	c0 91       	brne	80009004 <_Balloc+0x1c>
80008ff4:	31 0c       	mov	r12,16
80008ff6:	fe b0 dd 6d 	rcall	80004ad0 <malloc>
80008ffa:	99 35       	st.w	r12[0xc],r5
80008ffc:	8f 9c       	st.w	r7[0x24],r12
80008ffe:	99 15       	st.w	r12[0x4],r5
80009000:	99 25       	st.w	r12[0x8],r5
80009002:	99 05       	st.w	r12[0x0],r5
80009004:	6e 95       	ld.w	r5,r7[0x24]
80009006:	6a 38       	ld.w	r8,r5[0xc]
80009008:	58 08       	cp.w	r8,0
8000900a:	c0 b1       	brne	80009020 <_Balloc+0x38>
8000900c:	31 0a       	mov	r10,16
8000900e:	30 4b       	mov	r11,4
80009010:	0e 9c       	mov	r12,r7
80009012:	e0 a0 02 a7 	rcall	80009560 <_calloc_r>
80009016:	8b 3c       	st.w	r5[0xc],r12
80009018:	6e 98       	ld.w	r8,r7[0x24]
8000901a:	70 3c       	ld.w	r12,r8[0xc]
8000901c:	58 0c       	cp.w	r12,0
8000901e:	c1 b0       	breq	80009054 <_Balloc+0x6c>
80009020:	6e 98       	ld.w	r8,r7[0x24]
80009022:	70 38       	ld.w	r8,r8[0xc]
80009024:	f0 06 00 28 	add	r8,r8,r6<<0x2
80009028:	70 0c       	ld.w	r12,r8[0x0]
8000902a:	58 0c       	cp.w	r12,0
8000902c:	c0 40       	breq	80009034 <_Balloc+0x4c>
8000902e:	78 09       	ld.w	r9,r12[0x0]
80009030:	91 09       	st.w	r8[0x0],r9
80009032:	c0 e8       	rjmp	8000904e <_Balloc+0x66>
80009034:	0e 9c       	mov	r12,r7
80009036:	30 17       	mov	r7,1
80009038:	0e 9b       	mov	r11,r7
8000903a:	ee 06 09 47 	lsl	r7,r7,r6
8000903e:	ee ca ff fb 	sub	r10,r7,-5
80009042:	a3 6a       	lsl	r10,0x2
80009044:	e0 a0 02 8e 	rcall	80009560 <_calloc_r>
80009048:	c0 60       	breq	80009054 <_Balloc+0x6c>
8000904a:	99 16       	st.w	r12[0x4],r6
8000904c:	99 27       	st.w	r12[0x8],r7
8000904e:	30 08       	mov	r8,0
80009050:	99 38       	st.w	r12[0xc],r8
80009052:	99 48       	st.w	r12[0x10],r8
80009054:	d8 22       	popm	r4-r7,pc
80009056:	d7 03       	nop

80009058 <__d2b>:
80009058:	d4 31       	pushm	r0-r7,lr
8000905a:	20 2d       	sub	sp,8
8000905c:	16 93       	mov	r3,r11
8000905e:	12 96       	mov	r6,r9
80009060:	10 95       	mov	r5,r8
80009062:	14 92       	mov	r2,r10
80009064:	30 1b       	mov	r11,1
80009066:	cc 1f       	rcall	80008fe8 <_Balloc>
80009068:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000906c:	50 09       	stdsp	sp[0x0],r9
8000906e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80009072:	b5 a9       	sbr	r9,0x14
80009074:	f0 01 16 14 	lsr	r1,r8,0x14
80009078:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000907c:	18 94       	mov	r4,r12
8000907e:	58 02       	cp.w	r2,0
80009080:	c1 d0       	breq	800090ba <__d2b+0x62>
80009082:	fa cc ff f8 	sub	r12,sp,-8
80009086:	18 d2       	st.w	--r12,r2
80009088:	c3 6f       	rcall	80008ef4 <__lo0bits>
8000908a:	40 18       	lddsp	r8,sp[0x4]
8000908c:	c0 d0       	breq	800090a6 <__d2b+0x4e>
8000908e:	40 09       	lddsp	r9,sp[0x0]
80009090:	f8 0a 11 20 	rsub	r10,r12,32
80009094:	f2 0a 09 4a 	lsl	r10,r9,r10
80009098:	f5 e8 10 08 	or	r8,r10,r8
8000909c:	89 58       	st.w	r4[0x14],r8
8000909e:	f2 0c 0a 49 	lsr	r9,r9,r12
800090a2:	50 09       	stdsp	sp[0x0],r9
800090a4:	c0 28       	rjmp	800090a8 <__d2b+0x50>
800090a6:	89 58       	st.w	r4[0x14],r8
800090a8:	40 08       	lddsp	r8,sp[0x0]
800090aa:	58 08       	cp.w	r8,0
800090ac:	f9 b3 01 02 	movne	r3,2
800090b0:	f9 b3 00 01 	moveq	r3,1
800090b4:	89 68       	st.w	r4[0x18],r8
800090b6:	89 43       	st.w	r4[0x10],r3
800090b8:	c0 88       	rjmp	800090c8 <__d2b+0x70>
800090ba:	1a 9c       	mov	r12,sp
800090bc:	c1 cf       	rcall	80008ef4 <__lo0bits>
800090be:	30 13       	mov	r3,1
800090c0:	40 08       	lddsp	r8,sp[0x0]
800090c2:	2e 0c       	sub	r12,-32
800090c4:	89 43       	st.w	r4[0x10],r3
800090c6:	89 58       	st.w	r4[0x14],r8
800090c8:	58 01       	cp.w	r1,0
800090ca:	c0 90       	breq	800090dc <__d2b+0x84>
800090cc:	e2 c1 04 33 	sub	r1,r1,1075
800090d0:	18 01       	add	r1,r12
800090d2:	8d 01       	st.w	r6[0x0],r1
800090d4:	f8 0c 11 35 	rsub	r12,r12,53
800090d8:	8b 0c       	st.w	r5[0x0],r12
800090da:	c0 c8       	rjmp	800090f2 <__d2b+0x9a>
800090dc:	e6 c8 ff fc 	sub	r8,r3,-4
800090e0:	f8 cc 04 32 	sub	r12,r12,1074
800090e4:	a5 73       	lsl	r3,0x5
800090e6:	8d 0c       	st.w	r6[0x0],r12
800090e8:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800090ec:	cd 4e       	rcall	80008e94 <__hi0bits>
800090ee:	18 13       	sub	r3,r12
800090f0:	8b 03       	st.w	r5[0x0],r3
800090f2:	08 9c       	mov	r12,r4
800090f4:	2f ed       	sub	sp,-8
800090f6:	d8 32       	popm	r0-r7,pc

800090f8 <__mdiff>:
800090f8:	d4 31       	pushm	r0-r7,lr
800090fa:	74 48       	ld.w	r8,r10[0x10]
800090fc:	76 45       	ld.w	r5,r11[0x10]
800090fe:	16 97       	mov	r7,r11
80009100:	14 96       	mov	r6,r10
80009102:	10 15       	sub	r5,r8
80009104:	c1 31       	brne	8000912a <__mdiff+0x32>
80009106:	2f b8       	sub	r8,-5
80009108:	ee ce ff ec 	sub	lr,r7,-20
8000910c:	a3 68       	lsl	r8,0x2
8000910e:	f4 08 00 0b 	add	r11,r10,r8
80009112:	ee 08 00 08 	add	r8,r7,r8
80009116:	11 4a       	ld.w	r10,--r8
80009118:	17 49       	ld.w	r9,--r11
8000911a:	12 3a       	cp.w	r10,r9
8000911c:	c0 30       	breq	80009122 <__mdiff+0x2a>
8000911e:	c0 e2       	brcc	8000913a <__mdiff+0x42>
80009120:	c0 78       	rjmp	8000912e <__mdiff+0x36>
80009122:	1c 38       	cp.w	r8,lr
80009124:	fe 9b ff f9 	brhi	80009116 <__mdiff+0x1e>
80009128:	c4 98       	rjmp	800091ba <__mdiff+0xc2>
8000912a:	58 05       	cp.w	r5,0
8000912c:	c0 64       	brge	80009138 <__mdiff+0x40>
8000912e:	0e 98       	mov	r8,r7
80009130:	30 15       	mov	r5,1
80009132:	0c 97       	mov	r7,r6
80009134:	10 96       	mov	r6,r8
80009136:	c0 28       	rjmp	8000913a <__mdiff+0x42>
80009138:	30 05       	mov	r5,0
8000913a:	6e 1b       	ld.w	r11,r7[0x4]
8000913c:	c5 6f       	rcall	80008fe8 <_Balloc>
8000913e:	6e 49       	ld.w	r9,r7[0x10]
80009140:	6c 44       	ld.w	r4,r6[0x10]
80009142:	99 35       	st.w	r12[0xc],r5
80009144:	2f b4       	sub	r4,-5
80009146:	f2 c5 ff fb 	sub	r5,r9,-5
8000914a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000914e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80009152:	2e c6       	sub	r6,-20
80009154:	2e c7       	sub	r7,-20
80009156:	f8 c8 ff ec 	sub	r8,r12,-20
8000915a:	30 0a       	mov	r10,0
8000915c:	0f 0e       	ld.w	lr,r7++
8000915e:	0d 0b       	ld.w	r11,r6++
80009160:	fc 02 16 10 	lsr	r2,lr,0x10
80009164:	f6 03 16 10 	lsr	r3,r11,0x10
80009168:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000916c:	e4 03 01 03 	sub	r3,r2,r3
80009170:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009174:	fc 0b 01 0b 	sub	r11,lr,r11
80009178:	f6 0a 00 0a 	add	r10,r11,r10
8000917c:	b0 1a       	st.h	r8[0x2],r10
8000917e:	b1 4a       	asr	r10,0x10
80009180:	e6 0a 00 0a 	add	r10,r3,r10
80009184:	b0 0a       	st.h	r8[0x0],r10
80009186:	2f c8       	sub	r8,-4
80009188:	b1 4a       	asr	r10,0x10
8000918a:	08 36       	cp.w	r6,r4
8000918c:	ce 83       	brcs	8000915c <__mdiff+0x64>
8000918e:	c0 d8       	rjmp	800091a8 <__mdiff+0xb0>
80009190:	0f 0b       	ld.w	r11,r7++
80009192:	f6 0e 16 10 	lsr	lr,r11,0x10
80009196:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000919a:	16 0a       	add	r10,r11
8000919c:	b0 1a       	st.h	r8[0x2],r10
8000919e:	b1 4a       	asr	r10,0x10
800091a0:	1c 0a       	add	r10,lr
800091a2:	b0 0a       	st.h	r8[0x0],r10
800091a4:	2f c8       	sub	r8,-4
800091a6:	b1 4a       	asr	r10,0x10
800091a8:	0a 37       	cp.w	r7,r5
800091aa:	cf 33       	brcs	80009190 <__mdiff+0x98>
800091ac:	c0 28       	rjmp	800091b0 <__mdiff+0xb8>
800091ae:	20 19       	sub	r9,1
800091b0:	11 4a       	ld.w	r10,--r8
800091b2:	58 0a       	cp.w	r10,0
800091b4:	cf d0       	breq	800091ae <__mdiff+0xb6>
800091b6:	99 49       	st.w	r12[0x10],r9
800091b8:	d8 32       	popm	r0-r7,pc
800091ba:	30 0b       	mov	r11,0
800091bc:	c1 6f       	rcall	80008fe8 <_Balloc>
800091be:	30 18       	mov	r8,1
800091c0:	99 48       	st.w	r12[0x10],r8
800091c2:	30 08       	mov	r8,0
800091c4:	99 58       	st.w	r12[0x14],r8
800091c6:	d8 32       	popm	r0-r7,pc

800091c8 <__lshift>:
800091c8:	d4 31       	pushm	r0-r7,lr
800091ca:	16 97       	mov	r7,r11
800091cc:	76 46       	ld.w	r6,r11[0x10]
800091ce:	f4 02 14 05 	asr	r2,r10,0x5
800091d2:	2f f6       	sub	r6,-1
800091d4:	14 93       	mov	r3,r10
800091d6:	18 94       	mov	r4,r12
800091d8:	04 06       	add	r6,r2
800091da:	76 1b       	ld.w	r11,r11[0x4]
800091dc:	6e 28       	ld.w	r8,r7[0x8]
800091de:	c0 38       	rjmp	800091e4 <__lshift+0x1c>
800091e0:	2f fb       	sub	r11,-1
800091e2:	a1 78       	lsl	r8,0x1
800091e4:	10 36       	cp.w	r6,r8
800091e6:	fe 99 ff fd 	brgt	800091e0 <__lshift+0x18>
800091ea:	08 9c       	mov	r12,r4
800091ec:	cf ee       	rcall	80008fe8 <_Balloc>
800091ee:	30 09       	mov	r9,0
800091f0:	18 95       	mov	r5,r12
800091f2:	f8 c8 ff ec 	sub	r8,r12,-20
800091f6:	12 9a       	mov	r10,r9
800091f8:	c0 38       	rjmp	800091fe <__lshift+0x36>
800091fa:	10 aa       	st.w	r8++,r10
800091fc:	2f f9       	sub	r9,-1
800091fe:	04 39       	cp.w	r9,r2
80009200:	cf d5       	brlt	800091fa <__lshift+0x32>
80009202:	6e 4b       	ld.w	r11,r7[0x10]
80009204:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80009208:	2f bb       	sub	r11,-5
8000920a:	ee c9 ff ec 	sub	r9,r7,-20
8000920e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80009212:	58 03       	cp.w	r3,0
80009214:	c1 30       	breq	8000923a <__lshift+0x72>
80009216:	e6 0c 11 20 	rsub	r12,r3,32
8000921a:	30 0a       	mov	r10,0
8000921c:	72 02       	ld.w	r2,r9[0x0]
8000921e:	e4 03 09 42 	lsl	r2,r2,r3
80009222:	04 4a       	or	r10,r2
80009224:	10 aa       	st.w	r8++,r10
80009226:	13 0a       	ld.w	r10,r9++
80009228:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000922c:	16 39       	cp.w	r9,r11
8000922e:	cf 73       	brcs	8000921c <__lshift+0x54>
80009230:	91 0a       	st.w	r8[0x0],r10
80009232:	58 0a       	cp.w	r10,0
80009234:	c0 70       	breq	80009242 <__lshift+0x7a>
80009236:	2f f6       	sub	r6,-1
80009238:	c0 58       	rjmp	80009242 <__lshift+0x7a>
8000923a:	13 0a       	ld.w	r10,r9++
8000923c:	10 aa       	st.w	r8++,r10
8000923e:	16 39       	cp.w	r9,r11
80009240:	cf d3       	brcs	8000923a <__lshift+0x72>
80009242:	08 9c       	mov	r12,r4
80009244:	20 16       	sub	r6,1
80009246:	0e 9b       	mov	r11,r7
80009248:	8b 46       	st.w	r5[0x10],r6
8000924a:	cb 5e       	rcall	80008fb4 <_Bfree>
8000924c:	0a 9c       	mov	r12,r5
8000924e:	d8 32       	popm	r0-r7,pc

80009250 <__multiply>:
80009250:	d4 31       	pushm	r0-r7,lr
80009252:	20 2d       	sub	sp,8
80009254:	76 49       	ld.w	r9,r11[0x10]
80009256:	74 48       	ld.w	r8,r10[0x10]
80009258:	16 96       	mov	r6,r11
8000925a:	14 95       	mov	r5,r10
8000925c:	10 39       	cp.w	r9,r8
8000925e:	ec 08 17 50 	movlt	r8,r6
80009262:	ea 06 17 50 	movlt	r6,r5
80009266:	f0 05 17 50 	movlt	r5,r8
8000926a:	6c 28       	ld.w	r8,r6[0x8]
8000926c:	76 43       	ld.w	r3,r11[0x10]
8000926e:	74 42       	ld.w	r2,r10[0x10]
80009270:	76 1b       	ld.w	r11,r11[0x4]
80009272:	e4 03 00 07 	add	r7,r2,r3
80009276:	10 37       	cp.w	r7,r8
80009278:	f7 bb 09 ff 	subgt	r11,-1
8000927c:	cb 6e       	rcall	80008fe8 <_Balloc>
8000927e:	ee c4 ff fb 	sub	r4,r7,-5
80009282:	f8 c9 ff ec 	sub	r9,r12,-20
80009286:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000928a:	30 0a       	mov	r10,0
8000928c:	12 98       	mov	r8,r9
8000928e:	c0 28       	rjmp	80009292 <__multiply+0x42>
80009290:	10 aa       	st.w	r8++,r10
80009292:	08 38       	cp.w	r8,r4
80009294:	cf e3       	brcs	80009290 <__multiply+0x40>
80009296:	2f b3       	sub	r3,-5
80009298:	2f b2       	sub	r2,-5
8000929a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000929e:	ea 02 00 22 	add	r2,r5,r2<<0x2
800092a2:	ec cb ff ec 	sub	r11,r6,-20
800092a6:	50 12       	stdsp	sp[0x4],r2
800092a8:	ea ca ff ec 	sub	r10,r5,-20
800092ac:	c4 48       	rjmp	80009334 <__multiply+0xe4>
800092ae:	94 95       	ld.uh	r5,r10[0x2]
800092b0:	58 05       	cp.w	r5,0
800092b2:	c2 00       	breq	800092f2 <__multiply+0xa2>
800092b4:	12 98       	mov	r8,r9
800092b6:	16 96       	mov	r6,r11
800092b8:	30 0e       	mov	lr,0
800092ba:	50 09       	stdsp	sp[0x0],r9
800092bc:	0d 02       	ld.w	r2,r6++
800092be:	e4 00 16 10 	lsr	r0,r2,0x10
800092c2:	70 01       	ld.w	r1,r8[0x0]
800092c4:	70 09       	ld.w	r9,r8[0x0]
800092c6:	b1 81       	lsr	r1,0x10
800092c8:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800092cc:	e0 05 03 41 	mac	r1,r0,r5
800092d0:	ab 32       	mul	r2,r5
800092d2:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800092d6:	00 02       	add	r2,r0
800092d8:	e4 0e 00 0e 	add	lr,r2,lr
800092dc:	b0 1e       	st.h	r8[0x2],lr
800092de:	b1 8e       	lsr	lr,0x10
800092e0:	1c 01       	add	r1,lr
800092e2:	b0 01       	st.h	r8[0x0],r1
800092e4:	e2 0e 16 10 	lsr	lr,r1,0x10
800092e8:	2f c8       	sub	r8,-4
800092ea:	06 36       	cp.w	r6,r3
800092ec:	ce 83       	brcs	800092bc <__multiply+0x6c>
800092ee:	40 09       	lddsp	r9,sp[0x0]
800092f0:	91 0e       	st.w	r8[0x0],lr
800092f2:	94 86       	ld.uh	r6,r10[0x0]
800092f4:	58 06       	cp.w	r6,0
800092f6:	c1 d0       	breq	80009330 <__multiply+0xe0>
800092f8:	72 02       	ld.w	r2,r9[0x0]
800092fa:	12 98       	mov	r8,r9
800092fc:	16 9e       	mov	lr,r11
800092fe:	30 05       	mov	r5,0
80009300:	b0 12       	st.h	r8[0x2],r2
80009302:	1d 01       	ld.w	r1,lr++
80009304:	90 82       	ld.uh	r2,r8[0x0]
80009306:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000930a:	ad 30       	mul	r0,r6
8000930c:	e0 02 00 02 	add	r2,r0,r2
80009310:	e4 05 00 05 	add	r5,r2,r5
80009314:	b0 05       	st.h	r8[0x0],r5
80009316:	b1 85       	lsr	r5,0x10
80009318:	b1 81       	lsr	r1,0x10
8000931a:	2f c8       	sub	r8,-4
8000931c:	ad 31       	mul	r1,r6
8000931e:	90 92       	ld.uh	r2,r8[0x2]
80009320:	e2 02 00 02 	add	r2,r1,r2
80009324:	0a 02       	add	r2,r5
80009326:	e4 05 16 10 	lsr	r5,r2,0x10
8000932a:	06 3e       	cp.w	lr,r3
8000932c:	ce a3       	brcs	80009300 <__multiply+0xb0>
8000932e:	91 02       	st.w	r8[0x0],r2
80009330:	2f ca       	sub	r10,-4
80009332:	2f c9       	sub	r9,-4
80009334:	40 18       	lddsp	r8,sp[0x4]
80009336:	10 3a       	cp.w	r10,r8
80009338:	cb b3       	brcs	800092ae <__multiply+0x5e>
8000933a:	c0 28       	rjmp	8000933e <__multiply+0xee>
8000933c:	20 17       	sub	r7,1
8000933e:	58 07       	cp.w	r7,0
80009340:	e0 8a 00 05 	brle	8000934a <__multiply+0xfa>
80009344:	09 48       	ld.w	r8,--r4
80009346:	58 08       	cp.w	r8,0
80009348:	cf a0       	breq	8000933c <__multiply+0xec>
8000934a:	99 47       	st.w	r12[0x10],r7
8000934c:	2f ed       	sub	sp,-8
8000934e:	d8 32       	popm	r0-r7,pc

80009350 <__i2b>:
80009350:	d4 21       	pushm	r4-r7,lr
80009352:	16 97       	mov	r7,r11
80009354:	30 1b       	mov	r11,1
80009356:	c4 9e       	rcall	80008fe8 <_Balloc>
80009358:	30 19       	mov	r9,1
8000935a:	99 57       	st.w	r12[0x14],r7
8000935c:	99 49       	st.w	r12[0x10],r9
8000935e:	d8 22       	popm	r4-r7,pc

80009360 <__multadd>:
80009360:	d4 31       	pushm	r0-r7,lr
80009362:	30 08       	mov	r8,0
80009364:	12 95       	mov	r5,r9
80009366:	16 97       	mov	r7,r11
80009368:	18 96       	mov	r6,r12
8000936a:	76 44       	ld.w	r4,r11[0x10]
8000936c:	f6 c9 ff ec 	sub	r9,r11,-20
80009370:	72 0b       	ld.w	r11,r9[0x0]
80009372:	f6 0c 16 10 	lsr	r12,r11,0x10
80009376:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000937a:	f4 0c 02 4c 	mul	r12,r10,r12
8000937e:	f4 0b 03 45 	mac	r5,r10,r11
80009382:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80009386:	b1 85       	lsr	r5,0x10
80009388:	18 05       	add	r5,r12
8000938a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000938e:	f8 0b 00 0b 	add	r11,r12,r11
80009392:	12 ab       	st.w	r9++,r11
80009394:	2f f8       	sub	r8,-1
80009396:	b1 85       	lsr	r5,0x10
80009398:	08 38       	cp.w	r8,r4
8000939a:	ce b5       	brlt	80009370 <__multadd+0x10>
8000939c:	58 05       	cp.w	r5,0
8000939e:	c1 c0       	breq	800093d6 <__multadd+0x76>
800093a0:	6e 28       	ld.w	r8,r7[0x8]
800093a2:	10 34       	cp.w	r4,r8
800093a4:	c1 35       	brlt	800093ca <__multadd+0x6a>
800093a6:	6e 1b       	ld.w	r11,r7[0x4]
800093a8:	0c 9c       	mov	r12,r6
800093aa:	2f fb       	sub	r11,-1
800093ac:	c1 ee       	rcall	80008fe8 <_Balloc>
800093ae:	6e 4a       	ld.w	r10,r7[0x10]
800093b0:	ee cb ff f4 	sub	r11,r7,-12
800093b4:	18 93       	mov	r3,r12
800093b6:	2f ea       	sub	r10,-2
800093b8:	2f 4c       	sub	r12,-12
800093ba:	a3 6a       	lsl	r10,0x2
800093bc:	fe b0 dd ae 	rcall	80004f18 <memcpy>
800093c0:	0e 9b       	mov	r11,r7
800093c2:	0c 9c       	mov	r12,r6
800093c4:	fe b0 fd f8 	rcall	80008fb4 <_Bfree>
800093c8:	06 97       	mov	r7,r3
800093ca:	e8 c8 ff ff 	sub	r8,r4,-1
800093ce:	2f b4       	sub	r4,-5
800093d0:	8f 48       	st.w	r7[0x10],r8
800093d2:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800093d6:	0e 9c       	mov	r12,r7
800093d8:	d8 32       	popm	r0-r7,pc
800093da:	d7 03       	nop

800093dc <__pow5mult>:
800093dc:	d4 31       	pushm	r0-r7,lr
800093de:	14 96       	mov	r6,r10
800093e0:	18 97       	mov	r7,r12
800093e2:	16 94       	mov	r4,r11
800093e4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800093e8:	c0 90       	breq	800093fa <__pow5mult+0x1e>
800093ea:	20 18       	sub	r8,1
800093ec:	fe c9 ec 7c 	sub	r9,pc,-4996
800093f0:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800093f4:	30 09       	mov	r9,0
800093f6:	cb 5f       	rcall	80009360 <__multadd>
800093f8:	18 94       	mov	r4,r12
800093fa:	a3 46       	asr	r6,0x2
800093fc:	c3 40       	breq	80009464 <__pow5mult+0x88>
800093fe:	6e 95       	ld.w	r5,r7[0x24]
80009400:	58 05       	cp.w	r5,0
80009402:	c0 91       	brne	80009414 <__pow5mult+0x38>
80009404:	31 0c       	mov	r12,16
80009406:	fe b0 db 65 	rcall	80004ad0 <malloc>
8000940a:	99 35       	st.w	r12[0xc],r5
8000940c:	8f 9c       	st.w	r7[0x24],r12
8000940e:	99 15       	st.w	r12[0x4],r5
80009410:	99 25       	st.w	r12[0x8],r5
80009412:	99 05       	st.w	r12[0x0],r5
80009414:	6e 93       	ld.w	r3,r7[0x24]
80009416:	66 25       	ld.w	r5,r3[0x8]
80009418:	58 05       	cp.w	r5,0
8000941a:	c0 c1       	brne	80009432 <__pow5mult+0x56>
8000941c:	e0 6b 02 71 	mov	r11,625
80009420:	0e 9c       	mov	r12,r7
80009422:	c9 7f       	rcall	80009350 <__i2b>
80009424:	87 2c       	st.w	r3[0x8],r12
80009426:	30 08       	mov	r8,0
80009428:	18 95       	mov	r5,r12
8000942a:	99 08       	st.w	r12[0x0],r8
8000942c:	c0 38       	rjmp	80009432 <__pow5mult+0x56>
8000942e:	06 9c       	mov	r12,r3
80009430:	18 95       	mov	r5,r12
80009432:	ed b6 00 00 	bld	r6,0x0
80009436:	c0 b1       	brne	8000944c <__pow5mult+0x70>
80009438:	08 9b       	mov	r11,r4
8000943a:	0a 9a       	mov	r10,r5
8000943c:	0e 9c       	mov	r12,r7
8000943e:	c0 9f       	rcall	80009250 <__multiply>
80009440:	08 9b       	mov	r11,r4
80009442:	18 93       	mov	r3,r12
80009444:	0e 9c       	mov	r12,r7
80009446:	06 94       	mov	r4,r3
80009448:	fe b0 fd b6 	rcall	80008fb4 <_Bfree>
8000944c:	a1 56       	asr	r6,0x1
8000944e:	c0 b0       	breq	80009464 <__pow5mult+0x88>
80009450:	6a 03       	ld.w	r3,r5[0x0]
80009452:	58 03       	cp.w	r3,0
80009454:	ce d1       	brne	8000942e <__pow5mult+0x52>
80009456:	0a 9a       	mov	r10,r5
80009458:	0a 9b       	mov	r11,r5
8000945a:	0e 9c       	mov	r12,r7
8000945c:	cf ae       	rcall	80009250 <__multiply>
8000945e:	8b 0c       	st.w	r5[0x0],r12
80009460:	99 03       	st.w	r12[0x0],r3
80009462:	ce 7b       	rjmp	80009430 <__pow5mult+0x54>
80009464:	08 9c       	mov	r12,r4
80009466:	d8 32       	popm	r0-r7,pc

80009468 <__isinfd>:
80009468:	14 98       	mov	r8,r10
8000946a:	fc 19 7f f0 	movh	r9,0x7ff0
8000946e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009472:	f0 0b 11 00 	rsub	r11,r8,0
80009476:	f7 e8 10 08 	or	r8,r11,r8
8000947a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000947e:	f2 08 01 08 	sub	r8,r9,r8
80009482:	f0 0c 11 00 	rsub	r12,r8,0
80009486:	f9 e8 10 08 	or	r8,r12,r8
8000948a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000948e:	2f fc       	sub	r12,-1
80009490:	5e fc       	retal	r12

80009492 <__isnand>:
80009492:	14 98       	mov	r8,r10
80009494:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009498:	f0 0c 11 00 	rsub	r12,r8,0
8000949c:	10 4c       	or	r12,r8
8000949e:	fc 18 7f f0 	movh	r8,0x7ff0
800094a2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800094a6:	f0 0c 01 0c 	sub	r12,r8,r12
800094aa:	bf 9c       	lsr	r12,0x1f
800094ac:	5e fc       	retal	r12
800094ae:	d7 03       	nop

800094b0 <__sclose>:
800094b0:	d4 01       	pushm	lr
800094b2:	96 7b       	ld.sh	r11,r11[0xe]
800094b4:	c8 2c       	rcall	800095b8 <_close_r>
800094b6:	d8 02       	popm	pc

800094b8 <__sseek>:
800094b8:	d4 21       	pushm	r4-r7,lr
800094ba:	16 97       	mov	r7,r11
800094bc:	96 7b       	ld.sh	r11,r11[0xe]
800094be:	c0 3d       	rcall	800096c4 <_lseek_r>
800094c0:	8e 68       	ld.sh	r8,r7[0xc]
800094c2:	10 99       	mov	r9,r8
800094c4:	ad c8       	cbr	r8,0xc
800094c6:	ad a9       	sbr	r9,0xc
800094c8:	5b fc       	cp.w	r12,-1
800094ca:	ef f8 0c 06 	st.heq	r7[0xc],r8
800094ce:	ef f9 1c 06 	st.hne	r7[0xc],r9
800094d2:	ef fc 1a 15 	st.wne	r7[0x54],r12
800094d6:	d8 22       	popm	r4-r7,pc

800094d8 <__swrite>:
800094d8:	d4 21       	pushm	r4-r7,lr
800094da:	96 68       	ld.sh	r8,r11[0xc]
800094dc:	16 97       	mov	r7,r11
800094de:	14 95       	mov	r5,r10
800094e0:	12 94       	mov	r4,r9
800094e2:	e2 18 01 00 	andl	r8,0x100,COH
800094e6:	18 96       	mov	r6,r12
800094e8:	c0 50       	breq	800094f2 <__swrite+0x1a>
800094ea:	30 29       	mov	r9,2
800094ec:	30 0a       	mov	r10,0
800094ee:	96 7b       	ld.sh	r11,r11[0xe]
800094f0:	ce ac       	rcall	800096c4 <_lseek_r>
800094f2:	8e 68       	ld.sh	r8,r7[0xc]
800094f4:	ad c8       	cbr	r8,0xc
800094f6:	08 99       	mov	r9,r4
800094f8:	0a 9a       	mov	r10,r5
800094fa:	8e 7b       	ld.sh	r11,r7[0xe]
800094fc:	0c 9c       	mov	r12,r6
800094fe:	ae 68       	st.h	r7[0xc],r8
80009500:	c1 cc       	rcall	80009538 <_write_r>
80009502:	d8 22       	popm	r4-r7,pc

80009504 <__sread>:
80009504:	d4 21       	pushm	r4-r7,lr
80009506:	16 97       	mov	r7,r11
80009508:	96 7b       	ld.sh	r11,r11[0xe]
8000950a:	cf 1c       	rcall	800096ec <_read_r>
8000950c:	c0 65       	brlt	80009518 <__sread+0x14>
8000950e:	6f 58       	ld.w	r8,r7[0x54]
80009510:	18 08       	add	r8,r12
80009512:	ef 48 00 54 	st.w	r7[84],r8
80009516:	d8 22       	popm	r4-r7,pc
80009518:	8e 68       	ld.sh	r8,r7[0xc]
8000951a:	ad c8       	cbr	r8,0xc
8000951c:	ae 68       	st.h	r7[0xc],r8
8000951e:	d8 22       	popm	r4-r7,pc

80009520 <strlen>:
80009520:	30 09       	mov	r9,0
80009522:	18 98       	mov	r8,r12
80009524:	c0 28       	rjmp	80009528 <strlen+0x8>
80009526:	2f f8       	sub	r8,-1
80009528:	11 8a       	ld.ub	r10,r8[0x0]
8000952a:	f2 0a 18 00 	cp.b	r10,r9
8000952e:	cf c1       	brne	80009526 <strlen+0x6>
80009530:	f0 0c 01 0c 	sub	r12,r8,r12
80009534:	5e fc       	retal	r12
80009536:	d7 03       	nop

80009538 <_write_r>:
80009538:	d4 21       	pushm	r4-r7,lr
8000953a:	16 98       	mov	r8,r11
8000953c:	18 97       	mov	r7,r12
8000953e:	10 9c       	mov	r12,r8
80009540:	30 08       	mov	r8,0
80009542:	14 9b       	mov	r11,r10
80009544:	e0 66 07 d8 	mov	r6,2008
80009548:	12 9a       	mov	r10,r9
8000954a:	8d 08       	st.w	r6[0x0],r8
8000954c:	fe b0 cf ac 	rcall	800034a4 <_write>
80009550:	5b fc       	cp.w	r12,-1
80009552:	c0 51       	brne	8000955c <_write_r+0x24>
80009554:	6c 08       	ld.w	r8,r6[0x0]
80009556:	58 08       	cp.w	r8,0
80009558:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000955c:	d8 22       	popm	r4-r7,pc
8000955e:	d7 03       	nop

80009560 <_calloc_r>:
80009560:	d4 21       	pushm	r4-r7,lr
80009562:	f4 0b 02 4b 	mul	r11,r10,r11
80009566:	fe b0 da bd 	rcall	80004ae0 <_malloc_r>
8000956a:	18 97       	mov	r7,r12
8000956c:	c2 30       	breq	800095b2 <_calloc_r+0x52>
8000956e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80009572:	e0 1a ff fc 	andl	r10,0xfffc
80009576:	20 4a       	sub	r10,4
80009578:	e0 4a 00 24 	cp.w	r10,36
8000957c:	e0 8b 00 18 	brhi	800095ac <_calloc_r+0x4c>
80009580:	18 98       	mov	r8,r12
80009582:	59 3a       	cp.w	r10,19
80009584:	e0 88 00 0f 	brls	800095a2 <_calloc_r+0x42>
80009588:	30 09       	mov	r9,0
8000958a:	10 a9       	st.w	r8++,r9
8000958c:	10 a9       	st.w	r8++,r9
8000958e:	59 ba       	cp.w	r10,27
80009590:	e0 88 00 09 	brls	800095a2 <_calloc_r+0x42>
80009594:	10 a9       	st.w	r8++,r9
80009596:	10 a9       	st.w	r8++,r9
80009598:	e0 4a 00 24 	cp.w	r10,36
8000959c:	c0 31       	brne	800095a2 <_calloc_r+0x42>
8000959e:	10 a9       	st.w	r8++,r9
800095a0:	10 a9       	st.w	r8++,r9
800095a2:	30 09       	mov	r9,0
800095a4:	10 a9       	st.w	r8++,r9
800095a6:	91 19       	st.w	r8[0x4],r9
800095a8:	91 09       	st.w	r8[0x0],r9
800095aa:	c0 48       	rjmp	800095b2 <_calloc_r+0x52>
800095ac:	30 0b       	mov	r11,0
800095ae:	fe b0 dd 59 	rcall	80005060 <memset>
800095b2:	0e 9c       	mov	r12,r7
800095b4:	d8 22       	popm	r4-r7,pc
800095b6:	d7 03       	nop

800095b8 <_close_r>:
800095b8:	d4 21       	pushm	r4-r7,lr
800095ba:	30 08       	mov	r8,0
800095bc:	18 97       	mov	r7,r12
800095be:	e0 66 07 d8 	mov	r6,2008
800095c2:	16 9c       	mov	r12,r11
800095c4:	8d 08       	st.w	r6[0x0],r8
800095c6:	fe b0 de fd 	rcall	800053c0 <_close>
800095ca:	5b fc       	cp.w	r12,-1
800095cc:	c0 51       	brne	800095d6 <_close_r+0x1e>
800095ce:	6c 08       	ld.w	r8,r6[0x0]
800095d0:	58 08       	cp.w	r8,0
800095d2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800095d6:	d8 22       	popm	r4-r7,pc

800095d8 <_fclose_r>:
800095d8:	d4 21       	pushm	r4-r7,lr
800095da:	18 96       	mov	r6,r12
800095dc:	16 97       	mov	r7,r11
800095de:	58 0b       	cp.w	r11,0
800095e0:	c0 31       	brne	800095e6 <_fclose_r+0xe>
800095e2:	16 95       	mov	r5,r11
800095e4:	c5 38       	rjmp	8000968a <_fclose_r+0xb2>
800095e6:	fe b0 f8 a9 	rcall	80008738 <__sfp_lock_acquire>
800095ea:	58 06       	cp.w	r6,0
800095ec:	c0 70       	breq	800095fa <_fclose_r+0x22>
800095ee:	6c 68       	ld.w	r8,r6[0x18]
800095f0:	58 08       	cp.w	r8,0
800095f2:	c0 41       	brne	800095fa <_fclose_r+0x22>
800095f4:	0c 9c       	mov	r12,r6
800095f6:	fe b0 f8 f3 	rcall	800087dc <__sinit>
800095fa:	fe c8 ef 2a 	sub	r8,pc,-4310
800095fe:	10 37       	cp.w	r7,r8
80009600:	c0 31       	brne	80009606 <_fclose_r+0x2e>
80009602:	6c 07       	ld.w	r7,r6[0x0]
80009604:	c0 c8       	rjmp	8000961c <_fclose_r+0x44>
80009606:	fe c8 ef 16 	sub	r8,pc,-4330
8000960a:	10 37       	cp.w	r7,r8
8000960c:	c0 31       	brne	80009612 <_fclose_r+0x3a>
8000960e:	6c 17       	ld.w	r7,r6[0x4]
80009610:	c0 68       	rjmp	8000961c <_fclose_r+0x44>
80009612:	fe c8 ef 02 	sub	r8,pc,-4350
80009616:	10 37       	cp.w	r7,r8
80009618:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000961c:	8e 69       	ld.sh	r9,r7[0xc]
8000961e:	30 08       	mov	r8,0
80009620:	f0 09 19 00 	cp.h	r9,r8
80009624:	c0 51       	brne	8000962e <_fclose_r+0x56>
80009626:	fe b0 f8 8a 	rcall	8000873a <__sfp_lock_release>
8000962a:	30 05       	mov	r5,0
8000962c:	c2 f8       	rjmp	8000968a <_fclose_r+0xb2>
8000962e:	0e 9b       	mov	r11,r7
80009630:	0c 9c       	mov	r12,r6
80009632:	fe b0 f7 fd 	rcall	8000862c <_fflush_r>
80009636:	6e c8       	ld.w	r8,r7[0x30]
80009638:	18 95       	mov	r5,r12
8000963a:	58 08       	cp.w	r8,0
8000963c:	c0 60       	breq	80009648 <_fclose_r+0x70>
8000963e:	6e 8b       	ld.w	r11,r7[0x20]
80009640:	0c 9c       	mov	r12,r6
80009642:	5d 18       	icall	r8
80009644:	f9 b5 05 ff 	movlt	r5,-1
80009648:	8e 68       	ld.sh	r8,r7[0xc]
8000964a:	ed b8 00 07 	bld	r8,0x7
8000964e:	c0 51       	brne	80009658 <_fclose_r+0x80>
80009650:	6e 4b       	ld.w	r11,r7[0x10]
80009652:	0c 9c       	mov	r12,r6
80009654:	fe b0 f9 5e 	rcall	80008910 <_free_r>
80009658:	6e db       	ld.w	r11,r7[0x34]
8000965a:	58 0b       	cp.w	r11,0
8000965c:	c0 a0       	breq	80009670 <_fclose_r+0x98>
8000965e:	ee c8 ff bc 	sub	r8,r7,-68
80009662:	10 3b       	cp.w	r11,r8
80009664:	c0 40       	breq	8000966c <_fclose_r+0x94>
80009666:	0c 9c       	mov	r12,r6
80009668:	fe b0 f9 54 	rcall	80008910 <_free_r>
8000966c:	30 08       	mov	r8,0
8000966e:	8f d8       	st.w	r7[0x34],r8
80009670:	6f 2b       	ld.w	r11,r7[0x48]
80009672:	58 0b       	cp.w	r11,0
80009674:	c0 70       	breq	80009682 <_fclose_r+0xaa>
80009676:	0c 9c       	mov	r12,r6
80009678:	fe b0 f9 4c 	rcall	80008910 <_free_r>
8000967c:	30 08       	mov	r8,0
8000967e:	ef 48 00 48 	st.w	r7[72],r8
80009682:	30 08       	mov	r8,0
80009684:	ae 68       	st.h	r7[0xc],r8
80009686:	fe b0 f8 5a 	rcall	8000873a <__sfp_lock_release>
8000968a:	0a 9c       	mov	r12,r5
8000968c:	d8 22       	popm	r4-r7,pc
8000968e:	d7 03       	nop

80009690 <fclose>:
80009690:	d4 01       	pushm	lr
80009692:	e0 68 01 1c 	mov	r8,284
80009696:	18 9b       	mov	r11,r12
80009698:	70 0c       	ld.w	r12,r8[0x0]
8000969a:	c9 ff       	rcall	800095d8 <_fclose_r>
8000969c:	d8 02       	popm	pc
8000969e:	d7 03       	nop

800096a0 <_fstat_r>:
800096a0:	d4 21       	pushm	r4-r7,lr
800096a2:	16 98       	mov	r8,r11
800096a4:	18 97       	mov	r7,r12
800096a6:	10 9c       	mov	r12,r8
800096a8:	30 08       	mov	r8,0
800096aa:	e0 66 07 d8 	mov	r6,2008
800096ae:	14 9b       	mov	r11,r10
800096b0:	8d 08       	st.w	r6[0x0],r8
800096b2:	fe b0 de af 	rcall	80005410 <_fstat>
800096b6:	5b fc       	cp.w	r12,-1
800096b8:	c0 51       	brne	800096c2 <_fstat_r+0x22>
800096ba:	6c 08       	ld.w	r8,r6[0x0]
800096bc:	58 08       	cp.w	r8,0
800096be:	ef f8 1a 03 	st.wne	r7[0xc],r8
800096c2:	d8 22       	popm	r4-r7,pc

800096c4 <_lseek_r>:
800096c4:	d4 21       	pushm	r4-r7,lr
800096c6:	16 98       	mov	r8,r11
800096c8:	18 97       	mov	r7,r12
800096ca:	10 9c       	mov	r12,r8
800096cc:	30 08       	mov	r8,0
800096ce:	14 9b       	mov	r11,r10
800096d0:	e0 66 07 d8 	mov	r6,2008
800096d4:	12 9a       	mov	r10,r9
800096d6:	8d 08       	st.w	r6[0x0],r8
800096d8:	fe b0 de 7e 	rcall	800053d4 <_lseek>
800096dc:	5b fc       	cp.w	r12,-1
800096de:	c0 51       	brne	800096e8 <_lseek_r+0x24>
800096e0:	6c 08       	ld.w	r8,r6[0x0]
800096e2:	58 08       	cp.w	r8,0
800096e4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800096e8:	d8 22       	popm	r4-r7,pc
800096ea:	d7 03       	nop

800096ec <_read_r>:
800096ec:	d4 21       	pushm	r4-r7,lr
800096ee:	16 98       	mov	r8,r11
800096f0:	18 97       	mov	r7,r12
800096f2:	10 9c       	mov	r12,r8
800096f4:	30 08       	mov	r8,0
800096f6:	14 9b       	mov	r11,r10
800096f8:	e0 66 07 d8 	mov	r6,2008
800096fc:	12 9a       	mov	r10,r9
800096fe:	8d 08       	st.w	r6[0x0],r8
80009700:	fe b0 ce b2 	rcall	80003464 <_read>
80009704:	5b fc       	cp.w	r12,-1
80009706:	c0 51       	brne	80009710 <_read_r+0x24>
80009708:	6c 08       	ld.w	r8,r6[0x0]
8000970a:	58 08       	cp.w	r8,0
8000970c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009710:	d8 22       	popm	r4-r7,pc
80009712:	d7 03       	nop

80009714 <__avr32_f64_cmp_eq>:
80009714:	10 3a       	cp.w	r10,r8
80009716:	f2 0b 13 00 	cpc	r11,r9
8000971a:	c0 80       	breq	8000972a <__avr32_f64_cmp_eq+0x16>
8000971c:	a1 7b       	lsl	r11,0x1
8000971e:	a1 79       	lsl	r9,0x1
80009720:	14 4b       	or	r11,r10
80009722:	12 4b       	or	r11,r9
80009724:	10 4b       	or	r11,r8
80009726:	5e 0f       	reteq	1
80009728:	5e fd       	retal	0
8000972a:	a1 7b       	lsl	r11,0x1
8000972c:	fc 1c ff e0 	movh	r12,0xffe0
80009730:	58 0a       	cp.w	r10,0
80009732:	f8 0b 13 00 	cpc	r11,r12
80009736:	5e 8f       	retls	1
80009738:	5e fd       	retal	0

8000973a <__avr32_f64_cmp_ge>:
8000973a:	1a de       	st.w	--sp,lr
8000973c:	1a d7       	st.w	--sp,r7
8000973e:	a1 7b       	lsl	r11,0x1
80009740:	5f 3c       	srlo	r12
80009742:	a1 79       	lsl	r9,0x1
80009744:	5f 37       	srlo	r7
80009746:	5c fc       	rol	r12
80009748:	fc 1e ff e0 	movh	lr,0xffe0
8000974c:	58 0a       	cp.w	r10,0
8000974e:	fc 0b 13 00 	cpc	r11,lr
80009752:	e0 8b 00 1d 	brhi	8000978c <__avr32_f64_cmp_ge+0x52>
80009756:	58 08       	cp.w	r8,0
80009758:	fc 09 13 00 	cpc	r9,lr
8000975c:	e0 8b 00 18 	brhi	8000978c <__avr32_f64_cmp_ge+0x52>
80009760:	58 0b       	cp.w	r11,0
80009762:	f5 ba 00 00 	subfeq	r10,0
80009766:	c1 50       	breq	80009790 <__avr32_f64_cmp_ge+0x56>
80009768:	1b 07       	ld.w	r7,sp++
8000976a:	1b 0e       	ld.w	lr,sp++
8000976c:	58 3c       	cp.w	r12,3
8000976e:	c0 a0       	breq	80009782 <__avr32_f64_cmp_ge+0x48>
80009770:	58 1c       	cp.w	r12,1
80009772:	c0 33       	brcs	80009778 <__avr32_f64_cmp_ge+0x3e>
80009774:	5e 0f       	reteq	1
80009776:	5e 1d       	retne	0
80009778:	10 3a       	cp.w	r10,r8
8000977a:	f2 0b 13 00 	cpc	r11,r9
8000977e:	5e 2f       	reths	1
80009780:	5e 3d       	retlo	0
80009782:	14 38       	cp.w	r8,r10
80009784:	f6 09 13 00 	cpc	r9,r11
80009788:	5e 2f       	reths	1
8000978a:	5e 3d       	retlo	0
8000978c:	1b 07       	ld.w	r7,sp++
8000978e:	d8 0a       	popm	pc,r12=0
80009790:	58 17       	cp.w	r7,1
80009792:	5f 0c       	sreq	r12
80009794:	58 09       	cp.w	r9,0
80009796:	f5 b8 00 00 	subfeq	r8,0
8000979a:	1b 07       	ld.w	r7,sp++
8000979c:	1b 0e       	ld.w	lr,sp++
8000979e:	5e 0f       	reteq	1
800097a0:	5e fc       	retal	r12

800097a2 <__avr32_udiv64>:
800097a2:	d4 31       	pushm	r0-r7,lr
800097a4:	1a 97       	mov	r7,sp
800097a6:	20 3d       	sub	sp,12
800097a8:	10 9c       	mov	r12,r8
800097aa:	12 9e       	mov	lr,r9
800097ac:	14 93       	mov	r3,r10
800097ae:	58 09       	cp.w	r9,0
800097b0:	e0 81 00 bd 	brne	8000992a <__avr32_udiv64+0x188>
800097b4:	16 38       	cp.w	r8,r11
800097b6:	e0 88 00 40 	brls	80009836 <__avr32_udiv64+0x94>
800097ba:	f0 08 12 00 	clz	r8,r8
800097be:	c0 d0       	breq	800097d8 <__avr32_udiv64+0x36>
800097c0:	f6 08 09 4b 	lsl	r11,r11,r8
800097c4:	f0 09 11 20 	rsub	r9,r8,32
800097c8:	f8 08 09 4c 	lsl	r12,r12,r8
800097cc:	f4 09 0a 49 	lsr	r9,r10,r9
800097d0:	f4 08 09 43 	lsl	r3,r10,r8
800097d4:	f3 eb 10 0b 	or	r11,r9,r11
800097d8:	f8 0e 16 10 	lsr	lr,r12,0x10
800097dc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800097e0:	f6 0e 0d 00 	divu	r0,r11,lr
800097e4:	e6 0b 16 10 	lsr	r11,r3,0x10
800097e8:	00 99       	mov	r9,r0
800097ea:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800097ee:	e0 0a 02 48 	mul	r8,r0,r10
800097f2:	10 3b       	cp.w	r11,r8
800097f4:	c0 a2       	brcc	80009808 <__avr32_udiv64+0x66>
800097f6:	20 19       	sub	r9,1
800097f8:	18 0b       	add	r11,r12
800097fa:	18 3b       	cp.w	r11,r12
800097fc:	c0 63       	brcs	80009808 <__avr32_udiv64+0x66>
800097fe:	10 3b       	cp.w	r11,r8
80009800:	f7 b9 03 01 	sublo	r9,1
80009804:	f7 dc e3 0b 	addcs	r11,r11,r12
80009808:	f6 08 01 01 	sub	r1,r11,r8
8000980c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009810:	e2 0e 0d 00 	divu	r0,r1,lr
80009814:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009818:	00 98       	mov	r8,r0
8000981a:	e0 0a 02 4a 	mul	r10,r0,r10
8000981e:	14 33       	cp.w	r3,r10
80009820:	c0 82       	brcc	80009830 <__avr32_udiv64+0x8e>
80009822:	20 18       	sub	r8,1
80009824:	18 03       	add	r3,r12
80009826:	18 33       	cp.w	r3,r12
80009828:	c0 43       	brcs	80009830 <__avr32_udiv64+0x8e>
8000982a:	14 33       	cp.w	r3,r10
8000982c:	f7 b8 03 01 	sublo	r8,1
80009830:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80009834:	cd f8       	rjmp	800099f2 <__avr32_udiv64+0x250>
80009836:	58 08       	cp.w	r8,0
80009838:	c0 51       	brne	80009842 <__avr32_udiv64+0xa0>
8000983a:	30 19       	mov	r9,1
8000983c:	f2 08 0d 08 	divu	r8,r9,r8
80009840:	10 9c       	mov	r12,r8
80009842:	f8 06 12 00 	clz	r6,r12
80009846:	c0 41       	brne	8000984e <__avr32_udiv64+0xac>
80009848:	18 1b       	sub	r11,r12
8000984a:	30 19       	mov	r9,1
8000984c:	c4 08       	rjmp	800098cc <__avr32_udiv64+0x12a>
8000984e:	ec 01 11 20 	rsub	r1,r6,32
80009852:	f4 01 0a 49 	lsr	r9,r10,r1
80009856:	f8 06 09 4c 	lsl	r12,r12,r6
8000985a:	f6 06 09 48 	lsl	r8,r11,r6
8000985e:	f6 01 0a 41 	lsr	r1,r11,r1
80009862:	f3 e8 10 08 	or	r8,r9,r8
80009866:	f8 03 16 10 	lsr	r3,r12,0x10
8000986a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000986e:	e2 03 0d 00 	divu	r0,r1,r3
80009872:	f0 0b 16 10 	lsr	r11,r8,0x10
80009876:	00 9e       	mov	lr,r0
80009878:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000987c:	e0 05 02 49 	mul	r9,r0,r5
80009880:	12 3b       	cp.w	r11,r9
80009882:	c0 a2       	brcc	80009896 <__avr32_udiv64+0xf4>
80009884:	20 1e       	sub	lr,1
80009886:	18 0b       	add	r11,r12
80009888:	18 3b       	cp.w	r11,r12
8000988a:	c0 63       	brcs	80009896 <__avr32_udiv64+0xf4>
8000988c:	12 3b       	cp.w	r11,r9
8000988e:	f7 be 03 01 	sublo	lr,1
80009892:	f7 dc e3 0b 	addcs	r11,r11,r12
80009896:	12 1b       	sub	r11,r9
80009898:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000989c:	f6 03 0d 02 	divu	r2,r11,r3
800098a0:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800098a4:	04 99       	mov	r9,r2
800098a6:	e4 05 02 4b 	mul	r11,r2,r5
800098aa:	16 38       	cp.w	r8,r11
800098ac:	c0 a2       	brcc	800098c0 <__avr32_udiv64+0x11e>
800098ae:	20 19       	sub	r9,1
800098b0:	18 08       	add	r8,r12
800098b2:	18 38       	cp.w	r8,r12
800098b4:	c0 63       	brcs	800098c0 <__avr32_udiv64+0x11e>
800098b6:	16 38       	cp.w	r8,r11
800098b8:	f7 b9 03 01 	sublo	r9,1
800098bc:	f1 dc e3 08 	addcs	r8,r8,r12
800098c0:	f4 06 09 43 	lsl	r3,r10,r6
800098c4:	f0 0b 01 0b 	sub	r11,r8,r11
800098c8:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800098cc:	f8 06 16 10 	lsr	r6,r12,0x10
800098d0:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800098d4:	f6 06 0d 00 	divu	r0,r11,r6
800098d8:	e6 0b 16 10 	lsr	r11,r3,0x10
800098dc:	00 9a       	mov	r10,r0
800098de:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800098e2:	e0 0e 02 48 	mul	r8,r0,lr
800098e6:	10 3b       	cp.w	r11,r8
800098e8:	c0 a2       	brcc	800098fc <__avr32_udiv64+0x15a>
800098ea:	20 1a       	sub	r10,1
800098ec:	18 0b       	add	r11,r12
800098ee:	18 3b       	cp.w	r11,r12
800098f0:	c0 63       	brcs	800098fc <__avr32_udiv64+0x15a>
800098f2:	10 3b       	cp.w	r11,r8
800098f4:	f7 ba 03 01 	sublo	r10,1
800098f8:	f7 dc e3 0b 	addcs	r11,r11,r12
800098fc:	f6 08 01 01 	sub	r1,r11,r8
80009900:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009904:	e2 06 0d 00 	divu	r0,r1,r6
80009908:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000990c:	00 98       	mov	r8,r0
8000990e:	e0 0e 02 4b 	mul	r11,r0,lr
80009912:	16 33       	cp.w	r3,r11
80009914:	c0 82       	brcc	80009924 <__avr32_udiv64+0x182>
80009916:	20 18       	sub	r8,1
80009918:	18 03       	add	r3,r12
8000991a:	18 33       	cp.w	r3,r12
8000991c:	c0 43       	brcs	80009924 <__avr32_udiv64+0x182>
8000991e:	16 33       	cp.w	r3,r11
80009920:	f7 b8 03 01 	sublo	r8,1
80009924:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009928:	c6 98       	rjmp	800099fa <__avr32_udiv64+0x258>
8000992a:	16 39       	cp.w	r9,r11
8000992c:	e0 8b 00 65 	brhi	800099f6 <__avr32_udiv64+0x254>
80009930:	f2 09 12 00 	clz	r9,r9
80009934:	c0 b1       	brne	8000994a <__avr32_udiv64+0x1a8>
80009936:	10 3a       	cp.w	r10,r8
80009938:	5f 2a       	srhs	r10
8000993a:	1c 3b       	cp.w	r11,lr
8000993c:	5f b8       	srhi	r8
8000993e:	10 4a       	or	r10,r8
80009940:	f2 0a 18 00 	cp.b	r10,r9
80009944:	c5 90       	breq	800099f6 <__avr32_udiv64+0x254>
80009946:	30 18       	mov	r8,1
80009948:	c5 98       	rjmp	800099fa <__avr32_udiv64+0x258>
8000994a:	f0 09 09 46 	lsl	r6,r8,r9
8000994e:	f2 03 11 20 	rsub	r3,r9,32
80009952:	fc 09 09 4e 	lsl	lr,lr,r9
80009956:	f0 03 0a 48 	lsr	r8,r8,r3
8000995a:	f6 09 09 4c 	lsl	r12,r11,r9
8000995e:	f4 03 0a 42 	lsr	r2,r10,r3
80009962:	ef 46 ff f4 	st.w	r7[-12],r6
80009966:	f6 03 0a 43 	lsr	r3,r11,r3
8000996a:	18 42       	or	r2,r12
8000996c:	f1 ee 10 0c 	or	r12,r8,lr
80009970:	f8 01 16 10 	lsr	r1,r12,0x10
80009974:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009978:	e6 01 0d 04 	divu	r4,r3,r1
8000997c:	e4 03 16 10 	lsr	r3,r2,0x10
80009980:	08 9e       	mov	lr,r4
80009982:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80009986:	e8 06 02 48 	mul	r8,r4,r6
8000998a:	10 33       	cp.w	r3,r8
8000998c:	c0 a2       	brcc	800099a0 <__avr32_udiv64+0x1fe>
8000998e:	20 1e       	sub	lr,1
80009990:	18 03       	add	r3,r12
80009992:	18 33       	cp.w	r3,r12
80009994:	c0 63       	brcs	800099a0 <__avr32_udiv64+0x1fe>
80009996:	10 33       	cp.w	r3,r8
80009998:	f7 be 03 01 	sublo	lr,1
8000999c:	e7 dc e3 03 	addcs	r3,r3,r12
800099a0:	10 13       	sub	r3,r8
800099a2:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800099a6:	e6 01 0d 00 	divu	r0,r3,r1
800099aa:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800099ae:	00 98       	mov	r8,r0
800099b0:	e0 06 02 46 	mul	r6,r0,r6
800099b4:	0c 3b       	cp.w	r11,r6
800099b6:	c0 a2       	brcc	800099ca <__avr32_udiv64+0x228>
800099b8:	20 18       	sub	r8,1
800099ba:	18 0b       	add	r11,r12
800099bc:	18 3b       	cp.w	r11,r12
800099be:	c0 63       	brcs	800099ca <__avr32_udiv64+0x228>
800099c0:	0c 3b       	cp.w	r11,r6
800099c2:	f7 dc e3 0b 	addcs	r11,r11,r12
800099c6:	f7 b8 03 01 	sublo	r8,1
800099ca:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800099ce:	ee f4 ff f4 	ld.w	r4,r7[-12]
800099d2:	0c 1b       	sub	r11,r6
800099d4:	f0 04 06 42 	mulu.d	r2,r8,r4
800099d8:	06 95       	mov	r5,r3
800099da:	16 35       	cp.w	r5,r11
800099dc:	e0 8b 00 0a 	brhi	800099f0 <__avr32_udiv64+0x24e>
800099e0:	5f 0b       	sreq	r11
800099e2:	f4 09 09 49 	lsl	r9,r10,r9
800099e6:	12 32       	cp.w	r2,r9
800099e8:	5f b9       	srhi	r9
800099ea:	f7 e9 00 09 	and	r9,r11,r9
800099ee:	c0 60       	breq	800099fa <__avr32_udiv64+0x258>
800099f0:	20 18       	sub	r8,1
800099f2:	30 09       	mov	r9,0
800099f4:	c0 38       	rjmp	800099fa <__avr32_udiv64+0x258>
800099f6:	30 09       	mov	r9,0
800099f8:	12 98       	mov	r8,r9
800099fa:	10 9a       	mov	r10,r8
800099fc:	12 93       	mov	r3,r9
800099fe:	10 92       	mov	r2,r8
80009a00:	12 9b       	mov	r11,r9
80009a02:	2f dd       	sub	sp,-12
80009a04:	d8 32       	popm	r0-r7,pc

80009a06 <__avr32_umod64>:
80009a06:	d4 31       	pushm	r0-r7,lr
80009a08:	1a 97       	mov	r7,sp
80009a0a:	20 3d       	sub	sp,12
80009a0c:	10 9c       	mov	r12,r8
80009a0e:	12 95       	mov	r5,r9
80009a10:	14 9e       	mov	lr,r10
80009a12:	16 91       	mov	r1,r11
80009a14:	16 96       	mov	r6,r11
80009a16:	58 09       	cp.w	r9,0
80009a18:	e0 81 00 81 	brne	80009b1a <__avr32_umod64+0x114>
80009a1c:	16 38       	cp.w	r8,r11
80009a1e:	e0 88 00 12 	brls	80009a42 <__avr32_umod64+0x3c>
80009a22:	f0 08 12 00 	clz	r8,r8
80009a26:	c4 e0       	breq	80009ac2 <__avr32_umod64+0xbc>
80009a28:	f6 08 09 46 	lsl	r6,r11,r8
80009a2c:	f8 08 09 4c 	lsl	r12,r12,r8
80009a30:	f0 0b 11 20 	rsub	r11,r8,32
80009a34:	f4 08 09 4e 	lsl	lr,r10,r8
80009a38:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009a3c:	f7 e6 10 06 	or	r6,r11,r6
80009a40:	c4 18       	rjmp	80009ac2 <__avr32_umod64+0xbc>
80009a42:	58 08       	cp.w	r8,0
80009a44:	c0 51       	brne	80009a4e <__avr32_umod64+0x48>
80009a46:	30 19       	mov	r9,1
80009a48:	f2 08 0d 08 	divu	r8,r9,r8
80009a4c:	10 9c       	mov	r12,r8
80009a4e:	f8 08 12 00 	clz	r8,r12
80009a52:	c0 31       	brne	80009a58 <__avr32_umod64+0x52>
80009a54:	18 16       	sub	r6,r12
80009a56:	c3 68       	rjmp	80009ac2 <__avr32_umod64+0xbc>
80009a58:	f0 03 11 20 	rsub	r3,r8,32
80009a5c:	f4 03 0a 4b 	lsr	r11,r10,r3
80009a60:	f8 08 09 4c 	lsl	r12,r12,r8
80009a64:	ec 08 09 49 	lsl	r9,r6,r8
80009a68:	ec 03 0a 43 	lsr	r3,r6,r3
80009a6c:	f7 e9 10 09 	or	r9,r11,r9
80009a70:	f8 05 16 10 	lsr	r5,r12,0x10
80009a74:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009a78:	e6 05 0d 02 	divu	r2,r3,r5
80009a7c:	f2 0e 16 10 	lsr	lr,r9,0x10
80009a80:	ec 02 02 4b 	mul	r11,r6,r2
80009a84:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009a88:	16 3e       	cp.w	lr,r11
80009a8a:	c0 72       	brcc	80009a98 <__avr32_umod64+0x92>
80009a8c:	18 0e       	add	lr,r12
80009a8e:	18 3e       	cp.w	lr,r12
80009a90:	c0 43       	brcs	80009a98 <__avr32_umod64+0x92>
80009a92:	16 3e       	cp.w	lr,r11
80009a94:	fd dc e3 0e 	addcs	lr,lr,r12
80009a98:	fc 0b 01 03 	sub	r3,lr,r11
80009a9c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009aa0:	e6 05 0d 02 	divu	r2,r3,r5
80009aa4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009aa8:	a5 36       	mul	r6,r2
80009aaa:	0c 39       	cp.w	r9,r6
80009aac:	c0 72       	brcc	80009aba <__avr32_umod64+0xb4>
80009aae:	18 09       	add	r9,r12
80009ab0:	18 39       	cp.w	r9,r12
80009ab2:	c0 43       	brcs	80009aba <__avr32_umod64+0xb4>
80009ab4:	0c 39       	cp.w	r9,r6
80009ab6:	f3 dc e3 09 	addcs	r9,r9,r12
80009aba:	f2 06 01 06 	sub	r6,r9,r6
80009abe:	f4 08 09 4e 	lsl	lr,r10,r8
80009ac2:	f8 0a 16 10 	lsr	r10,r12,0x10
80009ac6:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009aca:	ec 0a 0d 02 	divu	r2,r6,r10
80009ace:	fc 09 16 10 	lsr	r9,lr,0x10
80009ad2:	ea 02 02 4b 	mul	r11,r5,r2
80009ad6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009ada:	16 39       	cp.w	r9,r11
80009adc:	c0 72       	brcc	80009aea <__avr32_umod64+0xe4>
80009ade:	18 09       	add	r9,r12
80009ae0:	18 39       	cp.w	r9,r12
80009ae2:	c0 43       	brcs	80009aea <__avr32_umod64+0xe4>
80009ae4:	16 39       	cp.w	r9,r11
80009ae6:	f3 dc e3 09 	addcs	r9,r9,r12
80009aea:	f2 0b 01 0b 	sub	r11,r9,r11
80009aee:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009af2:	f6 0a 0d 0a 	divu	r10,r11,r10
80009af6:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009afa:	ea 0a 02 4a 	mul	r10,r5,r10
80009afe:	14 3e       	cp.w	lr,r10
80009b00:	c0 72       	brcc	80009b0e <__avr32_umod64+0x108>
80009b02:	18 0e       	add	lr,r12
80009b04:	18 3e       	cp.w	lr,r12
80009b06:	c0 43       	brcs	80009b0e <__avr32_umod64+0x108>
80009b08:	14 3e       	cp.w	lr,r10
80009b0a:	fd dc e3 0e 	addcs	lr,lr,r12
80009b0e:	fc 0a 01 0a 	sub	r10,lr,r10
80009b12:	30 0b       	mov	r11,0
80009b14:	f4 08 0a 4a 	lsr	r10,r10,r8
80009b18:	c7 b8       	rjmp	80009c0e <__avr32_umod64+0x208>
80009b1a:	16 39       	cp.w	r9,r11
80009b1c:	e0 8b 00 79 	brhi	80009c0e <__avr32_umod64+0x208>
80009b20:	f2 09 12 00 	clz	r9,r9
80009b24:	c1 21       	brne	80009b48 <__avr32_umod64+0x142>
80009b26:	10 3a       	cp.w	r10,r8
80009b28:	5f 2b       	srhs	r11
80009b2a:	0a 31       	cp.w	r1,r5
80009b2c:	5f ba       	srhi	r10
80009b2e:	f7 ea 10 0a 	or	r10,r11,r10
80009b32:	f2 0a 18 00 	cp.b	r10,r9
80009b36:	c0 60       	breq	80009b42 <__avr32_umod64+0x13c>
80009b38:	fc 08 01 0c 	sub	r12,lr,r8
80009b3c:	e2 05 01 46 	sbc	r6,r1,r5
80009b40:	18 9e       	mov	lr,r12
80009b42:	0c 9b       	mov	r11,r6
80009b44:	1c 9a       	mov	r10,lr
80009b46:	c6 48       	rjmp	80009c0e <__avr32_umod64+0x208>
80009b48:	ea 09 09 4c 	lsl	r12,r5,r9
80009b4c:	f2 06 11 20 	rsub	r6,r9,32
80009b50:	f6 09 09 4b 	lsl	r11,r11,r9
80009b54:	f0 09 09 42 	lsl	r2,r8,r9
80009b58:	ef 46 ff f4 	st.w	r7[-12],r6
80009b5c:	f0 06 0a 48 	lsr	r8,r8,r6
80009b60:	18 48       	or	r8,r12
80009b62:	e2 06 0a 4c 	lsr	r12,r1,r6
80009b66:	f4 09 09 43 	lsl	r3,r10,r9
80009b6a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80009b6e:	f4 06 0a 4a 	lsr	r10,r10,r6
80009b72:	16 4a       	or	r10,r11
80009b74:	f0 0b 16 10 	lsr	r11,r8,0x10
80009b78:	f8 0b 0d 04 	divu	r4,r12,r11
80009b7c:	f4 0c 16 10 	lsr	r12,r10,0x10
80009b80:	08 91       	mov	r1,r4
80009b82:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009b86:	e8 0e 02 46 	mul	r6,r4,lr
80009b8a:	0c 3c       	cp.w	r12,r6
80009b8c:	c0 a2       	brcc	80009ba0 <__avr32_umod64+0x19a>
80009b8e:	20 11       	sub	r1,1
80009b90:	10 0c       	add	r12,r8
80009b92:	10 3c       	cp.w	r12,r8
80009b94:	c0 63       	brcs	80009ba0 <__avr32_umod64+0x19a>
80009b96:	0c 3c       	cp.w	r12,r6
80009b98:	f7 b1 03 01 	sublo	r1,1
80009b9c:	f9 d8 e3 0c 	addcs	r12,r12,r8
80009ba0:	0c 1c       	sub	r12,r6
80009ba2:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009ba6:	f8 0b 0d 04 	divu	r4,r12,r11
80009baa:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80009bae:	08 96       	mov	r6,r4
80009bb0:	e8 0e 02 4e 	mul	lr,r4,lr
80009bb4:	1c 3b       	cp.w	r11,lr
80009bb6:	c0 a2       	brcc	80009bca <__avr32_umod64+0x1c4>
80009bb8:	20 16       	sub	r6,1
80009bba:	10 0b       	add	r11,r8
80009bbc:	10 3b       	cp.w	r11,r8
80009bbe:	c0 63       	brcs	80009bca <__avr32_umod64+0x1c4>
80009bc0:	1c 3b       	cp.w	r11,lr
80009bc2:	f7 b6 03 01 	sublo	r6,1
80009bc6:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009bca:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009bce:	1c 1b       	sub	r11,lr
80009bd0:	e2 02 06 40 	mulu.d	r0,r1,r2
80009bd4:	00 9e       	mov	lr,r0
80009bd6:	02 9c       	mov	r12,r1
80009bd8:	16 3c       	cp.w	r12,r11
80009bda:	e0 8b 00 08 	brhi	80009bea <__avr32_umod64+0x1e4>
80009bde:	5f 06       	sreq	r6
80009be0:	06 30       	cp.w	r0,r3
80009be2:	5f ba       	srhi	r10
80009be4:	ed ea 00 0a 	and	r10,r6,r10
80009be8:	c0 60       	breq	80009bf4 <__avr32_umod64+0x1ee>
80009bea:	fc 02 01 04 	sub	r4,lr,r2
80009bee:	f8 08 01 4c 	sbc	r12,r12,r8
80009bf2:	08 9e       	mov	lr,r4
80009bf4:	e6 0e 01 0a 	sub	r10,r3,lr
80009bf8:	f6 0c 01 4c 	sbc	r12,r11,r12
80009bfc:	ee f1 ff f4 	ld.w	r1,r7[-12]
80009c00:	f8 09 0a 4b 	lsr	r11,r12,r9
80009c04:	f4 09 0a 4a 	lsr	r10,r10,r9
80009c08:	f8 01 09 4c 	lsl	r12,r12,r1
80009c0c:	18 4a       	or	r10,r12
80009c0e:	2f dd       	sub	sp,-12
80009c10:	d8 32       	popm	r0-r7,pc
80009c12:	d7 03       	nop

80009c14 <__do_global_ctors_aux>:
80009c14:	d4 21       	pushm	r4-r7,lr
80009c16:	30 c7       	mov	r7,12
80009c18:	c0 28       	rjmp	80009c1c <__do_global_ctors_aux+0x8>
80009c1a:	5d 18       	icall	r8
80009c1c:	20 47       	sub	r7,4
80009c1e:	6e 08       	ld.w	r8,r7[0x0]
80009c20:	5b f8       	cp.w	r8,-1
80009c22:	cf c1       	brne	80009c1a <__do_global_ctors_aux+0x6>
80009c24:	d8 22       	popm	r4-r7,pc
80009c26:	d7 03       	nop

Disassembly of section .exception:

80009e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009e00:	c0 08       	rjmp	80009e00 <_evba>
	...

80009e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009e04:	c0 08       	rjmp	80009e04 <_handle_TLB_Multiple_Hit>
	...

80009e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009e08:	c0 08       	rjmp	80009e08 <_handle_Bus_Error_Data_Fetch>
	...

80009e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80009e0c:	c0 08       	rjmp	80009e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80009e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009e10:	c0 08       	rjmp	80009e10 <_handle_NMI>
	...

80009e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009e14:	c0 08       	rjmp	80009e14 <_handle_Instruction_Address>
	...

80009e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009e18:	c0 08       	rjmp	80009e18 <_handle_ITLB_Protection>
	...

80009e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80009e1c:	c0 08       	rjmp	80009e1c <_handle_Breakpoint>
	...

80009e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009e20:	c0 08       	rjmp	80009e20 <_handle_Illegal_Opcode>
	...

80009e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009e24:	c0 08       	rjmp	80009e24 <_handle_Unimplemented_Instruction>
	...

80009e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009e28:	c0 08       	rjmp	80009e28 <_handle_Privilege_Violation>
	...

80009e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR UC3.
_handle_Floating_Point:
	rjmp $
80009e2c:	c0 08       	rjmp	80009e2c <_handle_Floating_Point>
	...

80009e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR UC3.
_handle_Coprocessor_Absent:
	rjmp $
80009e30:	c0 08       	rjmp	80009e30 <_handle_Coprocessor_Absent>
	...

80009e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009e34:	c0 08       	rjmp	80009e34 <_handle_Data_Address_Read>
	...

80009e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009e38:	c0 08       	rjmp	80009e38 <_handle_Data_Address_Write>
	...

80009e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80009e3c:	c0 08       	rjmp	80009e3c <_handle_DTLB_Protection_Read>
	...

80009e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009e40:	c0 08       	rjmp	80009e40 <_handle_DTLB_Protection_Write>
	...

80009e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009e44:	c0 08       	rjmp	80009e44 <_handle_DTLB_Modified>
	...

80009e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009e50:	c0 08       	rjmp	80009e50 <_handle_ITLB_Miss>
	...

80009e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009e60:	c0 08       	rjmp	80009e60 <_handle_DTLB_Miss_Read>
	...

80009e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009e70:	c0 08       	rjmp	80009e70 <_handle_DTLB_Miss_Write>
	...

80009f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	lda.w   pc, SCALLYield
80009f00:	fe cf 6c 14 	sub	pc,pc,27668

80009f04 <_int0>:
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
	rete
.endr
80009f04:	30 0c       	mov	r12,0
80009f06:	fe b0 c5 47 	rcall	80002994 <_get_interrupt_handler>
80009f0a:	58 0c       	cp.w	r12,0
80009f0c:	f8 0f 17 10 	movne	pc,r12
80009f10:	d6 03       	rete

80009f12 <_int1>:
80009f12:	30 1c       	mov	r12,1
80009f14:	fe b0 c5 40 	rcall	80002994 <_get_interrupt_handler>
80009f18:	58 0c       	cp.w	r12,0
80009f1a:	f8 0f 17 10 	movne	pc,r12
80009f1e:	d6 03       	rete

80009f20 <_int2>:
80009f20:	30 2c       	mov	r12,2
80009f22:	fe b0 c5 39 	rcall	80002994 <_get_interrupt_handler>
80009f26:	58 0c       	cp.w	r12,0
80009f28:	f8 0f 17 10 	movne	pc,r12
80009f2c:	d6 03       	rete

80009f2e <_int3>:
80009f2e:	30 3c       	mov	r12,3
80009f30:	fe b0 c5 32 	rcall	80002994 <_get_interrupt_handler>
80009f34:	58 0c       	cp.w	r12,0
80009f36:	f8 0f 17 10 	movne	pc,r12
80009f3a:	d6 03       	rete
80009f3c:	d7 03       	nop
80009f3e:	d7 03       	nop
80009f40:	d7 03       	nop
80009f42:	d7 03       	nop
80009f44:	d7 03       	nop
80009f46:	d7 03       	nop
80009f48:	d7 03       	nop
80009f4a:	d7 03       	nop
80009f4c:	d7 03       	nop
80009f4e:	d7 03       	nop
80009f50:	d7 03       	nop
80009f52:	d7 03       	nop
80009f54:	d7 03       	nop
80009f56:	d7 03       	nop
80009f58:	d7 03       	nop
80009f5a:	d7 03       	nop
80009f5c:	d7 03       	nop
80009f5e:	d7 03       	nop
80009f60:	d7 03       	nop
80009f62:	d7 03       	nop
80009f64:	d7 03       	nop
80009f66:	d7 03       	nop
80009f68:	d7 03       	nop
80009f6a:	d7 03       	nop
80009f6c:	d7 03       	nop
80009f6e:	d7 03       	nop
80009f70:	d7 03       	nop
80009f72:	d7 03       	nop
80009f74:	d7 03       	nop
80009f76:	d7 03       	nop
80009f78:	d7 03       	nop
80009f7a:	d7 03       	nop
80009f7c:	d7 03       	nop
80009f7e:	d7 03       	nop
80009f80:	d7 03       	nop
80009f82:	d7 03       	nop
80009f84:	d7 03       	nop
80009f86:	d7 03       	nop
80009f88:	d7 03       	nop
80009f8a:	d7 03       	nop
80009f8c:	d7 03       	nop
80009f8e:	d7 03       	nop
80009f90:	d7 03       	nop
80009f92:	d7 03       	nop
80009f94:	d7 03       	nop
80009f96:	d7 03       	nop
80009f98:	d7 03       	nop
80009f9a:	d7 03       	nop
80009f9c:	d7 03       	nop
80009f9e:	d7 03       	nop
80009fa0:	d7 03       	nop
80009fa2:	d7 03       	nop
80009fa4:	d7 03       	nop
80009fa6:	d7 03       	nop
80009fa8:	d7 03       	nop
80009faa:	d7 03       	nop
80009fac:	d7 03       	nop
80009fae:	d7 03       	nop
80009fb0:	d7 03       	nop
80009fb2:	d7 03       	nop
80009fb4:	d7 03       	nop
80009fb6:	d7 03       	nop
80009fb8:	d7 03       	nop
80009fba:	d7 03       	nop
80009fbc:	d7 03       	nop
80009fbe:	d7 03       	nop
80009fc0:	d7 03       	nop
80009fc2:	d7 03       	nop
80009fc4:	d7 03       	nop
80009fc6:	d7 03       	nop
80009fc8:	d7 03       	nop
80009fca:	d7 03       	nop
80009fcc:	d7 03       	nop
80009fce:	d7 03       	nop
80009fd0:	d7 03       	nop
80009fd2:	d7 03       	nop
80009fd4:	d7 03       	nop
80009fd6:	d7 03       	nop
80009fd8:	d7 03       	nop
80009fda:	d7 03       	nop
80009fdc:	d7 03       	nop
80009fde:	d7 03       	nop
80009fe0:	d7 03       	nop
80009fe2:	d7 03       	nop
80009fe4:	d7 03       	nop
80009fe6:	d7 03       	nop
80009fe8:	d7 03       	nop
80009fea:	d7 03       	nop
80009fec:	d7 03       	nop
80009fee:	d7 03       	nop
80009ff0:	d7 03       	nop
80009ff2:	d7 03       	nop
80009ff4:	d7 03       	nop
80009ff6:	d7 03       	nop
80009ff8:	d7 03       	nop
80009ffa:	d7 03       	nop
80009ffc:	d7 03       	nop
80009ffe:	d7 03       	nop

Disassembly of section .fini:

8000a000 <_fini>:
8000a000:	eb cd 40 40 	pushm	r6,lr
8000a004:	48 26       	lddpc	r6,8000a00c <_fini+0xc>
8000a006:	1e 26       	rsub	r6,pc
8000a008:	c0 48       	rjmp	8000a010 <_fini+0x10>
8000a00a:	d7 03       	nop
8000a00c:	80 00       	ld.sh	r0,r0[0x0]
8000a00e:	9f ea       	st.w	pc[0x38],r10
8000a010:	fe b0 c0 3c 	rcall	80002088 <__do_global_dtors_aux>
8000a014:	e3 cd 80 40 	ldm	sp++,r6,pc
